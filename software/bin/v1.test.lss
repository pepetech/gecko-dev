
bin/v1.test.elf:     file format elf32-littlearm


Disassembly of section .text:

00000150 <__aeabi_drsub>:
     150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     154:	e002      	b.n	15c <__adddf3>
     156:	bf00      	nop

00000158 <__aeabi_dsub>:
     158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000015c <__adddf3>:
     15c:	b530      	push	{r4, r5, lr}
     15e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     162:	ea4f 0543 	mov.w	r5, r3, lsl #1
     166:	ea94 0f05 	teq	r4, r5
     16a:	bf08      	it	eq
     16c:	ea90 0f02 	teqeq	r0, r2
     170:	bf1f      	itttt	ne
     172:	ea54 0c00 	orrsne.w	ip, r4, r0
     176:	ea55 0c02 	orrsne.w	ip, r5, r2
     17a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     17e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     182:	f000 80e2 	beq.w	34a <__adddf3+0x1ee>
     186:	ea4f 5454 	mov.w	r4, r4, lsr #21
     18a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     18e:	bfb8      	it	lt
     190:	426d      	neglt	r5, r5
     192:	dd0c      	ble.n	1ae <__adddf3+0x52>
     194:	442c      	add	r4, r5
     196:	ea80 0202 	eor.w	r2, r0, r2
     19a:	ea81 0303 	eor.w	r3, r1, r3
     19e:	ea82 0000 	eor.w	r0, r2, r0
     1a2:	ea83 0101 	eor.w	r1, r3, r1
     1a6:	ea80 0202 	eor.w	r2, r0, r2
     1aa:	ea81 0303 	eor.w	r3, r1, r3
     1ae:	2d36      	cmp	r5, #54	; 0x36
     1b0:	bf88      	it	hi
     1b2:	bd30      	pophi	{r4, r5, pc}
     1b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     1b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     1bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     1c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     1c4:	d002      	beq.n	1cc <__adddf3+0x70>
     1c6:	4240      	negs	r0, r0
     1c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     1cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     1d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     1d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     1d8:	d002      	beq.n	1e0 <__adddf3+0x84>
     1da:	4252      	negs	r2, r2
     1dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     1e0:	ea94 0f05 	teq	r4, r5
     1e4:	f000 80a7 	beq.w	336 <__adddf3+0x1da>
     1e8:	f1a4 0401 	sub.w	r4, r4, #1
     1ec:	f1d5 0e20 	rsbs	lr, r5, #32
     1f0:	db0d      	blt.n	20e <__adddf3+0xb2>
     1f2:	fa02 fc0e 	lsl.w	ip, r2, lr
     1f6:	fa22 f205 	lsr.w	r2, r2, r5
     1fa:	1880      	adds	r0, r0, r2
     1fc:	f141 0100 	adc.w	r1, r1, #0
     200:	fa03 f20e 	lsl.w	r2, r3, lr
     204:	1880      	adds	r0, r0, r2
     206:	fa43 f305 	asr.w	r3, r3, r5
     20a:	4159      	adcs	r1, r3
     20c:	e00e      	b.n	22c <__adddf3+0xd0>
     20e:	f1a5 0520 	sub.w	r5, r5, #32
     212:	f10e 0e20 	add.w	lr, lr, #32
     216:	2a01      	cmp	r2, #1
     218:	fa03 fc0e 	lsl.w	ip, r3, lr
     21c:	bf28      	it	cs
     21e:	f04c 0c02 	orrcs.w	ip, ip, #2
     222:	fa43 f305 	asr.w	r3, r3, r5
     226:	18c0      	adds	r0, r0, r3
     228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     22c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     230:	d507      	bpl.n	242 <__adddf3+0xe6>
     232:	f04f 0e00 	mov.w	lr, #0
     236:	f1dc 0c00 	rsbs	ip, ip, #0
     23a:	eb7e 0000 	sbcs.w	r0, lr, r0
     23e:	eb6e 0101 	sbc.w	r1, lr, r1
     242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     246:	d31b      	bcc.n	280 <__adddf3+0x124>
     248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     24c:	d30c      	bcc.n	268 <__adddf3+0x10c>
     24e:	0849      	lsrs	r1, r1, #1
     250:	ea5f 0030 	movs.w	r0, r0, rrx
     254:	ea4f 0c3c 	mov.w	ip, ip, rrx
     258:	f104 0401 	add.w	r4, r4, #1
     25c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     264:	f080 809a 	bcs.w	39c <__adddf3+0x240>
     268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     26c:	bf08      	it	eq
     26e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     272:	f150 0000 	adcs.w	r0, r0, #0
     276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     27a:	ea41 0105 	orr.w	r1, r1, r5
     27e:	bd30      	pop	{r4, r5, pc}
     280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     284:	4140      	adcs	r0, r0
     286:	eb41 0101 	adc.w	r1, r1, r1
     28a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     28e:	f1a4 0401 	sub.w	r4, r4, #1
     292:	d1e9      	bne.n	268 <__adddf3+0x10c>
     294:	f091 0f00 	teq	r1, #0
     298:	bf04      	itt	eq
     29a:	4601      	moveq	r1, r0
     29c:	2000      	moveq	r0, #0
     29e:	fab1 f381 	clz	r3, r1
     2a2:	bf08      	it	eq
     2a4:	3320      	addeq	r3, #32
     2a6:	f1a3 030b 	sub.w	r3, r3, #11
     2aa:	f1b3 0220 	subs.w	r2, r3, #32
     2ae:	da0c      	bge.n	2ca <__adddf3+0x16e>
     2b0:	320c      	adds	r2, #12
     2b2:	dd08      	ble.n	2c6 <__adddf3+0x16a>
     2b4:	f102 0c14 	add.w	ip, r2, #20
     2b8:	f1c2 020c 	rsb	r2, r2, #12
     2bc:	fa01 f00c 	lsl.w	r0, r1, ip
     2c0:	fa21 f102 	lsr.w	r1, r1, r2
     2c4:	e00c      	b.n	2e0 <__adddf3+0x184>
     2c6:	f102 0214 	add.w	r2, r2, #20
     2ca:	bfd8      	it	le
     2cc:	f1c2 0c20 	rsble	ip, r2, #32
     2d0:	fa01 f102 	lsl.w	r1, r1, r2
     2d4:	fa20 fc0c 	lsr.w	ip, r0, ip
     2d8:	bfdc      	itt	le
     2da:	ea41 010c 	orrle.w	r1, r1, ip
     2de:	4090      	lslle	r0, r2
     2e0:	1ae4      	subs	r4, r4, r3
     2e2:	bfa2      	ittt	ge
     2e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     2e8:	4329      	orrge	r1, r5
     2ea:	bd30      	popge	{r4, r5, pc}
     2ec:	ea6f 0404 	mvn.w	r4, r4
     2f0:	3c1f      	subs	r4, #31
     2f2:	da1c      	bge.n	32e <__adddf3+0x1d2>
     2f4:	340c      	adds	r4, #12
     2f6:	dc0e      	bgt.n	316 <__adddf3+0x1ba>
     2f8:	f104 0414 	add.w	r4, r4, #20
     2fc:	f1c4 0220 	rsb	r2, r4, #32
     300:	fa20 f004 	lsr.w	r0, r0, r4
     304:	fa01 f302 	lsl.w	r3, r1, r2
     308:	ea40 0003 	orr.w	r0, r0, r3
     30c:	fa21 f304 	lsr.w	r3, r1, r4
     310:	ea45 0103 	orr.w	r1, r5, r3
     314:	bd30      	pop	{r4, r5, pc}
     316:	f1c4 040c 	rsb	r4, r4, #12
     31a:	f1c4 0220 	rsb	r2, r4, #32
     31e:	fa20 f002 	lsr.w	r0, r0, r2
     322:	fa01 f304 	lsl.w	r3, r1, r4
     326:	ea40 0003 	orr.w	r0, r0, r3
     32a:	4629      	mov	r1, r5
     32c:	bd30      	pop	{r4, r5, pc}
     32e:	fa21 f004 	lsr.w	r0, r1, r4
     332:	4629      	mov	r1, r5
     334:	bd30      	pop	{r4, r5, pc}
     336:	f094 0f00 	teq	r4, #0
     33a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     33e:	bf06      	itte	eq
     340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     344:	3401      	addeq	r4, #1
     346:	3d01      	subne	r5, #1
     348:	e74e      	b.n	1e8 <__adddf3+0x8c>
     34a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     34e:	bf18      	it	ne
     350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     354:	d029      	beq.n	3aa <__adddf3+0x24e>
     356:	ea94 0f05 	teq	r4, r5
     35a:	bf08      	it	eq
     35c:	ea90 0f02 	teqeq	r0, r2
     360:	d005      	beq.n	36e <__adddf3+0x212>
     362:	ea54 0c00 	orrs.w	ip, r4, r0
     366:	bf04      	itt	eq
     368:	4619      	moveq	r1, r3
     36a:	4610      	moveq	r0, r2
     36c:	bd30      	pop	{r4, r5, pc}
     36e:	ea91 0f03 	teq	r1, r3
     372:	bf1e      	ittt	ne
     374:	2100      	movne	r1, #0
     376:	2000      	movne	r0, #0
     378:	bd30      	popne	{r4, r5, pc}
     37a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     37e:	d105      	bne.n	38c <__adddf3+0x230>
     380:	0040      	lsls	r0, r0, #1
     382:	4149      	adcs	r1, r1
     384:	bf28      	it	cs
     386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     38a:	bd30      	pop	{r4, r5, pc}
     38c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     390:	bf3c      	itt	cc
     392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     396:	bd30      	popcc	{r4, r5, pc}
     398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     39c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     3a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     3a4:	f04f 0000 	mov.w	r0, #0
     3a8:	bd30      	pop	{r4, r5, pc}
     3aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     3ae:	bf1a      	itte	ne
     3b0:	4619      	movne	r1, r3
     3b2:	4610      	movne	r0, r2
     3b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     3b8:	bf1c      	itt	ne
     3ba:	460b      	movne	r3, r1
     3bc:	4602      	movne	r2, r0
     3be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     3c2:	bf06      	itte	eq
     3c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     3c8:	ea91 0f03 	teqeq	r1, r3
     3cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     3d0:	bd30      	pop	{r4, r5, pc}
     3d2:	bf00      	nop

000003d4 <__aeabi_ui2d>:
     3d4:	f090 0f00 	teq	r0, #0
     3d8:	bf04      	itt	eq
     3da:	2100      	moveq	r1, #0
     3dc:	4770      	bxeq	lr
     3de:	b530      	push	{r4, r5, lr}
     3e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3e8:	f04f 0500 	mov.w	r5, #0
     3ec:	f04f 0100 	mov.w	r1, #0
     3f0:	e750      	b.n	294 <__adddf3+0x138>
     3f2:	bf00      	nop

000003f4 <__aeabi_i2d>:
     3f4:	f090 0f00 	teq	r0, #0
     3f8:	bf04      	itt	eq
     3fa:	2100      	moveq	r1, #0
     3fc:	4770      	bxeq	lr
     3fe:	b530      	push	{r4, r5, lr}
     400:	f44f 6480 	mov.w	r4, #1024	; 0x400
     404:	f104 0432 	add.w	r4, r4, #50	; 0x32
     408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     40c:	bf48      	it	mi
     40e:	4240      	negmi	r0, r0
     410:	f04f 0100 	mov.w	r1, #0
     414:	e73e      	b.n	294 <__adddf3+0x138>
     416:	bf00      	nop

00000418 <__aeabi_f2d>:
     418:	0042      	lsls	r2, r0, #1
     41a:	ea4f 01e2 	mov.w	r1, r2, asr #3
     41e:	ea4f 0131 	mov.w	r1, r1, rrx
     422:	ea4f 7002 	mov.w	r0, r2, lsl #28
     426:	bf1f      	itttt	ne
     428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     42c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     434:	4770      	bxne	lr
     436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     43a:	bf08      	it	eq
     43c:	4770      	bxeq	lr
     43e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     442:	bf04      	itt	eq
     444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     448:	4770      	bxeq	lr
     44a:	b530      	push	{r4, r5, lr}
     44c:	f44f 7460 	mov.w	r4, #896	; 0x380
     450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     458:	e71c      	b.n	294 <__adddf3+0x138>
     45a:	bf00      	nop

0000045c <__aeabi_ul2d>:
     45c:	ea50 0201 	orrs.w	r2, r0, r1
     460:	bf08      	it	eq
     462:	4770      	bxeq	lr
     464:	b530      	push	{r4, r5, lr}
     466:	f04f 0500 	mov.w	r5, #0
     46a:	e00a      	b.n	482 <__aeabi_l2d+0x16>

0000046c <__aeabi_l2d>:
     46c:	ea50 0201 	orrs.w	r2, r0, r1
     470:	bf08      	it	eq
     472:	4770      	bxeq	lr
     474:	b530      	push	{r4, r5, lr}
     476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     47a:	d502      	bpl.n	482 <__aeabi_l2d+0x16>
     47c:	4240      	negs	r0, r0
     47e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     482:	f44f 6480 	mov.w	r4, #1024	; 0x400
     486:	f104 0432 	add.w	r4, r4, #50	; 0x32
     48a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     48e:	f43f aed8 	beq.w	242 <__adddf3+0xe6>
     492:	f04f 0203 	mov.w	r2, #3
     496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     49a:	bf18      	it	ne
     49c:	3203      	addne	r2, #3
     49e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4a2:	bf18      	it	ne
     4a4:	3203      	addne	r2, #3
     4a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     4aa:	f1c2 0320 	rsb	r3, r2, #32
     4ae:	fa00 fc03 	lsl.w	ip, r0, r3
     4b2:	fa20 f002 	lsr.w	r0, r0, r2
     4b6:	fa01 fe03 	lsl.w	lr, r1, r3
     4ba:	ea40 000e 	orr.w	r0, r0, lr
     4be:	fa21 f102 	lsr.w	r1, r1, r2
     4c2:	4414      	add	r4, r2
     4c4:	e6bd      	b.n	242 <__adddf3+0xe6>
     4c6:	bf00      	nop

000004c8 <__aeabi_dmul>:
     4c8:	b570      	push	{r4, r5, r6, lr}
     4ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
     4ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     4d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     4d6:	bf1d      	ittte	ne
     4d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     4dc:	ea94 0f0c 	teqne	r4, ip
     4e0:	ea95 0f0c 	teqne	r5, ip
     4e4:	f000 f8de 	bleq	6a4 <__aeabi_dmul+0x1dc>
     4e8:	442c      	add	r4, r5
     4ea:	ea81 0603 	eor.w	r6, r1, r3
     4ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     4fa:	bf18      	it	ne
     4fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     508:	d038      	beq.n	57c <__aeabi_dmul+0xb4>
     50a:	fba0 ce02 	umull	ip, lr, r0, r2
     50e:	f04f 0500 	mov.w	r5, #0
     512:	fbe1 e502 	umlal	lr, r5, r1, r2
     516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     51a:	fbe0 e503 	umlal	lr, r5, r0, r3
     51e:	f04f 0600 	mov.w	r6, #0
     522:	fbe1 5603 	umlal	r5, r6, r1, r3
     526:	f09c 0f00 	teq	ip, #0
     52a:	bf18      	it	ne
     52c:	f04e 0e01 	orrne.w	lr, lr, #1
     530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     53c:	d204      	bcs.n	548 <__aeabi_dmul+0x80>
     53e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     542:	416d      	adcs	r5, r5
     544:	eb46 0606 	adc.w	r6, r6, r6
     548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     54c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     55c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     560:	bf88      	it	hi
     562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     566:	d81e      	bhi.n	5a6 <__aeabi_dmul+0xde>
     568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     56c:	bf08      	it	eq
     56e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     572:	f150 0000 	adcs.w	r0, r0, #0
     576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     57a:	bd70      	pop	{r4, r5, r6, pc}
     57c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     580:	ea46 0101 	orr.w	r1, r6, r1
     584:	ea40 0002 	orr.w	r0, r0, r2
     588:	ea81 0103 	eor.w	r1, r1, r3
     58c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     590:	bfc2      	ittt	gt
     592:	ebd4 050c 	rsbsgt	r5, r4, ip
     596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     59a:	bd70      	popgt	{r4, r5, r6, pc}
     59c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     5a0:	f04f 0e00 	mov.w	lr, #0
     5a4:	3c01      	subs	r4, #1
     5a6:	f300 80ab 	bgt.w	700 <__aeabi_dmul+0x238>
     5aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
     5ae:	bfde      	ittt	le
     5b0:	2000      	movle	r0, #0
     5b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     5b6:	bd70      	pople	{r4, r5, r6, pc}
     5b8:	f1c4 0400 	rsb	r4, r4, #0
     5bc:	3c20      	subs	r4, #32
     5be:	da35      	bge.n	62c <__aeabi_dmul+0x164>
     5c0:	340c      	adds	r4, #12
     5c2:	dc1b      	bgt.n	5fc <__aeabi_dmul+0x134>
     5c4:	f104 0414 	add.w	r4, r4, #20
     5c8:	f1c4 0520 	rsb	r5, r4, #32
     5cc:	fa00 f305 	lsl.w	r3, r0, r5
     5d0:	fa20 f004 	lsr.w	r0, r0, r4
     5d4:	fa01 f205 	lsl.w	r2, r1, r5
     5d8:	ea40 0002 	orr.w	r0, r0, r2
     5dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     5e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     5e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5e8:	fa21 f604 	lsr.w	r6, r1, r4
     5ec:	eb42 0106 	adc.w	r1, r2, r6
     5f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5f4:	bf08      	it	eq
     5f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5fa:	bd70      	pop	{r4, r5, r6, pc}
     5fc:	f1c4 040c 	rsb	r4, r4, #12
     600:	f1c4 0520 	rsb	r5, r4, #32
     604:	fa00 f304 	lsl.w	r3, r0, r4
     608:	fa20 f005 	lsr.w	r0, r0, r5
     60c:	fa01 f204 	lsl.w	r2, r1, r4
     610:	ea40 0002 	orr.w	r0, r0, r2
     614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     61c:	f141 0100 	adc.w	r1, r1, #0
     620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     624:	bf08      	it	eq
     626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     62a:	bd70      	pop	{r4, r5, r6, pc}
     62c:	f1c4 0520 	rsb	r5, r4, #32
     630:	fa00 f205 	lsl.w	r2, r0, r5
     634:	ea4e 0e02 	orr.w	lr, lr, r2
     638:	fa20 f304 	lsr.w	r3, r0, r4
     63c:	fa01 f205 	lsl.w	r2, r1, r5
     640:	ea43 0302 	orr.w	r3, r3, r2
     644:	fa21 f004 	lsr.w	r0, r1, r4
     648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     64c:	fa21 f204 	lsr.w	r2, r1, r4
     650:	ea20 0002 	bic.w	r0, r0, r2
     654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     65c:	bf08      	it	eq
     65e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     662:	bd70      	pop	{r4, r5, r6, pc}
     664:	f094 0f00 	teq	r4, #0
     668:	d10f      	bne.n	68a <__aeabi_dmul+0x1c2>
     66a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     66e:	0040      	lsls	r0, r0, #1
     670:	eb41 0101 	adc.w	r1, r1, r1
     674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     678:	bf08      	it	eq
     67a:	3c01      	subeq	r4, #1
     67c:	d0f7      	beq.n	66e <__aeabi_dmul+0x1a6>
     67e:	ea41 0106 	orr.w	r1, r1, r6
     682:	f095 0f00 	teq	r5, #0
     686:	bf18      	it	ne
     688:	4770      	bxne	lr
     68a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     68e:	0052      	lsls	r2, r2, #1
     690:	eb43 0303 	adc.w	r3, r3, r3
     694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     698:	bf08      	it	eq
     69a:	3d01      	subeq	r5, #1
     69c:	d0f7      	beq.n	68e <__aeabi_dmul+0x1c6>
     69e:	ea43 0306 	orr.w	r3, r3, r6
     6a2:	4770      	bx	lr
     6a4:	ea94 0f0c 	teq	r4, ip
     6a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     6ac:	bf18      	it	ne
     6ae:	ea95 0f0c 	teqne	r5, ip
     6b2:	d00c      	beq.n	6ce <__aeabi_dmul+0x206>
     6b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     6b8:	bf18      	it	ne
     6ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     6be:	d1d1      	bne.n	664 <__aeabi_dmul+0x19c>
     6c0:	ea81 0103 	eor.w	r1, r1, r3
     6c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6c8:	f04f 0000 	mov.w	r0, #0
     6cc:	bd70      	pop	{r4, r5, r6, pc}
     6ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     6d2:	bf06      	itte	eq
     6d4:	4610      	moveq	r0, r2
     6d6:	4619      	moveq	r1, r3
     6d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     6dc:	d019      	beq.n	712 <__aeabi_dmul+0x24a>
     6de:	ea94 0f0c 	teq	r4, ip
     6e2:	d102      	bne.n	6ea <__aeabi_dmul+0x222>
     6e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     6e8:	d113      	bne.n	712 <__aeabi_dmul+0x24a>
     6ea:	ea95 0f0c 	teq	r5, ip
     6ee:	d105      	bne.n	6fc <__aeabi_dmul+0x234>
     6f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6f4:	bf1c      	itt	ne
     6f6:	4610      	movne	r0, r2
     6f8:	4619      	movne	r1, r3
     6fa:	d10a      	bne.n	712 <__aeabi_dmul+0x24a>
     6fc:	ea81 0103 	eor.w	r1, r1, r3
     700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     70c:	f04f 0000 	mov.w	r0, #0
     710:	bd70      	pop	{r4, r5, r6, pc}
     712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     71a:	bd70      	pop	{r4, r5, r6, pc}

0000071c <__aeabi_ddiv>:
     71c:	b570      	push	{r4, r5, r6, lr}
     71e:	f04f 0cff 	mov.w	ip, #255	; 0xff
     722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     72a:	bf1d      	ittte	ne
     72c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     730:	ea94 0f0c 	teqne	r4, ip
     734:	ea95 0f0c 	teqne	r5, ip
     738:	f000 f8a7 	bleq	88a <_min_heap_size+0x8a>
     73c:	eba4 0405 	sub.w	r4, r4, r5
     740:	ea81 0e03 	eor.w	lr, r1, r3
     744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     748:	ea4f 3101 	mov.w	r1, r1, lsl #12
     74c:	f000 8088 	beq.w	860 <_min_heap_size+0x60>
     750:	ea4f 3303 	mov.w	r3, r3, lsl #12
     754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     75c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     760:	ea4f 2202 	mov.w	r2, r2, lsl #8
     764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     76c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     774:	429d      	cmp	r5, r3
     776:	bf08      	it	eq
     778:	4296      	cmpeq	r6, r2
     77a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     77e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     782:	d202      	bcs.n	78a <__aeabi_ddiv+0x6e>
     784:	085b      	lsrs	r3, r3, #1
     786:	ea4f 0232 	mov.w	r2, r2, rrx
     78a:	1ab6      	subs	r6, r6, r2
     78c:	eb65 0503 	sbc.w	r5, r5, r3
     790:	085b      	lsrs	r3, r3, #1
     792:	ea4f 0232 	mov.w	r2, r2, rrx
     796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     79a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     79e:	ebb6 0e02 	subs.w	lr, r6, r2
     7a2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7a6:	bf22      	ittt	cs
     7a8:	1ab6      	subcs	r6, r6, r2
     7aa:	4675      	movcs	r5, lr
     7ac:	ea40 000c 	orrcs.w	r0, r0, ip
     7b0:	085b      	lsrs	r3, r3, #1
     7b2:	ea4f 0232 	mov.w	r2, r2, rrx
     7b6:	ebb6 0e02 	subs.w	lr, r6, r2
     7ba:	eb75 0e03 	sbcs.w	lr, r5, r3
     7be:	bf22      	ittt	cs
     7c0:	1ab6      	subcs	r6, r6, r2
     7c2:	4675      	movcs	r5, lr
     7c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     7c8:	085b      	lsrs	r3, r3, #1
     7ca:	ea4f 0232 	mov.w	r2, r2, rrx
     7ce:	ebb6 0e02 	subs.w	lr, r6, r2
     7d2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7d6:	bf22      	ittt	cs
     7d8:	1ab6      	subcs	r6, r6, r2
     7da:	4675      	movcs	r5, lr
     7dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     7e0:	085b      	lsrs	r3, r3, #1
     7e2:	ea4f 0232 	mov.w	r2, r2, rrx
     7e6:	ebb6 0e02 	subs.w	lr, r6, r2
     7ea:	eb75 0e03 	sbcs.w	lr, r5, r3
     7ee:	bf22      	ittt	cs
     7f0:	1ab6      	subcs	r6, r6, r2
     7f2:	4675      	movcs	r5, lr
     7f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     7f8:	ea55 0e06 	orrs.w	lr, r5, r6
     7fc:	d018      	beq.n	830 <_min_heap_size+0x30>
     7fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
     802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     806:	ea4f 1606 	mov.w	r6, r6, lsl #4
     80a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     80e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     81a:	d1c0      	bne.n	79e <__aeabi_ddiv+0x82>
     81c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     820:	d10b      	bne.n	83a <_min_heap_size+0x3a>
     822:	ea41 0100 	orr.w	r1, r1, r0
     826:	f04f 0000 	mov.w	r0, #0
     82a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     82e:	e7b6      	b.n	79e <__aeabi_ddiv+0x82>
     830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     834:	bf04      	itt	eq
     836:	4301      	orreq	r1, r0
     838:	2000      	moveq	r0, #0
     83a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     83e:	bf88      	it	hi
     840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     844:	f63f aeaf 	bhi.w	5a6 <__aeabi_dmul+0xde>
     848:	ebb5 0c03 	subs.w	ip, r5, r3
     84c:	bf04      	itt	eq
     84e:	ebb6 0c02 	subseq.w	ip, r6, r2
     852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     856:	f150 0000 	adcs.w	r0, r0, #0
     85a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     85e:	bd70      	pop	{r4, r5, r6, pc}
     860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     86c:	bfc2      	ittt	gt
     86e:	ebd4 050c 	rsbsgt	r5, r4, ip
     872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     876:	bd70      	popgt	{r4, r5, r6, pc}
     878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     87c:	f04f 0e00 	mov.w	lr, #0
     880:	3c01      	subs	r4, #1
     882:	e690      	b.n	5a6 <__aeabi_dmul+0xde>
     884:	ea45 0e06 	orr.w	lr, r5, r6
     888:	e68d      	b.n	5a6 <__aeabi_dmul+0xde>
     88a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     88e:	ea94 0f0c 	teq	r4, ip
     892:	bf08      	it	eq
     894:	ea95 0f0c 	teqeq	r5, ip
     898:	f43f af3b 	beq.w	712 <__aeabi_dmul+0x24a>
     89c:	ea94 0f0c 	teq	r4, ip
     8a0:	d10a      	bne.n	8b8 <_min_heap_size+0xb8>
     8a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     8a6:	f47f af34 	bne.w	712 <__aeabi_dmul+0x24a>
     8aa:	ea95 0f0c 	teq	r5, ip
     8ae:	f47f af25 	bne.w	6fc <__aeabi_dmul+0x234>
     8b2:	4610      	mov	r0, r2
     8b4:	4619      	mov	r1, r3
     8b6:	e72c      	b.n	712 <__aeabi_dmul+0x24a>
     8b8:	ea95 0f0c 	teq	r5, ip
     8bc:	d106      	bne.n	8cc <_min_heap_size+0xcc>
     8be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     8c2:	f43f aefd 	beq.w	6c0 <__aeabi_dmul+0x1f8>
     8c6:	4610      	mov	r0, r2
     8c8:	4619      	mov	r1, r3
     8ca:	e722      	b.n	712 <__aeabi_dmul+0x24a>
     8cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     8d0:	bf18      	it	ne
     8d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     8d6:	f47f aec5 	bne.w	664 <__aeabi_dmul+0x19c>
     8da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     8de:	f47f af0d 	bne.w	6fc <__aeabi_dmul+0x234>
     8e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     8e6:	f47f aeeb 	bne.w	6c0 <__aeabi_dmul+0x1f8>
     8ea:	e712      	b.n	712 <__aeabi_dmul+0x24a>

000008ec <__gedf2>:
     8ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
     8f0:	e006      	b.n	900 <__cmpdf2+0x4>
     8f2:	bf00      	nop

000008f4 <__ledf2>:
     8f4:	f04f 0c01 	mov.w	ip, #1
     8f8:	e002      	b.n	900 <__cmpdf2+0x4>
     8fa:	bf00      	nop

000008fc <__cmpdf2>:
     8fc:	f04f 0c01 	mov.w	ip, #1
     900:	f84d cd04 	str.w	ip, [sp, #-4]!
     904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     90c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     910:	bf18      	it	ne
     912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     916:	d01b      	beq.n	950 <__cmpdf2+0x54>
     918:	b001      	add	sp, #4
     91a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     91e:	bf0c      	ite	eq
     920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     924:	ea91 0f03 	teqne	r1, r3
     928:	bf02      	ittt	eq
     92a:	ea90 0f02 	teqeq	r0, r2
     92e:	2000      	moveq	r0, #0
     930:	4770      	bxeq	lr
     932:	f110 0f00 	cmn.w	r0, #0
     936:	ea91 0f03 	teq	r1, r3
     93a:	bf58      	it	pl
     93c:	4299      	cmppl	r1, r3
     93e:	bf08      	it	eq
     940:	4290      	cmpeq	r0, r2
     942:	bf2c      	ite	cs
     944:	17d8      	asrcs	r0, r3, #31
     946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     94a:	f040 0001 	orr.w	r0, r0, #1
     94e:	4770      	bx	lr
     950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     958:	d102      	bne.n	960 <__cmpdf2+0x64>
     95a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     95e:	d107      	bne.n	970 <__cmpdf2+0x74>
     960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     968:	d1d6      	bne.n	918 <__cmpdf2+0x1c>
     96a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     96e:	d0d3      	beq.n	918 <__cmpdf2+0x1c>
     970:	f85d 0b04 	ldr.w	r0, [sp], #4
     974:	4770      	bx	lr
     976:	bf00      	nop

00000978 <__aeabi_cdrcmple>:
     978:	4684      	mov	ip, r0
     97a:	4610      	mov	r0, r2
     97c:	4662      	mov	r2, ip
     97e:	468c      	mov	ip, r1
     980:	4619      	mov	r1, r3
     982:	4663      	mov	r3, ip
     984:	e000      	b.n	988 <__aeabi_cdcmpeq>
     986:	bf00      	nop

00000988 <__aeabi_cdcmpeq>:
     988:	b501      	push	{r0, lr}
     98a:	f7ff ffb7 	bl	8fc <__cmpdf2>
     98e:	2800      	cmp	r0, #0
     990:	bf48      	it	mi
     992:	f110 0f00 	cmnmi.w	r0, #0
     996:	bd01      	pop	{r0, pc}

00000998 <__aeabi_dcmpeq>:
     998:	f84d ed08 	str.w	lr, [sp, #-8]!
     99c:	f7ff fff4 	bl	988 <__aeabi_cdcmpeq>
     9a0:	bf0c      	ite	eq
     9a2:	2001      	moveq	r0, #1
     9a4:	2000      	movne	r0, #0
     9a6:	f85d fb08 	ldr.w	pc, [sp], #8
     9aa:	bf00      	nop

000009ac <__aeabi_dcmplt>:
     9ac:	f84d ed08 	str.w	lr, [sp, #-8]!
     9b0:	f7ff ffea 	bl	988 <__aeabi_cdcmpeq>
     9b4:	bf34      	ite	cc
     9b6:	2001      	movcc	r0, #1
     9b8:	2000      	movcs	r0, #0
     9ba:	f85d fb08 	ldr.w	pc, [sp], #8
     9be:	bf00      	nop

000009c0 <__aeabi_dcmple>:
     9c0:	f84d ed08 	str.w	lr, [sp, #-8]!
     9c4:	f7ff ffe0 	bl	988 <__aeabi_cdcmpeq>
     9c8:	bf94      	ite	ls
     9ca:	2001      	movls	r0, #1
     9cc:	2000      	movhi	r0, #0
     9ce:	f85d fb08 	ldr.w	pc, [sp], #8
     9d2:	bf00      	nop

000009d4 <__aeabi_dcmpge>:
     9d4:	f84d ed08 	str.w	lr, [sp, #-8]!
     9d8:	f7ff ffce 	bl	978 <__aeabi_cdrcmple>
     9dc:	bf94      	ite	ls
     9de:	2001      	movls	r0, #1
     9e0:	2000      	movhi	r0, #0
     9e2:	f85d fb08 	ldr.w	pc, [sp], #8
     9e6:	bf00      	nop

000009e8 <__aeabi_dcmpgt>:
     9e8:	f84d ed08 	str.w	lr, [sp, #-8]!
     9ec:	f7ff ffc4 	bl	978 <__aeabi_cdrcmple>
     9f0:	bf34      	ite	cc
     9f2:	2001      	movcc	r0, #1
     9f4:	2000      	movcs	r0, #0
     9f6:	f85d fb08 	ldr.w	pc, [sp], #8
     9fa:	bf00      	nop

000009fc <__aeabi_d2iz>:
     9fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
     a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     a04:	d215      	bcs.n	a32 <__aeabi_d2iz+0x36>
     a06:	d511      	bpl.n	a2c <__aeabi_d2iz+0x30>
     a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     a10:	d912      	bls.n	a38 <__aeabi_d2iz+0x3c>
     a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     a22:	fa23 f002 	lsr.w	r0, r3, r2
     a26:	bf18      	it	ne
     a28:	4240      	negne	r0, r0
     a2a:	4770      	bx	lr
     a2c:	f04f 0000 	mov.w	r0, #0
     a30:	4770      	bx	lr
     a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     a36:	d105      	bne.n	a44 <__aeabi_d2iz+0x48>
     a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     a3c:	bf08      	it	eq
     a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     a42:	4770      	bx	lr
     a44:	f04f 0000 	mov.w	r0, #0
     a48:	4770      	bx	lr
     a4a:	bf00      	nop

00000a4c <__aeabi_d2uiz>:
     a4c:	004a      	lsls	r2, r1, #1
     a4e:	d211      	bcs.n	a74 <__aeabi_d2uiz+0x28>
     a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     a54:	d211      	bcs.n	a7a <__aeabi_d2uiz+0x2e>
     a56:	d50d      	bpl.n	a74 <__aeabi_d2uiz+0x28>
     a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     a60:	d40e      	bmi.n	a80 <__aeabi_d2uiz+0x34>
     a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     a6e:	fa23 f002 	lsr.w	r0, r3, r2
     a72:	4770      	bx	lr
     a74:	f04f 0000 	mov.w	r0, #0
     a78:	4770      	bx	lr
     a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     a7e:	d102      	bne.n	a86 <__aeabi_d2uiz+0x3a>
     a80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     a84:	4770      	bx	lr
     a86:	f04f 0000 	mov.w	r0, #0
     a8a:	4770      	bx	lr

00000a8c <__aeabi_uldivmod>:
     a8c:	b953      	cbnz	r3, aa4 <__aeabi_uldivmod+0x18>
     a8e:	b94a      	cbnz	r2, aa4 <__aeabi_uldivmod+0x18>
     a90:	2900      	cmp	r1, #0
     a92:	bf08      	it	eq
     a94:	2800      	cmpeq	r0, #0
     a96:	bf1c      	itt	ne
     a98:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     a9c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     aa0:	f000 b974 	b.w	d8c <__aeabi_idiv0>
     aa4:	f1ad 0c08 	sub.w	ip, sp, #8
     aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     aac:	f000 f806 	bl	abc <__udivmoddi4>
     ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
     ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     ab8:	b004      	add	sp, #16
     aba:	4770      	bx	lr

00000abc <__udivmoddi4>:
     abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     ac0:	9e08      	ldr	r6, [sp, #32]
     ac2:	4604      	mov	r4, r0
     ac4:	4688      	mov	r8, r1
     ac6:	2b00      	cmp	r3, #0
     ac8:	f040 8085 	bne.w	bd6 <__udivmoddi4+0x11a>
     acc:	428a      	cmp	r2, r1
     ace:	4615      	mov	r5, r2
     ad0:	d948      	bls.n	b64 <__udivmoddi4+0xa8>
     ad2:	fab2 f282 	clz	r2, r2
     ad6:	b14a      	cbz	r2, aec <__udivmoddi4+0x30>
     ad8:	f1c2 0720 	rsb	r7, r2, #32
     adc:	fa01 f302 	lsl.w	r3, r1, r2
     ae0:	fa20 f707 	lsr.w	r7, r0, r7
     ae4:	4095      	lsls	r5, r2
     ae6:	ea47 0803 	orr.w	r8, r7, r3
     aea:	4094      	lsls	r4, r2
     aec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     af0:	0c23      	lsrs	r3, r4, #16
     af2:	fbb8 f7fe 	udiv	r7, r8, lr
     af6:	fa1f fc85 	uxth.w	ip, r5
     afa:	fb0e 8817 	mls	r8, lr, r7, r8
     afe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
     b02:	fb07 f10c 	mul.w	r1, r7, ip
     b06:	4299      	cmp	r1, r3
     b08:	d909      	bls.n	b1e <__udivmoddi4+0x62>
     b0a:	18eb      	adds	r3, r5, r3
     b0c:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
     b10:	f080 80e3 	bcs.w	cda <__udivmoddi4+0x21e>
     b14:	4299      	cmp	r1, r3
     b16:	f240 80e0 	bls.w	cda <__udivmoddi4+0x21e>
     b1a:	3f02      	subs	r7, #2
     b1c:	442b      	add	r3, r5
     b1e:	1a5b      	subs	r3, r3, r1
     b20:	b2a4      	uxth	r4, r4
     b22:	fbb3 f0fe 	udiv	r0, r3, lr
     b26:	fb0e 3310 	mls	r3, lr, r0, r3
     b2a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     b2e:	fb00 fc0c 	mul.w	ip, r0, ip
     b32:	45a4      	cmp	ip, r4
     b34:	d909      	bls.n	b4a <__udivmoddi4+0x8e>
     b36:	192c      	adds	r4, r5, r4
     b38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     b3c:	f080 80cb 	bcs.w	cd6 <__udivmoddi4+0x21a>
     b40:	45a4      	cmp	ip, r4
     b42:	f240 80c8 	bls.w	cd6 <__udivmoddi4+0x21a>
     b46:	3802      	subs	r0, #2
     b48:	442c      	add	r4, r5
     b4a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
     b4e:	eba4 040c 	sub.w	r4, r4, ip
     b52:	2700      	movs	r7, #0
     b54:	b11e      	cbz	r6, b5e <__udivmoddi4+0xa2>
     b56:	40d4      	lsrs	r4, r2
     b58:	2300      	movs	r3, #0
     b5a:	e9c6 4300 	strd	r4, r3, [r6]
     b5e:	4639      	mov	r1, r7
     b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     b64:	2a00      	cmp	r2, #0
     b66:	d053      	beq.n	c10 <__udivmoddi4+0x154>
     b68:	fab2 f282 	clz	r2, r2
     b6c:	2a00      	cmp	r2, #0
     b6e:	f040 80b6 	bne.w	cde <__udivmoddi4+0x222>
     b72:	1b49      	subs	r1, r1, r5
     b74:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     b78:	fa1f f885 	uxth.w	r8, r5
     b7c:	2701      	movs	r7, #1
     b7e:	fbb1 fcfe 	udiv	ip, r1, lr
     b82:	0c23      	lsrs	r3, r4, #16
     b84:	fb0e 111c 	mls	r1, lr, ip, r1
     b88:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     b8c:	fb08 f10c 	mul.w	r1, r8, ip
     b90:	4299      	cmp	r1, r3
     b92:	d907      	bls.n	ba4 <__udivmoddi4+0xe8>
     b94:	18eb      	adds	r3, r5, r3
     b96:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     b9a:	d202      	bcs.n	ba2 <__udivmoddi4+0xe6>
     b9c:	4299      	cmp	r1, r3
     b9e:	f200 80ec 	bhi.w	d7a <__udivmoddi4+0x2be>
     ba2:	4684      	mov	ip, r0
     ba4:	1a59      	subs	r1, r3, r1
     ba6:	b2a3      	uxth	r3, r4
     ba8:	fbb1 f0fe 	udiv	r0, r1, lr
     bac:	fb0e 1410 	mls	r4, lr, r0, r1
     bb0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
     bb4:	fb08 f800 	mul.w	r8, r8, r0
     bb8:	45a0      	cmp	r8, r4
     bba:	d907      	bls.n	bcc <__udivmoddi4+0x110>
     bbc:	192c      	adds	r4, r5, r4
     bbe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     bc2:	d202      	bcs.n	bca <__udivmoddi4+0x10e>
     bc4:	45a0      	cmp	r8, r4
     bc6:	f200 80dc 	bhi.w	d82 <__udivmoddi4+0x2c6>
     bca:	4618      	mov	r0, r3
     bcc:	eba4 0408 	sub.w	r4, r4, r8
     bd0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     bd4:	e7be      	b.n	b54 <__udivmoddi4+0x98>
     bd6:	428b      	cmp	r3, r1
     bd8:	d908      	bls.n	bec <__udivmoddi4+0x130>
     bda:	2e00      	cmp	r6, #0
     bdc:	d078      	beq.n	cd0 <__udivmoddi4+0x214>
     bde:	2700      	movs	r7, #0
     be0:	e9c6 0100 	strd	r0, r1, [r6]
     be4:	4638      	mov	r0, r7
     be6:	4639      	mov	r1, r7
     be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     bec:	fab3 f783 	clz	r7, r3
     bf0:	b97f      	cbnz	r7, c12 <__udivmoddi4+0x156>
     bf2:	428b      	cmp	r3, r1
     bf4:	d302      	bcc.n	bfc <__udivmoddi4+0x140>
     bf6:	4282      	cmp	r2, r0
     bf8:	f200 80bd 	bhi.w	d76 <__udivmoddi4+0x2ba>
     bfc:	1a84      	subs	r4, r0, r2
     bfe:	eb61 0303 	sbc.w	r3, r1, r3
     c02:	2001      	movs	r0, #1
     c04:	4698      	mov	r8, r3
     c06:	2e00      	cmp	r6, #0
     c08:	d0a9      	beq.n	b5e <__udivmoddi4+0xa2>
     c0a:	e9c6 4800 	strd	r4, r8, [r6]
     c0e:	e7a6      	b.n	b5e <__udivmoddi4+0xa2>
     c10:	deff      	udf	#255	; 0xff
     c12:	f1c7 0520 	rsb	r5, r7, #32
     c16:	40bb      	lsls	r3, r7
     c18:	fa22 fc05 	lsr.w	ip, r2, r5
     c1c:	ea4c 0c03 	orr.w	ip, ip, r3
     c20:	fa01 f407 	lsl.w	r4, r1, r7
     c24:	fa20 f805 	lsr.w	r8, r0, r5
     c28:	fa21 f305 	lsr.w	r3, r1, r5
     c2c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
     c30:	ea48 0404 	orr.w	r4, r8, r4
     c34:	fbb3 f9fe 	udiv	r9, r3, lr
     c38:	0c21      	lsrs	r1, r4, #16
     c3a:	fb0e 3319 	mls	r3, lr, r9, r3
     c3e:	fa1f f88c 	uxth.w	r8, ip
     c42:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     c46:	fb09 fa08 	mul.w	sl, r9, r8
     c4a:	459a      	cmp	sl, r3
     c4c:	fa02 f207 	lsl.w	r2, r2, r7
     c50:	fa00 f107 	lsl.w	r1, r0, r7
     c54:	d90b      	bls.n	c6e <__udivmoddi4+0x1b2>
     c56:	eb1c 0303 	adds.w	r3, ip, r3
     c5a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     c5e:	f080 8088 	bcs.w	d72 <__udivmoddi4+0x2b6>
     c62:	459a      	cmp	sl, r3
     c64:	f240 8085 	bls.w	d72 <__udivmoddi4+0x2b6>
     c68:	f1a9 0902 	sub.w	r9, r9, #2
     c6c:	4463      	add	r3, ip
     c6e:	eba3 030a 	sub.w	r3, r3, sl
     c72:	b2a4      	uxth	r4, r4
     c74:	fbb3 f0fe 	udiv	r0, r3, lr
     c78:	fb0e 3310 	mls	r3, lr, r0, r3
     c7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     c80:	fb00 f808 	mul.w	r8, r0, r8
     c84:	45a0      	cmp	r8, r4
     c86:	d908      	bls.n	c9a <__udivmoddi4+0x1de>
     c88:	eb1c 0404 	adds.w	r4, ip, r4
     c8c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     c90:	d26b      	bcs.n	d6a <__udivmoddi4+0x2ae>
     c92:	45a0      	cmp	r8, r4
     c94:	d969      	bls.n	d6a <__udivmoddi4+0x2ae>
     c96:	3802      	subs	r0, #2
     c98:	4464      	add	r4, ip
     c9a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     c9e:	eba4 0408 	sub.w	r4, r4, r8
     ca2:	fba0 8902 	umull	r8, r9, r0, r2
     ca6:	454c      	cmp	r4, r9
     ca8:	46c6      	mov	lr, r8
     caa:	464b      	mov	r3, r9
     cac:	d354      	bcc.n	d58 <__udivmoddi4+0x29c>
     cae:	d051      	beq.n	d54 <__udivmoddi4+0x298>
     cb0:	2e00      	cmp	r6, #0
     cb2:	d069      	beq.n	d88 <__udivmoddi4+0x2cc>
     cb4:	ebb1 020e 	subs.w	r2, r1, lr
     cb8:	eb64 0403 	sbc.w	r4, r4, r3
     cbc:	fa04 f505 	lsl.w	r5, r4, r5
     cc0:	fa22 f307 	lsr.w	r3, r2, r7
     cc4:	40fc      	lsrs	r4, r7
     cc6:	431d      	orrs	r5, r3
     cc8:	e9c6 5400 	strd	r5, r4, [r6]
     ccc:	2700      	movs	r7, #0
     cce:	e746      	b.n	b5e <__udivmoddi4+0xa2>
     cd0:	4637      	mov	r7, r6
     cd2:	4630      	mov	r0, r6
     cd4:	e743      	b.n	b5e <__udivmoddi4+0xa2>
     cd6:	4618      	mov	r0, r3
     cd8:	e737      	b.n	b4a <__udivmoddi4+0x8e>
     cda:	4607      	mov	r7, r0
     cdc:	e71f      	b.n	b1e <__udivmoddi4+0x62>
     cde:	f1c2 0320 	rsb	r3, r2, #32
     ce2:	fa20 f703 	lsr.w	r7, r0, r3
     ce6:	4095      	lsls	r5, r2
     ce8:	fa01 f002 	lsl.w	r0, r1, r2
     cec:	fa21 f303 	lsr.w	r3, r1, r3
     cf0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     cf4:	4338      	orrs	r0, r7
     cf6:	0c01      	lsrs	r1, r0, #16
     cf8:	fbb3 f7fe 	udiv	r7, r3, lr
     cfc:	fa1f f885 	uxth.w	r8, r5
     d00:	fb0e 3317 	mls	r3, lr, r7, r3
     d04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     d08:	fb07 f308 	mul.w	r3, r7, r8
     d0c:	428b      	cmp	r3, r1
     d0e:	fa04 f402 	lsl.w	r4, r4, r2
     d12:	d907      	bls.n	d24 <__udivmoddi4+0x268>
     d14:	1869      	adds	r1, r5, r1
     d16:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
     d1a:	d228      	bcs.n	d6e <__udivmoddi4+0x2b2>
     d1c:	428b      	cmp	r3, r1
     d1e:	d926      	bls.n	d6e <__udivmoddi4+0x2b2>
     d20:	3f02      	subs	r7, #2
     d22:	4429      	add	r1, r5
     d24:	1acb      	subs	r3, r1, r3
     d26:	b281      	uxth	r1, r0
     d28:	fbb3 f0fe 	udiv	r0, r3, lr
     d2c:	fb0e 3310 	mls	r3, lr, r0, r3
     d30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     d34:	fb00 f308 	mul.w	r3, r0, r8
     d38:	428b      	cmp	r3, r1
     d3a:	d907      	bls.n	d4c <__udivmoddi4+0x290>
     d3c:	1869      	adds	r1, r5, r1
     d3e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     d42:	d210      	bcs.n	d66 <__udivmoddi4+0x2aa>
     d44:	428b      	cmp	r3, r1
     d46:	d90e      	bls.n	d66 <__udivmoddi4+0x2aa>
     d48:	3802      	subs	r0, #2
     d4a:	4429      	add	r1, r5
     d4c:	1ac9      	subs	r1, r1, r3
     d4e:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
     d52:	e714      	b.n	b7e <__udivmoddi4+0xc2>
     d54:	4541      	cmp	r1, r8
     d56:	d2ab      	bcs.n	cb0 <__udivmoddi4+0x1f4>
     d58:	ebb8 0e02 	subs.w	lr, r8, r2
     d5c:	eb69 020c 	sbc.w	r2, r9, ip
     d60:	3801      	subs	r0, #1
     d62:	4613      	mov	r3, r2
     d64:	e7a4      	b.n	cb0 <__udivmoddi4+0x1f4>
     d66:	4660      	mov	r0, ip
     d68:	e7f0      	b.n	d4c <__udivmoddi4+0x290>
     d6a:	4618      	mov	r0, r3
     d6c:	e795      	b.n	c9a <__udivmoddi4+0x1de>
     d6e:	4667      	mov	r7, ip
     d70:	e7d8      	b.n	d24 <__udivmoddi4+0x268>
     d72:	4681      	mov	r9, r0
     d74:	e77b      	b.n	c6e <__udivmoddi4+0x1b2>
     d76:	4638      	mov	r0, r7
     d78:	e745      	b.n	c06 <__udivmoddi4+0x14a>
     d7a:	f1ac 0c02 	sub.w	ip, ip, #2
     d7e:	442b      	add	r3, r5
     d80:	e710      	b.n	ba4 <__udivmoddi4+0xe8>
     d82:	3802      	subs	r0, #2
     d84:	442c      	add	r4, r5
     d86:	e721      	b.n	bcc <__udivmoddi4+0x110>
     d88:	4637      	mov	r7, r6
     d8a:	e6e8      	b.n	b5e <__udivmoddi4+0xa2>

00000d8c <__aeabi_idiv0>:
     d8c:	4770      	bx	lr
     d8e:	bf00      	nop

00000d90 <cmu_update_clocks>:
    // LFE Clock
    CMU->LFECLKSEL = CMU_LFECLKSEL_LFE_ULFRCO;
}
void cmu_update_clocks()
{
    if((CMU->STATUS & CMU_STATUS_DPLLRDY) == CMU_STATUS_DPLLRDY)
     d90:	499d      	ldr	r1, [pc, #628]	; (1008 <cmu_update_clocks+0x278>)
     d92:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
     d96:	049b      	lsls	r3, r3, #18
{
     d98:	b530      	push	{r4, r5, lr}
    if((CMU->STATUS & CMU_STATUS_DPLLRDY) == CMU_STATUS_DPLLRDY)
     d9a:	d510      	bpl.n	dbe <cmu_update_clocks+0x2e>
    {
        uint32_t ulPLLMul = (((CMU->DPLLCTRL1 & _CMU_DPLLCTRL1_N_MASK) >> _CMU_DPLLCTRL1_N_SHIFT) + 1) / (((CMU->DPLLCTRL1 & _CMU_DPLLCTRL1_M_MASK) >> _CMU_DPLLCTRL1_M_SHIFT) + 1);
     d9c:	6c4b      	ldr	r3, [r1, #68]	; 0x44
     d9e:	6c4a      	ldr	r2, [r1, #68]	; 0x44
     da0:	f3c3 430b 	ubfx	r3, r3, #16, #12
     da4:	f3c2 020b 	ubfx	r2, r2, #0, #12
     da8:	3201      	adds	r2, #1
     daa:	3301      	adds	r3, #1
     dac:	fbb3 f3f2 	udiv	r3, r3, r2
    
        switch(CMU->DPLLCTRL & _CMU_DPLLCTRL_REFSEL_MASK)
     db0:	6c0a      	ldr	r2, [r1, #64]	; 0x40
     db2:	f002 0218 	and.w	r2, r2, #24
     db6:	2a08      	cmp	r2, #8
     db8:	d01f      	beq.n	dfa <cmu_update_clocks+0x6a>
     dba:	d813      	bhi.n	de4 <cmu_update_clocks+0x54>
     dbc:	b1d2      	cbz	r2, df4 <cmu_update_clocks+0x64>
                HFRCO_VALUE = 0 * ulPLLMul; // TODO: Support external clock
            break;
        }
    }

    AUX_CLOCK_FREQ = AUXHFRCO_VALUE;
     dbe:	4b93      	ldr	r3, [pc, #588]	; (100c <cmu_update_clocks+0x27c>)

    switch(CMU->HFCLKSTATUS & _CMU_HFCLKSTATUS_SELECTED_MASK)
     dc0:	4991      	ldr	r1, [pc, #580]	; (1008 <cmu_update_clocks+0x278>)
    AUX_CLOCK_FREQ = AUXHFRCO_VALUE;
     dc2:	6818      	ldr	r0, [r3, #0]
     dc4:	4b92      	ldr	r3, [pc, #584]	; (1010 <cmu_update_clocks+0x280>)
     dc6:	6018      	str	r0, [r3, #0]
    switch(CMU->HFCLKSTATUS & _CMU_HFCLKSTATUS_SELECTED_MASK)
     dc8:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
     dcc:	4b91      	ldr	r3, [pc, #580]	; (1014 <cmu_update_clocks+0x284>)
     dce:	f002 0207 	and.w	r2, r2, #7
     dd2:	3a01      	subs	r2, #1
     dd4:	2a06      	cmp	r2, #6
     dd6:	d81c      	bhi.n	e12 <cmu_update_clocks+0x82>
     dd8:	e8df f002 	tbb	[pc, r2]
     ddc:	7a781916 	.word	0x7a781916
     de0:	817d      	.short	0x817d
     de2:	83          	.byte	0x83
     de3:	00          	.byte	0x00
        switch(CMU->DPLLCTRL & _CMU_DPLLCTRL_REFSEL_MASK)
     de4:	2a10      	cmp	r2, #16
     de6:	d00c      	beq.n	e02 <cmu_update_clocks+0x72>
     de8:	2a18      	cmp	r2, #24
     dea:	d1e8      	bne.n	dbe <cmu_update_clocks+0x2e>
                HFRCO_VALUE = 0 * ulPLLMul; // TODO: Support external clock
     dec:	4b8a      	ldr	r3, [pc, #552]	; (1018 <cmu_update_clocks+0x288>)
     dee:	2200      	movs	r2, #0
     df0:	601a      	str	r2, [r3, #0]
            break;
     df2:	e7e4      	b.n	dbe <cmu_update_clocks+0x2e>
                HFRCO_VALUE = HFXO_VALUE * ulPLLMul;
     df4:	4a89      	ldr	r2, [pc, #548]	; (101c <cmu_update_clocks+0x28c>)
                HFRCO_VALUE = USHFRCO_VALUE * ulPLLMul;
     df6:	4353      	muls	r3, r2
     df8:	e000      	b.n	dfc <cmu_update_clocks+0x6c>
                HFRCO_VALUE = LFXO_VALUE * ulPLLMul;
     dfa:	03db      	lsls	r3, r3, #15
     dfc:	4a86      	ldr	r2, [pc, #536]	; (1018 <cmu_update_clocks+0x288>)
     dfe:	6013      	str	r3, [r2, #0]
            break;
     e00:	e7dd      	b.n	dbe <cmu_update_clocks+0x2e>
                HFRCO_VALUE = USHFRCO_VALUE * ulPLLMul;
     e02:	4a87      	ldr	r2, [pc, #540]	; (1020 <cmu_update_clocks+0x290>)
     e04:	6812      	ldr	r2, [r2, #0]
     e06:	e7f6      	b.n	df6 <cmu_update_clocks+0x66>
    {
        case CMU_HFCLKSTATUS_SELECTED_HFRCO:
            HFSRC_CLOCK_FREQ = HFRCO_VALUE;
     e08:	4a83      	ldr	r2, [pc, #524]	; (1018 <cmu_update_clocks+0x288>)
        break;
        case CMU_HFCLKSTATUS_SELECTED_HFRCODIV2:
            HFSRC_CLOCK_FREQ = HFRCO_VALUE >> 1;
        break;
        case CMU_HFCLKSTATUS_SELECTED_USHFRCO:
            HFSRC_CLOCK_FREQ = USHFRCO_VALUE;
     e0a:	6812      	ldr	r2, [r2, #0]
     e0c:	e000      	b.n	e10 <cmu_update_clocks+0x80>
            HFSRC_CLOCK_FREQ = HFXO_VALUE;
     e0e:	4a83      	ldr	r2, [pc, #524]	; (101c <cmu_update_clocks+0x28c>)
        break;
        case CMU_HFCLKSTATUS_SELECTED_CLKIN0:
            HFSRC_CLOCK_FREQ = 0; // TODO: Support external clock
     e10:	601a      	str	r2, [r3, #0]
        break;
    }

    HF_CLOCK_FREQ = HFSRC_CLOCK_FREQ / (((CMU->HFPRESC & _CMU_HFPRESC_PRESC_MASK) >> _CMU_HFPRESC_PRESC_SHIFT) + 1);
     e12:	681c      	ldr	r4, [r3, #0]
     e14:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
     e18:	4a82      	ldr	r2, [pc, #520]	; (1024 <cmu_update_clocks+0x294>)
     e1a:	f3c3 2304 	ubfx	r3, r3, #8, #5
     e1e:	3301      	adds	r3, #1
     e20:	fbb4 f3f3 	udiv	r3, r4, r3
     e24:	6013      	str	r3, [r2, #0]

    switch(CMU->HFPRESC & _CMU_HFPRESC_HFCLKLEPRESC_MASK)
     e26:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
     e2a:	f002 7240 	and.w	r2, r2, #50331648	; 0x3000000
     e2e:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
     e32:	d058      	beq.n	ee6 <cmu_update_clocks+0x156>
     e34:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
     e38:	d057      	beq.n	eea <cmu_update_clocks+0x15a>
     e3a:	b912      	cbnz	r2, e42 <cmu_update_clocks+0xb2>
    {
        case CMU_HFPRESC_HFCLKLEPRESC_DIV2:
            HFLE_CLOCK_FREQ = HF_CLOCK_FREQ >> 1;
     e3c:	085a      	lsrs	r2, r3, #1
        break;
        case CMU_HFPRESC_HFCLKLEPRESC_DIV4:
            HFLE_CLOCK_FREQ = HF_CLOCK_FREQ >> 2;
        break;
        case CMU_HFPRESC_HFCLKLEPRESC_DIV8:
            HFLE_CLOCK_FREQ = HF_CLOCK_FREQ >> 3;
     e3e:	497a      	ldr	r1, [pc, #488]	; (1028 <cmu_update_clocks+0x298>)
     e40:	600a      	str	r2, [r1, #0]
        break;
    }

    HFBUS_CLOCK_FREQ = HF_CLOCK_FREQ / (((CMU->HFBUSPRESC & _CMU_HFBUSPRESC_PRESC_MASK) >> _CMU_HFBUSPRESC_PRESC_SHIFT) + 1);
     e42:	4a71      	ldr	r2, [pc, #452]	; (1008 <cmu_update_clocks+0x278>)
     e44:	4d79      	ldr	r5, [pc, #484]	; (102c <cmu_update_clocks+0x29c>)
     e46:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
     e4a:	f3c1 2108 	ubfx	r1, r1, #8, #9
     e4e:	3101      	adds	r1, #1
     e50:	fbb3 f1f1 	udiv	r1, r3, r1
     e54:	6029      	str	r1, [r5, #0]
    HFCORE_CLOCK_FREQ = HF_CLOCK_FREQ / (((CMU->HFCOREPRESC & _CMU_HFCOREPRESC_PRESC_MASK) >> _CMU_HFCOREPRESC_PRESC_SHIFT) + 1);
     e56:	f8d2 1108 	ldr.w	r1, [r2, #264]	; 0x108
     e5a:	4d75      	ldr	r5, [pc, #468]	; (1030 <cmu_update_clocks+0x2a0>)
     e5c:	f3c1 2108 	ubfx	r1, r1, #8, #9
     e60:	3101      	adds	r1, #1
     e62:	fbb3 f1f1 	udiv	r1, r3, r1
     e66:	6029      	str	r1, [r5, #0]
    HFEXP_CLOCK_FREQ = HF_CLOCK_FREQ / (((CMU->HFEXPPRESC & _CMU_HFEXPPRESC_PRESC_MASK) >> _CMU_HFEXPPRESC_PRESC_SHIFT) + 1);
     e68:	f8d2 1114 	ldr.w	r1, [r2, #276]	; 0x114
     e6c:	4d71      	ldr	r5, [pc, #452]	; (1034 <cmu_update_clocks+0x2a4>)
     e6e:	f3c1 2104 	ubfx	r1, r1, #8, #5
     e72:	3101      	adds	r1, #1
     e74:	fbb3 f1f1 	udiv	r1, r3, r1
     e78:	6029      	str	r1, [r5, #0]
    HFPER_CLOCK_FREQ = HF_CLOCK_FREQ / (((CMU->HFPERPRESC & _CMU_HFPERPRESC_PRESC_MASK) >> _CMU_HFPERPRESC_PRESC_SHIFT) + 1);
     e7a:	f8d2 110c 	ldr.w	r1, [r2, #268]	; 0x10c
     e7e:	4d6e      	ldr	r5, [pc, #440]	; (1038 <cmu_update_clocks+0x2a8>)
     e80:	f3c1 2108 	ubfx	r1, r1, #8, #9
     e84:	3101      	adds	r1, #1
     e86:	fbb3 f1f1 	udiv	r1, r3, r1
     e8a:	6029      	str	r1, [r5, #0]
    HFPERB_CLOCK_FREQ = HF_CLOCK_FREQ / (((CMU->HFPERPRESCB & _CMU_HFPERPRESCB_PRESC_MASK) >> _CMU_HFPERPRESCB_PRESC_SHIFT) + 1);
     e8c:	f8d2 1118 	ldr.w	r1, [r2, #280]	; 0x118
     e90:	4d6a      	ldr	r5, [pc, #424]	; (103c <cmu_update_clocks+0x2ac>)
     e92:	f3c1 2108 	ubfx	r1, r1, #8, #9
     e96:	3101      	adds	r1, #1
     e98:	fbb3 f1f1 	udiv	r1, r3, r1
     e9c:	6029      	str	r1, [r5, #0]
    HFPERC_CLOCK_FREQ = HF_CLOCK_FREQ / (((CMU->HFPERPRESCC & _CMU_HFPERPRESCC_PRESC_MASK) >> _CMU_HFPERPRESCC_PRESC_SHIFT) + 1);
     e9e:	f8d2 111c 	ldr.w	r1, [r2, #284]	; 0x11c
     ea2:	4d67      	ldr	r5, [pc, #412]	; (1040 <cmu_update_clocks+0x2b0>)
     ea4:	f3c1 2108 	ubfx	r1, r1, #8, #9
     ea8:	3101      	adds	r1, #1
     eaa:	fbb3 f1f1 	udiv	r1, r3, r1
     eae:	6029      	str	r1, [r5, #0]

    switch(CMU->SDIOCTRL & _CMU_SDIOCTRL_SDIOCLKSEL_MASK)
     eb0:	f8d2 1160 	ldr.w	r1, [r2, #352]	; 0x160
     eb4:	4d63      	ldr	r5, [pc, #396]	; (1044 <cmu_update_clocks+0x2b4>)
     eb6:	f001 0103 	and.w	r1, r1, #3
     eba:	2902      	cmp	r1, #2
     ebc:	d01a      	beq.n	ef4 <cmu_update_clocks+0x164>
     ebe:	2903      	cmp	r1, #3
     ec0:	d027      	beq.n	f12 <cmu_update_clocks+0x182>
     ec2:	2901      	cmp	r1, #1
     ec4:	d013      	beq.n	eee <cmu_update_clocks+0x15e>
    {
        case CMU_SDIOCTRL_SDIOCLKSEL_HFRCO:
            SDIO_CLOCK_FREQ = HFRCO_VALUE;
     ec6:	4954      	ldr	r1, [pc, #336]	; (1018 <cmu_update_clocks+0x288>)
        break;
        case CMU_SDIOCTRL_SDIOCLKSEL_AUXHFRCO:
            SDIO_CLOCK_FREQ = AUX_CLOCK_FREQ;
        break;
        case CMU_SDIOCTRL_SDIOCLKSEL_USHFRCO:
            SDIO_CLOCK_FREQ = USHFRCO_VALUE;
     ec8:	6809      	ldr	r1, [r1, #0]
     eca:	e011      	b.n	ef0 <cmu_update_clocks+0x160>
            HFSRC_CLOCK_FREQ = LFRCO_VALUE;
     ecc:	4a5e      	ldr	r2, [pc, #376]	; (1048 <cmu_update_clocks+0x2b8>)
     ece:	e79c      	b.n	e0a <cmu_update_clocks+0x7a>
            HFSRC_CLOCK_FREQ = LFXO_VALUE;
     ed0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
     ed4:	e79c      	b.n	e10 <cmu_update_clocks+0x80>
            HFSRC_CLOCK_FREQ = HFRCO_VALUE >> 1;
     ed6:	4a50      	ldr	r2, [pc, #320]	; (1018 <cmu_update_clocks+0x288>)
     ed8:	6812      	ldr	r2, [r2, #0]
     eda:	0852      	lsrs	r2, r2, #1
     edc:	e798      	b.n	e10 <cmu_update_clocks+0x80>
            HFSRC_CLOCK_FREQ = USHFRCO_VALUE;
     ede:	4a50      	ldr	r2, [pc, #320]	; (1020 <cmu_update_clocks+0x290>)
     ee0:	e793      	b.n	e0a <cmu_update_clocks+0x7a>
            HFSRC_CLOCK_FREQ = 0; // TODO: Support external clock
     ee2:	2200      	movs	r2, #0
     ee4:	e794      	b.n	e10 <cmu_update_clocks+0x80>
            HFLE_CLOCK_FREQ = HF_CLOCK_FREQ >> 2;
     ee6:	089a      	lsrs	r2, r3, #2
     ee8:	e7a9      	b.n	e3e <cmu_update_clocks+0xae>
            HFLE_CLOCK_FREQ = HF_CLOCK_FREQ >> 3;
     eea:	08da      	lsrs	r2, r3, #3
     eec:	e7a7      	b.n	e3e <cmu_update_clocks+0xae>
            SDIO_CLOCK_FREQ = HFXO_VALUE;
     eee:	494b      	ldr	r1, [pc, #300]	; (101c <cmu_update_clocks+0x28c>)
            SDIO_CLOCK_FREQ = USHFRCO_VALUE;
     ef0:	6029      	str	r1, [r5, #0]
        break;
     ef2:	e000      	b.n	ef6 <cmu_update_clocks+0x166>
            SDIO_CLOCK_FREQ = AUX_CLOCK_FREQ;
     ef4:	6028      	str	r0, [r5, #0]
    }

    switch(CMU->QSPICTRL & _CMU_QSPICTRL_QSPI0CLKSEL_MASK)
     ef6:	f8d2 2164 	ldr.w	r2, [r2, #356]	; 0x164
     efa:	4954      	ldr	r1, [pc, #336]	; (104c <cmu_update_clocks+0x2bc>)
     efc:	f002 0203 	and.w	r2, r2, #3
     f00:	2a02      	cmp	r2, #2
     f02:	d00b      	beq.n	f1c <cmu_update_clocks+0x18c>
     f04:	2a03      	cmp	r2, #3
     f06:	d016      	beq.n	f36 <cmu_update_clocks+0x1a6>
     f08:	2a01      	cmp	r2, #1
     f0a:	d004      	beq.n	f16 <cmu_update_clocks+0x186>
    {
        case CMU_QSPICTRL_QSPI0CLKSEL_HFRCO:
            QSPI_CLOCK_FREQ = HFRCO_VALUE;
     f0c:	4a42      	ldr	r2, [pc, #264]	; (1018 <cmu_update_clocks+0x288>)
        break;
        case CMU_QSPICTRL_QSPI0CLKSEL_AUXHFRCO:
            QSPI_CLOCK_FREQ = AUX_CLOCK_FREQ;
        break;
        case CMU_QSPICTRL_QSPI0CLKSEL_USHFRCO:
            QSPI_CLOCK_FREQ = USHFRCO_VALUE;
     f0e:	6812      	ldr	r2, [r2, #0]
     f10:	e002      	b.n	f18 <cmu_update_clocks+0x188>
            SDIO_CLOCK_FREQ = USHFRCO_VALUE;
     f12:	4943      	ldr	r1, [pc, #268]	; (1020 <cmu_update_clocks+0x290>)
     f14:	e7d8      	b.n	ec8 <cmu_update_clocks+0x138>
            QSPI_CLOCK_FREQ = HFXO_VALUE;
     f16:	4a41      	ldr	r2, [pc, #260]	; (101c <cmu_update_clocks+0x28c>)
            QSPI_CLOCK_FREQ = USHFRCO_VALUE;
     f18:	600a      	str	r2, [r1, #0]
        break;
     f1a:	e000      	b.n	f1e <cmu_update_clocks+0x18e>
            QSPI_CLOCK_FREQ = AUX_CLOCK_FREQ;
     f1c:	6008      	str	r0, [r1, #0]
    }

    switch(CMU->USBCTRL & _CMU_USBCTRL_USBCLKSEL_MASK)
     f1e:	4a3a      	ldr	r2, [pc, #232]	; (1008 <cmu_update_clocks+0x278>)
     f20:	f8d2 11f0 	ldr.w	r1, [r2, #496]	; 0x1f0
     f24:	f001 0107 	and.w	r1, r1, #7
     f28:	2905      	cmp	r1, #5
     f2a:	d814      	bhi.n	f56 <cmu_update_clocks+0x1c6>
     f2c:	e8df f001 	tbb	[pc, r1]
     f30:	520c0905 	.word	0x520c0905
     f34:	5854      	.short	0x5854
            QSPI_CLOCK_FREQ = USHFRCO_VALUE;
     f36:	4a3a      	ldr	r2, [pc, #232]	; (1020 <cmu_update_clocks+0x290>)
     f38:	e7e9      	b.n	f0e <cmu_update_clocks+0x17e>
    {
        case CMU_USBCTRL_USBCLKSEL_USHFRCO:
            USB_CLOCK_FREQ = USHFRCO_VALUE;
     f3a:	4a39      	ldr	r2, [pc, #228]	; (1020 <cmu_update_clocks+0x290>)
        break;
        case CMU_USBCTRL_USBCLKSEL_LFXO:
            USB_CLOCK_FREQ = LFXO_VALUE;
        break;
        case CMU_USBCTRL_USBCLKSEL_LFRCO:
            USB_CLOCK_FREQ = LFRCO_VALUE;
     f3c:	6811      	ldr	r1, [r2, #0]
     f3e:	4a44      	ldr	r2, [pc, #272]	; (1050 <cmu_update_clocks+0x2c0>)
     f40:	e008      	b.n	f54 <cmu_update_clocks+0x1c4>
            USB_CLOCK_FREQ = HFXO_VALUE;
     f42:	4a43      	ldr	r2, [pc, #268]	; (1050 <cmu_update_clocks+0x2c0>)
                USB_CLOCK_FREQ = HFXO_VALUE;
     f44:	4935      	ldr	r1, [pc, #212]	; (101c <cmu_update_clocks+0x28c>)
     f46:	e005      	b.n	f54 <cmu_update_clocks+0x1c4>
            if(CMU->HFXOCTRL & CMU_HFXOCTRL_HFXOX2EN)
     f48:	6a52      	ldr	r2, [r2, #36]	; 0x24
     f4a:	f012 0f08 	tst.w	r2, #8
     f4e:	4a40      	ldr	r2, [pc, #256]	; (1050 <cmu_update_clocks+0x2c0>)
     f50:	d0f8      	beq.n	f44 <cmu_update_clocks+0x1b4>
                USB_CLOCK_FREQ = HFXO_VALUE << 1;
     f52:	4940      	ldr	r1, [pc, #256]	; (1054 <cmu_update_clocks+0x2c4>)
            USB_CLOCK_FREQ = LFRCO_VALUE;
     f54:	6011      	str	r1, [r2, #0]
        break;
    }

    switch(CMU->DBGCLKSEL & _CMU_DBGCLKSEL_DBG_MASK)
     f56:	4a2c      	ldr	r2, [pc, #176]	; (1008 <cmu_update_clocks+0x278>)
     f58:	6f12      	ldr	r2, [r2, #112]	; 0x70
     f5a:	f002 0203 	and.w	r2, r2, #3
     f5e:	2a01      	cmp	r2, #1
     f60:	d046      	beq.n	ff0 <cmu_update_clocks+0x260>
     f62:	2a00      	cmp	r2, #0
     f64:	d03e      	beq.n	fe4 <cmu_update_clocks+0x254>
     f66:	2a02      	cmp	r2, #2
     f68:	d03f      	beq.n	fea <cmu_update_clocks+0x25a>
        case CMU_DBGCLKSEL_DBG_HFRCODIV2:
            DBG_CLOCK_FREQ = HFRCO_VALUE >> 1;
        break;
    }

    switch(CMU->ADCCTRL & _CMU_ADCCTRL_ADC0CLKSEL_MASK)
     f6a:	4927      	ldr	r1, [pc, #156]	; (1008 <cmu_update_clocks+0x278>)
     f6c:	4a3a      	ldr	r2, [pc, #232]	; (1058 <cmu_update_clocks+0x2c8>)
     f6e:	f8d1 315c 	ldr.w	r3, [r1, #348]	; 0x15c
     f72:	f003 0330 	and.w	r3, r3, #48	; 0x30
     f76:	2b10      	cmp	r3, #16
     f78:	d043      	beq.n	1002 <cmu_update_clocks+0x272>
     f7a:	d83c      	bhi.n	ff6 <cmu_update_clocks+0x266>
     f7c:	2b00      	cmp	r3, #0
     f7e:	d074      	beq.n	106a <cmu_update_clocks+0x2da>
        case CMU_ADCCTRL_ADC0CLKSEL_HFSRCCLK:
            ADC0_CLOCK_FREQ = HFSRC_CLOCK_FREQ;
        break;
    }

    ADC0_CLOCK_FREQ /= (((CMU->ADCCTRL & _CMU_ADCCTRL_ADC0CLKDIV_MASK) >> _CMU_ADCCTRL_ADC0CLKDIV_SHIFT) + 1);
     f80:	f8d1 315c 	ldr.w	r3, [r1, #348]	; 0x15c
     f84:	6815      	ldr	r5, [r2, #0]
     f86:	f003 0303 	and.w	r3, r3, #3
     f8a:	3301      	adds	r3, #1
     f8c:	fbb5 f3f3 	udiv	r3, r5, r3
     f90:	6013      	str	r3, [r2, #0]

    switch(CMU->ADCCTRL & _CMU_ADCCTRL_ADC1CLKSEL_MASK)
     f92:	f8d1 315c 	ldr.w	r3, [r1, #348]	; 0x15c
     f96:	4a31      	ldr	r2, [pc, #196]	; (105c <cmu_update_clocks+0x2cc>)
     f98:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
     f9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
     fa0:	d06d      	beq.n	107e <cmu_update_clocks+0x2ee>
     fa2:	d864      	bhi.n	106e <cmu_update_clocks+0x2de>
     fa4:	2b00      	cmp	r3, #0
     fa6:	d06d      	beq.n	1084 <cmu_update_clocks+0x2f4>
        case CMU_ADCCTRL_ADC1CLKSEL_HFSRCCLK:
            ADC1_CLOCK_FREQ = HFSRC_CLOCK_FREQ;
        break;
    }

    ADC1_CLOCK_FREQ /= (((CMU->ADCCTRL & _CMU_ADCCTRL_ADC1CLKDIV_MASK) >> _CMU_ADCCTRL_ADC1CLKDIV_SHIFT) + 1);
     fa8:	4b17      	ldr	r3, [pc, #92]	; (1008 <cmu_update_clocks+0x278>)
     faa:	6810      	ldr	r0, [r2, #0]
     fac:	f8d3 115c 	ldr.w	r1, [r3, #348]	; 0x15c
     fb0:	f3c1 4101 	ubfx	r1, r1, #16, #2
     fb4:	3101      	adds	r1, #1
     fb6:	fbb0 f1f1 	udiv	r1, r0, r1
     fba:	6011      	str	r1, [r2, #0]

    switch(CMU->LFACLKSEL & _CMU_LFACLKSEL_LFA_MASK)
     fbc:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
     fc0:	4a27      	ldr	r2, [pc, #156]	; (1060 <cmu_update_clocks+0x2d0>)
     fc2:	f001 0107 	and.w	r1, r1, #7
     fc6:	2904      	cmp	r1, #4
     fc8:	d860      	bhi.n	108c <cmu_update_clocks+0x2fc>
     fca:	e8df f001 	tbb	[pc, r1]
     fce:	935d      	.short	0x935d
     fd0:	5f96      	.short	0x5f96
     fd2:	99          	.byte	0x99
     fd3:	00          	.byte	0x00
            USB_CLOCK_FREQ = HFRCO_VALUE;
     fd4:	4a10      	ldr	r2, [pc, #64]	; (1018 <cmu_update_clocks+0x288>)
     fd6:	e7b1      	b.n	f3c <cmu_update_clocks+0x1ac>
            USB_CLOCK_FREQ = LFXO_VALUE;
     fd8:	4a1d      	ldr	r2, [pc, #116]	; (1050 <cmu_update_clocks+0x2c0>)
     fda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     fde:	e7b9      	b.n	f54 <cmu_update_clocks+0x1c4>
            USB_CLOCK_FREQ = LFRCO_VALUE;
     fe0:	4a19      	ldr	r2, [pc, #100]	; (1048 <cmu_update_clocks+0x2b8>)
     fe2:	e7ab      	b.n	f3c <cmu_update_clocks+0x1ac>
            DBG_CLOCK_FREQ = AUX_CLOCK_FREQ;
     fe4:	4b1f      	ldr	r3, [pc, #124]	; (1064 <cmu_update_clocks+0x2d4>)
     fe6:	6018      	str	r0, [r3, #0]
        break;
     fe8:	e7bf      	b.n	f6a <cmu_update_clocks+0x1da>
            DBG_CLOCK_FREQ = HFRCO_VALUE >> 1;
     fea:	4b0b      	ldr	r3, [pc, #44]	; (1018 <cmu_update_clocks+0x288>)
     fec:	681b      	ldr	r3, [r3, #0]
     fee:	085b      	lsrs	r3, r3, #1
     ff0:	4a1c      	ldr	r2, [pc, #112]	; (1064 <cmu_update_clocks+0x2d4>)
     ff2:	6013      	str	r3, [r2, #0]
        break;
     ff4:	e7b9      	b.n	f6a <cmu_update_clocks+0x1da>
    switch(CMU->ADCCTRL & _CMU_ADCCTRL_ADC0CLKSEL_MASK)
     ff6:	2b20      	cmp	r3, #32
     ff8:	d036      	beq.n	1068 <cmu_update_clocks+0x2d8>
     ffa:	2b30      	cmp	r3, #48	; 0x30
     ffc:	d1c0      	bne.n	f80 <cmu_update_clocks+0x1f0>
            ADC0_CLOCK_FREQ = HFSRC_CLOCK_FREQ;
     ffe:	6014      	str	r4, [r2, #0]
        break;
    1000:	e7be      	b.n	f80 <cmu_update_clocks+0x1f0>
            ADC0_CLOCK_FREQ = AUX_CLOCK_FREQ;
    1002:	6010      	str	r0, [r2, #0]
        break;
    1004:	e7bc      	b.n	f80 <cmu_update_clocks+0x1f0>
    1006:	bf00      	nop
    1008:	400e4000 	.word	0x400e4000
    100c:	20000000 	.word	0x20000000
    1010:	200000e8 	.word	0x200000e8
    1014:	200000cc 	.word	0x200000cc
    1018:	20000004 	.word	0x20000004
    101c:	007a1200 	.word	0x007a1200
    1020:	20000010 	.word	0x20000010
    1024:	200000f4 	.word	0x200000f4
    1028:	200000a4 	.word	0x200000a4
    102c:	200000d0 	.word	0x200000d0
    1030:	200000b8 	.word	0x200000b8
    1034:	200000dc 	.word	0x200000dc
    1038:	200000ec 	.word	0x200000ec
    103c:	200000e0 	.word	0x200000e0
    1040:	200000d8 	.word	0x200000d8
    1044:	200000f0 	.word	0x200000f0
    1048:	20000008 	.word	0x20000008
    104c:	200000d4 	.word	0x200000d4
    1050:	20000098 	.word	0x20000098
    1054:	00f42400 	.word	0x00f42400
    1058:	200000b0 	.word	0x200000b0
    105c:	200000bc 	.word	0x200000bc
    1060:	200000a0 	.word	0x200000a0
    1064:	20000108 	.word	0x20000108
            ADC0_CLOCK_FREQ = HFXO_VALUE;
    1068:	4b59      	ldr	r3, [pc, #356]	; (11d0 <cmu_update_clocks+0x440>)
    106a:	6013      	str	r3, [r2, #0]
        break;
    106c:	e788      	b.n	f80 <cmu_update_clocks+0x1f0>
    switch(CMU->ADCCTRL & _CMU_ADCCTRL_ADC1CLKSEL_MASK)
    106e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    1072:	d006      	beq.n	1082 <cmu_update_clocks+0x2f2>
    1074:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    1078:	d196      	bne.n	fa8 <cmu_update_clocks+0x218>
            ADC1_CLOCK_FREQ = HFSRC_CLOCK_FREQ;
    107a:	6014      	str	r4, [r2, #0]
        break;
    107c:	e794      	b.n	fa8 <cmu_update_clocks+0x218>
            ADC1_CLOCK_FREQ = AUX_CLOCK_FREQ;
    107e:	6010      	str	r0, [r2, #0]
        break;
    1080:	e792      	b.n	fa8 <cmu_update_clocks+0x218>
            ADC1_CLOCK_FREQ = HFXO_VALUE;
    1082:	4b53      	ldr	r3, [pc, #332]	; (11d0 <cmu_update_clocks+0x440>)
    1084:	6013      	str	r3, [r2, #0]
        break;
    1086:	e78f      	b.n	fa8 <cmu_update_clocks+0x218>
    {
        case CMU_LFACLKSEL_LFA_DISABLED:
            LFA_CLOCK_FREQ = 0;
    1088:	2100      	movs	r1, #0
        break;
        case CMU_LFACLKSEL_LFA_LFXO:
            LFA_CLOCK_FREQ = LFXO_VALUE;
        break;
        case CMU_LFACLKSEL_LFA_ULFRCO:
            LFA_CLOCK_FREQ = ULFRCO_VALUE;
    108a:	6011      	str	r1, [r2, #0]
        break;
    }

    LESENSE_CLOCK_FREQ = LFA_CLOCK_FREQ << ((CMU->LFAPRESC0 & _CMU_LFAPRESC0_LESENSE_MASK) >> _CMU_LFAPRESC0_LESENSE_SHIFT);
    108c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    1090:	6812      	ldr	r2, [r2, #0]
    1092:	4850      	ldr	r0, [pc, #320]	; (11d4 <cmu_update_clocks+0x444>)
    1094:	f3c1 2101 	ubfx	r1, r1, #8, #2
    1098:	fa02 f101 	lsl.w	r1, r2, r1
    109c:	6001      	str	r1, [r0, #0]
    RTC_CLOCK_FREQ = LFA_CLOCK_FREQ << ((CMU->LFAPRESC0 & _CMU_LFAPRESC0_RTC_MASK) >> _CMU_LFAPRESC0_RTC_SHIFT);
    109e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    10a2:	484d      	ldr	r0, [pc, #308]	; (11d8 <cmu_update_clocks+0x448>)
    10a4:	f3c1 4103 	ubfx	r1, r1, #16, #4
    10a8:	fa02 f101 	lsl.w	r1, r2, r1
    10ac:	6001      	str	r1, [r0, #0]
    LCD_CLOCK_FREQ = LFA_CLOCK_FREQ << ((CMU->LFAPRESC0 & _CMU_LFAPRESC0_LCD_MASK) >> _CMU_LFAPRESC0_LCD_SHIFT);
    10ae:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    10b2:	484a      	ldr	r0, [pc, #296]	; (11dc <cmu_update_clocks+0x44c>)
    10b4:	f3c1 3102 	ubfx	r1, r1, #12, #3
    10b8:	fa02 f101 	lsl.w	r1, r2, r1
    10bc:	6001      	str	r1, [r0, #0]
    LETIMER0_CLOCK_FREQ = LFA_CLOCK_FREQ << ((CMU->LFAPRESC0 & _CMU_LFAPRESC0_LETIMER0_MASK) >> _CMU_LFAPRESC0_LETIMER0_SHIFT);
    10be:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    10c2:	4847      	ldr	r0, [pc, #284]	; (11e0 <cmu_update_clocks+0x450>)
    10c4:	f001 010f 	and.w	r1, r1, #15
    10c8:	fa02 f101 	lsl.w	r1, r2, r1
    10cc:	6001      	str	r1, [r0, #0]
    LETIMER1_CLOCK_FREQ = LFA_CLOCK_FREQ << ((CMU->LFAPRESC0 & _CMU_LFAPRESC0_LETIMER1_MASK) >> _CMU_LFAPRESC0_LETIMER1_SHIFT);
    10ce:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    10d2:	f3c1 1103 	ubfx	r1, r1, #4, #4
    10d6:	408a      	lsls	r2, r1
    10d8:	4942      	ldr	r1, [pc, #264]	; (11e4 <cmu_update_clocks+0x454>)
    10da:	600a      	str	r2, [r1, #0]

    switch(CMU->LFBCLKSEL & _CMU_LFBCLKSEL_LFB_MASK)
    10dc:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
    10e0:	4b41      	ldr	r3, [pc, #260]	; (11e8 <cmu_update_clocks+0x458>)
    10e2:	f002 0207 	and.w	r2, r2, #7
    10e6:	2a04      	cmp	r2, #4
    10e8:	d80e      	bhi.n	1108 <cmu_update_clocks+0x378>
    10ea:	e8df f002 	tbb	[pc, r2]
    10ee:	3a0b      	.short	0x3a0b
    10f0:	403d      	.short	0x403d
    10f2:	42          	.byte	0x42
    10f3:	00          	.byte	0x00
            LFA_CLOCK_FREQ = LFRCO_VALUE;
    10f4:	493d      	ldr	r1, [pc, #244]	; (11ec <cmu_update_clocks+0x45c>)
            LFA_CLOCK_FREQ = ULFRCO_VALUE;
    10f6:	6809      	ldr	r1, [r1, #0]
    10f8:	e7c7      	b.n	108a <cmu_update_clocks+0x2fa>
            LFA_CLOCK_FREQ = LFXO_VALUE;
    10fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    10fe:	e7c4      	b.n	108a <cmu_update_clocks+0x2fa>
            LFA_CLOCK_FREQ = ULFRCO_VALUE;
    1100:	493b      	ldr	r1, [pc, #236]	; (11f0 <cmu_update_clocks+0x460>)
    1102:	e7f8      	b.n	10f6 <cmu_update_clocks+0x366>
    {
        case CMU_LFBCLKSEL_LFB_DISABLED:
            LFB_CLOCK_FREQ = 0;
    1104:	2200      	movs	r2, #0
        break;
        case CMU_LFBCLKSEL_LFB_HFCLKLE:
            LFB_CLOCK_FREQ = HFLE_CLOCK_FREQ;
        break;
        case CMU_LFBCLKSEL_LFB_ULFRCO:
            LFB_CLOCK_FREQ = ULFRCO_VALUE;
    1106:	601a      	str	r2, [r3, #0]
        break;
    }

    LEUART0_CLOCK_FREQ = LFB_CLOCK_FREQ << ((CMU->LFBPRESC0 & _CMU_LFBPRESC0_LEUART0_MASK) >> _CMU_LFBPRESC0_LEUART0_SHIFT);
    1108:	681a      	ldr	r2, [r3, #0]
    110a:	4b3a      	ldr	r3, [pc, #232]	; (11f4 <cmu_update_clocks+0x464>)
    110c:	483a      	ldr	r0, [pc, #232]	; (11f8 <cmu_update_clocks+0x468>)
    110e:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
    1112:	f001 0103 	and.w	r1, r1, #3
    1116:	fa02 f101 	lsl.w	r1, r2, r1
    111a:	6001      	str	r1, [r0, #0]
    LEUART1_CLOCK_FREQ = LFB_CLOCK_FREQ << ((CMU->LFBPRESC0 & _CMU_LFBPRESC0_LEUART1_MASK) >> _CMU_LFBPRESC0_LEUART1_SHIFT);
    111c:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
    1120:	4836      	ldr	r0, [pc, #216]	; (11fc <cmu_update_clocks+0x46c>)
    1122:	f3c1 1101 	ubfx	r1, r1, #4, #2
    1126:	fa02 f101 	lsl.w	r1, r2, r1
    112a:	6001      	str	r1, [r0, #0]
    SYSTICK_CLOCK_FREQ = LFB_CLOCK_FREQ << ((CMU->LFBPRESC0 & _CMU_LFBPRESC0_SYSTICK_MASK) >> _CMU_LFBPRESC0_SYSTICK_SHIFT);
    112c:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
    1130:	4833      	ldr	r0, [pc, #204]	; (1200 <cmu_update_clocks+0x470>)
    1132:	f3c1 2103 	ubfx	r1, r1, #8, #4
    1136:	fa02 f101 	lsl.w	r1, r2, r1
    113a:	6001      	str	r1, [r0, #0]
    CSEN_CLOCK_FREQ = LFB_CLOCK_FREQ << (((CMU->LFBPRESC0 & _CMU_LFBPRESC0_CSEN_MASK) >> _CMU_LFBPRESC0_CSEN_SHIFT) + 4);
    113c:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
    1140:	f3c1 3101 	ubfx	r1, r1, #12, #2
    1144:	3104      	adds	r1, #4
    1146:	408a      	lsls	r2, r1
    1148:	492e      	ldr	r1, [pc, #184]	; (1204 <cmu_update_clocks+0x474>)
    114a:	600a      	str	r2, [r1, #0]

    switch(CMU->LFCCLKSEL & _CMU_LFCCLKSEL_LFC_MASK)
    114c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    1150:	f002 0207 	and.w	r2, r2, #7
    1154:	2a04      	cmp	r2, #4
    1156:	d811      	bhi.n	117c <cmu_update_clocks+0x3ec>
    1158:	e8df f002 	tbb	[pc, r2]
    115c:	10201c0d 	.word	0x10201c0d
    1160:	24          	.byte	0x24
    1161:	00          	.byte	0x00
            LFB_CLOCK_FREQ = LFRCO_VALUE;
    1162:	4a22      	ldr	r2, [pc, #136]	; (11ec <cmu_update_clocks+0x45c>)
            LFB_CLOCK_FREQ = ULFRCO_VALUE;
    1164:	6812      	ldr	r2, [r2, #0]
    1166:	e7ce      	b.n	1106 <cmu_update_clocks+0x376>
            LFB_CLOCK_FREQ = LFXO_VALUE;
    1168:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    116c:	e7cb      	b.n	1106 <cmu_update_clocks+0x376>
            LFB_CLOCK_FREQ = HFLE_CLOCK_FREQ;
    116e:	4a26      	ldr	r2, [pc, #152]	; (1208 <cmu_update_clocks+0x478>)
    1170:	e7f8      	b.n	1164 <cmu_update_clocks+0x3d4>
            LFB_CLOCK_FREQ = ULFRCO_VALUE;
    1172:	4a1f      	ldr	r2, [pc, #124]	; (11f0 <cmu_update_clocks+0x460>)
    1174:	e7f6      	b.n	1164 <cmu_update_clocks+0x3d4>
    {
        case CMU_LFCCLKSEL_LFC_DISABLED:
            LFC_CLOCK_FREQ = 0;
    1176:	4a25      	ldr	r2, [pc, #148]	; (120c <cmu_update_clocks+0x47c>)
    1178:	2100      	movs	r1, #0
        break;
        case CMU_LFCCLKSEL_LFC_LFXO:
            LFC_CLOCK_FREQ = LFXO_VALUE;
        break;
        case CMU_LFCCLKSEL_LFC_ULFRCO:
            LFC_CLOCK_FREQ = ULFRCO_VALUE;
    117a:	6011      	str	r1, [r2, #0]
        break;
    }

    switch(CMU->LFECLKSEL & _CMU_LFECLKSEL_LFE_MASK)
    117c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1180:	4b23      	ldr	r3, [pc, #140]	; (1210 <cmu_update_clocks+0x480>)
    1182:	f002 0207 	and.w	r2, r2, #7
    1186:	2a04      	cmp	r2, #4
    1188:	d810      	bhi.n	11ac <cmu_update_clocks+0x41c>
    118a:	e8df f002 	tbb	[pc, r2]
    118e:	190d      	.short	0x190d
    1190:	0f1c      	.short	0x0f1c
    1192:	1f          	.byte	0x1f
    1193:	00          	.byte	0x00
            LFC_CLOCK_FREQ = LFRCO_VALUE;
    1194:	4a15      	ldr	r2, [pc, #84]	; (11ec <cmu_update_clocks+0x45c>)
            LFC_CLOCK_FREQ = ULFRCO_VALUE;
    1196:	6811      	ldr	r1, [r2, #0]
    1198:	4a1c      	ldr	r2, [pc, #112]	; (120c <cmu_update_clocks+0x47c>)
    119a:	e7ee      	b.n	117a <cmu_update_clocks+0x3ea>
            LFC_CLOCK_FREQ = LFXO_VALUE;
    119c:	4a1b      	ldr	r2, [pc, #108]	; (120c <cmu_update_clocks+0x47c>)
    119e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    11a2:	e7ea      	b.n	117a <cmu_update_clocks+0x3ea>
            LFC_CLOCK_FREQ = ULFRCO_VALUE;
    11a4:	4a12      	ldr	r2, [pc, #72]	; (11f0 <cmu_update_clocks+0x460>)
    11a6:	e7f6      	b.n	1196 <cmu_update_clocks+0x406>
    {
        case CMU_LFECLKSEL_LFE_DISABLED:
            LFE_CLOCK_FREQ = 0;
    11a8:	2200      	movs	r2, #0
        break;
        case CMU_LFECLKSEL_LFE_LFXO:
            LFE_CLOCK_FREQ = LFXO_VALUE;
        break;
        case CMU_LFECLKSEL_LFE_ULFRCO:
            LFE_CLOCK_FREQ = ULFRCO_VALUE;
    11aa:	601a      	str	r2, [r3, #0]
        break;
    }

    RTCC_CLOCK_FREQ = LFE_CLOCK_FREQ << ((CMU->LFEPRESC0 & _CMU_LFEPRESC0_RTCC_MASK) >> _CMU_LFEPRESC0_RTCC_SHIFT);
    11ac:	4a11      	ldr	r2, [pc, #68]	; (11f4 <cmu_update_clocks+0x464>)
    11ae:	681b      	ldr	r3, [r3, #0]
    11b0:	f8d2 2130 	ldr.w	r2, [r2, #304]	; 0x130
    11b4:	f002 0203 	and.w	r2, r2, #3
    11b8:	4093      	lsls	r3, r2
    11ba:	4a16      	ldr	r2, [pc, #88]	; (1214 <cmu_update_clocks+0x484>)
    11bc:	6013      	str	r3, [r2, #0]
}
    11be:	bd30      	pop	{r4, r5, pc}
            LFE_CLOCK_FREQ = LFRCO_VALUE;
    11c0:	4a0a      	ldr	r2, [pc, #40]	; (11ec <cmu_update_clocks+0x45c>)
            LFE_CLOCK_FREQ = ULFRCO_VALUE;
    11c2:	6812      	ldr	r2, [r2, #0]
    11c4:	e7f1      	b.n	11aa <cmu_update_clocks+0x41a>
            LFE_CLOCK_FREQ = LFXO_VALUE;
    11c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    11ca:	e7ee      	b.n	11aa <cmu_update_clocks+0x41a>
            LFE_CLOCK_FREQ = ULFRCO_VALUE;
    11cc:	4a08      	ldr	r2, [pc, #32]	; (11f0 <cmu_update_clocks+0x460>)
    11ce:	e7f8      	b.n	11c2 <cmu_update_clocks+0x432>
    11d0:	007a1200 	.word	0x007a1200
    11d4:	200000f8 	.word	0x200000f8
    11d8:	200000fc 	.word	0x200000fc
    11dc:	20000100 	.word	0x20000100
    11e0:	20000094 	.word	0x20000094
    11e4:	200000ac 	.word	0x200000ac
    11e8:	200000b4 	.word	0x200000b4
    11ec:	20000008 	.word	0x20000008
    11f0:	2000000c 	.word	0x2000000c
    11f4:	400e4000 	.word	0x400e4000
    11f8:	20000104 	.word	0x20000104
    11fc:	200000c4 	.word	0x200000c4
    1200:	200000a8 	.word	0x200000a8
    1204:	2000009c 	.word	0x2000009c
    1208:	200000a4 	.word	0x200000a4
    120c:	200000e4 	.word	0x200000e4
    1210:	200000c8 	.word	0x200000c8
    1214:	200000c0 	.word	0x200000c0

00001218 <cmu_config_waitstates>:
void cmu_config_waitstates(uint32_t ulFrequency)
{
    if(ulFrequency <= 32000000)
    1218:	4b05      	ldr	r3, [pc, #20]	; (1230 <cmu_config_waitstates+0x18>)
    121a:	4298      	cmp	r0, r3
    121c:	4b05      	ldr	r3, [pc, #20]	; (1234 <cmu_config_waitstates+0x1c>)
        CMU->CTRL &= ~CMU_CTRL_WSHFLE;
    121e:	681a      	ldr	r2, [r3, #0]
    1220:	bf94      	ite	ls
    1222:	f422 3280 	bicls.w	r2, r2, #65536	; 0x10000
    else
        CMU->CTRL |= CMU_CTRL_WSHFLE;
    1226:	f442 3280 	orrhi.w	r2, r2, #65536	; 0x10000
    122a:	601a      	str	r2, [r3, #0]
}
    122c:	4770      	bx	lr
    122e:	bf00      	nop
    1230:	01e84800 	.word	0x01e84800
    1234:	400e4000 	.word	0x400e4000

00001238 <cmu_hfrco_calib>:

void cmu_hfrco_calib(uint32_t ulCalibration, uint32_t ulTargetFrequency)
{
    if(CMU->STATUS & CMU_STATUS_DPLLENS)
    1238:	4b08      	ldr	r3, [pc, #32]	; (125c <cmu_hfrco_calib+0x24>)
    123a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    123e:	04d2      	lsls	r2, r2, #19
    1240:	d40a      	bmi.n	1258 <cmu_hfrco_calib+0x20>
        return;

    while(CMU->SYNCBUSY & CMU_SYNCBUSY_HFRCOBSY);
    1242:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    1246:	01d2      	lsls	r2, r2, #7
    1248:	d4fb      	bmi.n	1242 <cmu_hfrco_calib+0xa>

    CMU->HFRCOCTRL = ulCalibration;
    124a:	6118      	str	r0, [r3, #16]

    while(CMU->SYNCBUSY & CMU_SYNCBUSY_HFRCOBSY);
    124c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    1250:	01d2      	lsls	r2, r2, #7
    1252:	d4fb      	bmi.n	124c <cmu_hfrco_calib+0x14>

    HFRCO_VALUE = ulTargetFrequency;
    1254:	4b02      	ldr	r3, [pc, #8]	; (1260 <cmu_hfrco_calib+0x28>)
    1256:	6019      	str	r1, [r3, #0]
}
    1258:	4770      	bx	lr
    125a:	bf00      	nop
    125c:	400e4000 	.word	0x400e4000
    1260:	20000004 	.word	0x20000004

00001264 <cmu_init>:
    uint8_t ubSDIOClockEnabled = !!(CMU->STATUS & CMU_STATUS_SDIOCLKENS);
    1264:	4b5f      	ldr	r3, [pc, #380]	; (13e4 <cmu_init+0x180>)
{
    1266:	b570      	push	{r4, r5, r6, lr}
    uint8_t ubSDIOClockEnabled = !!(CMU->STATUS & CMU_STATUS_SDIOCLKENS);
    1268:	f8d3 5090 	ldr.w	r5, [r3, #144]	; 0x90
    if((CMU->SDIOCTRL & _CMU_SDIOCTRL_SDIOCLKSEL_MASK) == CMU_SDIOCTRL_SDIOCLKSEL_HFXO || (CMU->SDIOCTRL & _CMU_SDIOCTRL_SDIOCLKSEL_MASK) == CMU_SDIOCTRL_SDIOCLKSEL_HFRCO)
    126c:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
    1270:	f002 0203 	and.w	r2, r2, #3
    1274:	2a01      	cmp	r2, #1
    1276:	d003      	beq.n	1280 <cmu_init+0x1c>
    1278:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
    127c:	0794      	lsls	r4, r2, #30
    127e:	d106      	bne.n	128e <cmu_init+0x2a>
        CMU->SDIOCTRL = CMU_SDIOCTRL_SDIOCLKDIS | CMU_SDIOCTRL_SDIOCLKSEL_HFXO;
    1280:	2281      	movs	r2, #129	; 0x81
    1282:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
        while(CMU->STATUS & CMU_STATUS_SDIOCLKENS);
    1286:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    128a:	0390      	lsls	r0, r2, #14
    128c:	d4fb      	bmi.n	1286 <cmu_init+0x22>
    uint8_t ubQSPIClockEnabled = !!(CMU->STATUS & CMU_STATUS_QSPI0CLKENS);
    128e:	4b55      	ldr	r3, [pc, #340]	; (13e4 <cmu_init+0x180>)
    1290:	f8d3 6090 	ldr.w	r6, [r3, #144]	; 0x90
    if((CMU->QSPICTRL & _CMU_QSPICTRL_QSPI0CLKSEL_MASK) == CMU_QSPICTRL_QSPI0CLKSEL_HFXO || (CMU->QSPICTRL & _CMU_QSPICTRL_QSPI0CLKSEL_MASK) == CMU_QSPICTRL_QSPI0CLKSEL_HFRCO)
    1294:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
    1298:	f002 0203 	and.w	r2, r2, #3
    129c:	2a01      	cmp	r2, #1
    129e:	d003      	beq.n	12a8 <cmu_init+0x44>
    12a0:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
    12a4:	0791      	lsls	r1, r2, #30
    12a6:	d106      	bne.n	12b6 <cmu_init+0x52>
        CMU->QSPICTRL = CMU_QSPICTRL_QSPI0CLKDIS | CMU_QSPICTRL_QSPI0CLKSEL_HFXO;
    12a8:	2281      	movs	r2, #129	; 0x81
    12aa:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
        while(CMU->STATUS & CMU_STATUS_QSPI0CLKENS);
    12ae:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    12b2:	0352      	lsls	r2, r2, #13
    12b4:	d4fb      	bmi.n	12ae <cmu_init+0x4a>
    if(CMU->STATUS & CMU_STATUS_DPLLENS)
    12b6:	4a4b      	ldr	r2, [pc, #300]	; (13e4 <cmu_init+0x180>)
    12b8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    12bc:	04dc      	lsls	r4, r3, #19
    12be:	d506      	bpl.n	12ce <cmu_init+0x6a>
        CMU->OSCENCMD = CMU_OSCENCMD_DPLLDIS;
    12c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    12c4:	6613      	str	r3, [r2, #96]	; 0x60
        while(CMU->STATUS & CMU_STATUS_DPLLENS);
    12c6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    12ca:	04d8      	lsls	r0, r3, #19
    12cc:	d4fb      	bmi.n	12c6 <cmu_init+0x62>
    if(CMU->STATUS & CMU_STATUS_HFXOENS)
    12ce:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    12d2:	f013 0f04 	tst.w	r3, #4
    12d6:	4b43      	ldr	r3, [pc, #268]	; (13e4 <cmu_init+0x180>)
    12d8:	d005      	beq.n	12e6 <cmu_init+0x82>
        CMU->OSCENCMD = CMU_OSCENCMD_HFXODIS;
    12da:	2108      	movs	r1, #8
    12dc:	6611      	str	r1, [r2, #96]	; 0x60
        while(CMU->STATUS & CMU_STATUS_HFXOENS);
    12de:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    12e2:	0751      	lsls	r1, r2, #29
    12e4:	d4fb      	bmi.n	12de <cmu_init+0x7a>
    CMU->HFXOCTRL = CMU_HFXOCTRL_PEAKDETMODE_AUTOCMD | CMU_HFXOCTRL_MODE_XTAL;
    12e6:	2210      	movs	r2, #16
    12e8:	625a      	str	r2, [r3, #36]	; 0x24
    CMU->HFXOCTRL1 = CMU_HFXOCTRL1_PEAKDETTHR_DEFAULT;
    12ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    12ee:	629a      	str	r2, [r3, #40]	; 0x28
    CMU->HFXOSTEADYSTATECTRL |= CMU_HFXOSTEADYSTATECTRL_PEAKMONEN;
    12f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    12f2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
    12f6:	631a      	str	r2, [r3, #48]	; 0x30
    CMU->HFXOTIMEOUTCTRL = (7 << _CMU_HFXOTIMEOUTCTRL_PEAKDETTIMEOUT_SHIFT) | (8 << _CMU_HFXOTIMEOUTCTRL_STEADYTIMEOUT_SHIFT) | (12 << _CMU_HFXOTIMEOUTCTRL_STARTUPTIMEOUT_SHIFT);
    12f8:	f247 028c 	movw	r2, #28812	; 0x708c
    12fc:	635a      	str	r2, [r3, #52]	; 0x34
    CMU->OSCENCMD = CMU_OSCENCMD_HFXOEN;
    12fe:	2204      	movs	r2, #4
    1300:	661a      	str	r2, [r3, #96]	; 0x60
    while(!(CMU->STATUS & CMU_STATUS_HFXORDY));
    1302:	4b38      	ldr	r3, [pc, #224]	; (13e4 <cmu_init+0x180>)
    1304:	461c      	mov	r4, r3
    1306:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    130a:	0712      	lsls	r2, r2, #28
    130c:	d5fb      	bpl.n	1306 <cmu_init+0xa2>
    CMU->HFCLKSEL = CMU_HFCLKSEL_HF_HFXO;
    130e:	2202      	movs	r2, #2
    1310:	675a      	str	r2, [r3, #116]	; 0x74
    while((CMU->HFCLKSTATUS & _CMU_HFCLKSTATUS_SELECTED_MASK) != CMU_HFCLKSTATUS_SELECTED_HFXO);
    1312:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    1316:	f003 0307 	and.w	r3, r3, #7
    131a:	2b02      	cmp	r3, #2
    131c:	d1f9      	bne.n	1312 <cmu_init+0xae>
    cmu_hfrco_calib(HFRCO_CALIB_72M | CMU_HFRCOCTRL_FINETUNINGEN, 72000000);
    131e:	4b32      	ldr	r3, [pc, #200]	; (13e8 <cmu_init+0x184>)
    1320:	4932      	ldr	r1, [pc, #200]	; (13ec <cmu_init+0x188>)
    1322:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
    1326:	f040 6000 	orr.w	r0, r0, #134217728	; 0x8000000
    132a:	f7ff ff85 	bl	1238 <cmu_hfrco_calib>
    CMU->DPLLCTRL = CMU_DPLLCTRL_REFSEL_HFXO | CMU_DPLLCTRL_AUTORECOVER | CMU_DPLLCTRL_EDGESEL_RISE | CMU_DPLLCTRL_MODE_FREQLL;
    132e:	2306      	movs	r3, #6
    1330:	6423      	str	r3, [r4, #64]	; 0x40
    CMU->DPLLCTRL1 = (899 << _CMU_DPLLCTRL1_N_SHIFT) | (99 << _CMU_DPLLCTRL1_M_SHIFT); // fHFRCO = fHFXO * (N + 1) / (M + 1)
    1332:	4b2f      	ldr	r3, [pc, #188]	; (13f0 <cmu_init+0x18c>)
    1334:	6463      	str	r3, [r4, #68]	; 0x44
    CMU->OSCENCMD = CMU_OSCENCMD_DPLLEN;
    1336:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    133a:	6623      	str	r3, [r4, #96]	; 0x60
    while(!(CMU->STATUS & CMU_STATUS_DPLLRDY));
    133c:	4c29      	ldr	r4, [pc, #164]	; (13e4 <cmu_init+0x180>)
    133e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    1342:	0498      	lsls	r0, r3, #18
    1344:	d5fb      	bpl.n	133e <cmu_init+0xda>
    cmu_config_waitstates(36000000);
    1346:	482b      	ldr	r0, [pc, #172]	; (13f4 <cmu_init+0x190>)
    1348:	f7ff ff66 	bl	1218 <cmu_config_waitstates>
    msc_config_waitstates(72000000);
    134c:	4827      	ldr	r0, [pc, #156]	; (13ec <cmu_init+0x188>)
    134e:	f000 fc13 	bl	1b78 <msc_config_waitstates>
    CMU->HFPRESC = CMU_HFPRESC_HFCLKLEPRESC_DIV2 | CMU_HFPRESC_PRESC_NODIVISION;
    1352:	2300      	movs	r3, #0
    CMU->HFBUSPRESC = 1 << _CMU_HFBUSPRESC_PRESC_SHIFT;
    1354:	f44f 7280 	mov.w	r2, #256	; 0x100
    CMU->HFPRESC = CMU_HFPRESC_HFCLKLEPRESC_DIV2 | CMU_HFPRESC_PRESC_NODIVISION;
    1358:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    CMU->HFBUSPRESC = 1 << _CMU_HFBUSPRESC_PRESC_SHIFT;
    135c:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
    CMU->HFCOREPRESC = 0 << _CMU_HFCOREPRESC_PRESC_SHIFT;
    1360:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    CMU->HFPERPRESC = 1 << _CMU_HFPERPRESC_PRESC_SHIFT;
    1364:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
    CMU->HFEXPPRESC = 0 << _CMU_HFEXPPRESC_PRESC_SHIFT;
    1368:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    CMU->HFPERPRESCB = 0 << _CMU_HFPERPRESCB_PRESC_SHIFT;
    136c:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    CMU->HFCLKSEL = CMU_HFCLKSEL_HF_HFRCO;
    1370:	2301      	movs	r3, #1
    CMU->HFPERPRESCC = 1 << _CMU_HFPERPRESCC_PRESC_SHIFT;
    1372:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
    CMU->HFCLKSEL = CMU_HFCLKSEL_HF_HFRCO;
    1376:	6763      	str	r3, [r4, #116]	; 0x74
    while((CMU->HFCLKSTATUS & _CMU_HFCLKSTATUS_SELECTED_MASK) != CMU_HFCLKSTATUS_SELECTED_HFRCO);
    1378:	4b1a      	ldr	r3, [pc, #104]	; (13e4 <cmu_init+0x180>)
    137a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    137e:	f002 0207 	and.w	r2, r2, #7
    1382:	2a01      	cmp	r2, #1
    1384:	d1f9      	bne.n	137a <cmu_init+0x116>
    if((CMU->SDIOCTRL & _CMU_SDIOCTRL_SDIOCLKSEL_MASK) == CMU_SDIOCTRL_SDIOCLKSEL_HFXO)
    1386:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
    138a:	f002 0203 	and.w	r2, r2, #3
    138e:	2a01      	cmp	r2, #1
    1390:	d10e      	bne.n	13b0 <cmu_init+0x14c>
        CMU->SDIOCTRL &= ~CMU_SDIOCTRL_SDIOCLKDIS;
    1392:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
    1396:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    139a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
        while(!(CMU->STATUS & CMU_STATUS_SDIOCLKENS) && ubSDIOClockEnabled);
    139e:	4b11      	ldr	r3, [pc, #68]	; (13e4 <cmu_init+0x180>)
    uint8_t ubSDIOClockEnabled = !!(CMU->STATUS & CMU_STATUS_SDIOCLKENS);
    13a0:	f405 3500 	and.w	r5, r5, #131072	; 0x20000
        while(!(CMU->STATUS & CMU_STATUS_SDIOCLKENS) && ubSDIOClockEnabled);
    13a4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    13a8:	0391      	lsls	r1, r2, #14
    13aa:	d401      	bmi.n	13b0 <cmu_init+0x14c>
    13ac:	2d00      	cmp	r5, #0
    13ae:	d1f9      	bne.n	13a4 <cmu_init+0x140>
    if((CMU->QSPICTRL & _CMU_QSPICTRL_QSPI0CLKSEL_MASK) == CMU_QSPICTRL_QSPI0CLKSEL_HFXO)
    13b0:	4b0c      	ldr	r3, [pc, #48]	; (13e4 <cmu_init+0x180>)
    13b2:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
    13b6:	f002 0203 	and.w	r2, r2, #3
    13ba:	2a01      	cmp	r2, #1
    13bc:	d10d      	bne.n	13da <cmu_init+0x176>
        CMU->QSPICTRL &= ~CMU_QSPICTRL_QSPI0CLKDIS;
    13be:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
    13c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    13c6:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
    uint8_t ubQSPIClockEnabled = !!(CMU->STATUS & CMU_STATUS_QSPI0CLKENS);
    13ca:	f406 2680 	and.w	r6, r6, #262144	; 0x40000
        while(!(CMU->STATUS & CMU_STATUS_QSPI0CLKENS) && ubQSPIClockEnabled);
    13ce:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    13d2:	0352      	lsls	r2, r2, #13
    13d4:	d401      	bmi.n	13da <cmu_init+0x176>
    13d6:	2e00      	cmp	r6, #0
    13d8:	d1f9      	bne.n	13ce <cmu_init+0x16a>
    CMU->LFECLKSEL = CMU_LFECLKSEL_LFE_ULFRCO;
    13da:	4b02      	ldr	r3, [pc, #8]	; (13e4 <cmu_init+0x180>)
    13dc:	2204      	movs	r2, #4
    13de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    13e2:	bd70      	pop	{r4, r5, r6, pc}
    13e4:	400e4000 	.word	0x400e4000
    13e8:	0fe081b0 	.word	0x0fe081b0
    13ec:	044aa200 	.word	0x044aa200
    13f0:	03830063 	.word	0x03830063
    13f4:	02255100 	.word	0x02255100

000013f8 <cmu_ushfrco_calib>:

void cmu_ushfrco_calib(uint8_t ubEnable, uint32_t ulCalibration, uint32_t ulTargetFrequency)
{
    if(CMU->USBCRCTRL & CMU_USBCRCTRL_USBCREN)
    13f8:	4b13      	ldr	r3, [pc, #76]	; (1448 <cmu_ushfrco_calib+0x50>)
{
    13fa:	b510      	push	{r4, lr}
    if(CMU->USBCRCTRL & CMU_USBCRCTRL_USBCREN)
    13fc:	f8d3 41f4 	ldr.w	r4, [r3, #500]	; 0x1f4
    1400:	07e4      	lsls	r4, r4, #31
    1402:	d407      	bmi.n	1414 <cmu_ushfrco_calib+0x1c>
        return;

    if(!ubEnable)
    1404:	b938      	cbnz	r0, 1416 <cmu_ushfrco_calib+0x1e>
    {
        CMU->OSCENCMD = CMU_OSCENCMD_USHFRCODIS;
    1406:	f44f 6200 	mov.w	r2, #2048	; 0x800
    140a:	661a      	str	r2, [r3, #96]	; 0x60
        while(CMU->STATUS & CMU_STATUS_USHFRCOENS);
    140c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    1410:	0554      	lsls	r4, r2, #21
    1412:	d4fb      	bmi.n	140c <cmu_ushfrco_calib+0x14>

        while(!(CMU->STATUS & CMU_STATUS_USHFRCORDY));
    }

    USHFRCO_VALUE = ulTargetFrequency;
}
    1414:	bd10      	pop	{r4, pc}
    while(CMU->SYNCBUSY & CMU_SYNCBUSY_USHFRCOBSY);
    1416:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
    141a:	0040      	lsls	r0, r0, #1
    141c:	d4fb      	bmi.n	1416 <cmu_ushfrco_calib+0x1e>
    CMU->USHFRCOCTRL = ulCalibration;
    141e:	6099      	str	r1, [r3, #8]
    while(CMU->SYNCBUSY & CMU_SYNCBUSY_USHFRCOBSY);
    1420:	4b09      	ldr	r3, [pc, #36]	; (1448 <cmu_ushfrco_calib+0x50>)
    1422:	4619      	mov	r1, r3
    1424:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
    1428:	0044      	lsls	r4, r0, #1
    142a:	d4fb      	bmi.n	1424 <cmu_ushfrco_calib+0x2c>
    if(ubEnable && !(CMU->STATUS & CMU_STATUS_USHFRCOENS))
    142c:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
    1430:	0540      	lsls	r0, r0, #21
    1432:	d406      	bmi.n	1442 <cmu_ushfrco_calib+0x4a>
        CMU->OSCENCMD = CMU_OSCENCMD_USHFRCOEN;
    1434:	f44f 6080 	mov.w	r0, #1024	; 0x400
    1438:	6618      	str	r0, [r3, #96]	; 0x60
        while(!(CMU->STATUS & CMU_STATUS_USHFRCORDY));
    143a:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
    143e:	051b      	lsls	r3, r3, #20
    1440:	d5fb      	bpl.n	143a <cmu_ushfrco_calib+0x42>
    USHFRCO_VALUE = ulTargetFrequency;
    1442:	4b02      	ldr	r3, [pc, #8]	; (144c <cmu_ushfrco_calib+0x54>)
    1444:	601a      	str	r2, [r3, #0]
    1446:	e7e5      	b.n	1414 <cmu_ushfrco_calib+0x1c>
    1448:	400e4000 	.word	0x400e4000
    144c:	20000010 	.word	0x20000010

00001450 <cmu_auxhfrco_calib>:

void cmu_auxhfrco_calib(uint8_t ubEnable, uint32_t ulCalibration, uint32_t ulTargetFrequency)
{
    if(!ubEnable)
    1450:	4b0f      	ldr	r3, [pc, #60]	; (1490 <cmu_auxhfrco_calib+0x40>)
    1452:	b930      	cbnz	r0, 1462 <cmu_auxhfrco_calib+0x12>
    {
        CMU->OSCENCMD = CMU_OSCENCMD_AUXHFRCODIS;
    1454:	2220      	movs	r2, #32
    1456:	661a      	str	r2, [r3, #96]	; 0x60
        while(CMU->STATUS & CMU_STATUS_AUXHFRCOENS);
    1458:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    145c:	06d2      	lsls	r2, r2, #27
    145e:	d4fb      	bmi.n	1458 <cmu_auxhfrco_calib+0x8>
    1460:	4770      	bx	lr

        return;
    }

    while(CMU->SYNCBUSY & CMU_SYNCBUSY_AUXHFRCOBSY);
    1462:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
    1466:	0180      	lsls	r0, r0, #6
    1468:	d4fb      	bmi.n	1462 <cmu_auxhfrco_calib+0x12>

    CMU->AUXHFRCOCTRL = ulCalibration;
    146a:	6199      	str	r1, [r3, #24]

    while(CMU->SYNCBUSY & CMU_SYNCBUSY_AUXHFRCOBSY);
    146c:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
    1470:	0188      	lsls	r0, r1, #6
    1472:	d4fb      	bmi.n	146c <cmu_auxhfrco_calib+0x1c>

    if(ubEnable && !(CMU->STATUS & CMU_STATUS_AUXHFRCOENS))
    1474:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
    1478:	06c9      	lsls	r1, r1, #27
    147a:	d406      	bmi.n	148a <cmu_auxhfrco_calib+0x3a>
    {
        CMU->OSCENCMD = CMU_OSCENCMD_AUXHFRCOEN;
    147c:	2110      	movs	r1, #16
    147e:	6619      	str	r1, [r3, #96]	; 0x60

        while(!(CMU->STATUS & CMU_STATUS_AUXHFRCORDY));
    1480:	4903      	ldr	r1, [pc, #12]	; (1490 <cmu_auxhfrco_calib+0x40>)
    1482:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
    1486:	069b      	lsls	r3, r3, #26
    1488:	d5fb      	bpl.n	1482 <cmu_auxhfrco_calib+0x32>
    }

    AUXHFRCO_VALUE = ulTargetFrequency;
    148a:	4b02      	ldr	r3, [pc, #8]	; (1494 <cmu_auxhfrco_calib+0x44>)
    148c:	601a      	str	r2, [r3, #0]
}
    148e:	4770      	bx	lr
    1490:	400e4000 	.word	0x400e4000
    1494:	20000000 	.word	0x20000000

00001498 <cmu_hfxo_startup_calib>:

void cmu_hfxo_startup_calib(uint16_t usIBTrim, uint16_t usCTune)
{
    if(CMU->STATUS & CMU_STATUS_HFXOENS)
    1498:	4a08      	ldr	r2, [pc, #32]	; (14bc <cmu_hfxo_startup_calib+0x24>)
    149a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    149e:	075b      	lsls	r3, r3, #29
    14a0:	d40a      	bmi.n	14b8 <cmu_hfxo_startup_calib+0x20>
        return;

    CMU->HFXOSTARTUPCTRL = (CMU->HFXOSTARTUPCTRL & ~(_CMU_HFXOSTARTUPCTRL_CTUNE_MASK | _CMU_HFXOSTARTUPCTRL_IBTRIMXOCORE_MASK)) | (((uint32_t)usCTune << _CMU_HFXOSTARTUPCTRL_CTUNE_SHIFT) & _CMU_HFXOSTARTUPCTRL_CTUNE_MASK) | (((uint32_t)usIBTrim << _CMU_HFXOSTARTUPCTRL_IBTRIMXOCORE_SHIFT) & _CMU_HFXOSTARTUPCTRL_IBTRIMXOCORE_MASK);
    14a2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    14a4:	0d1b      	lsrs	r3, r3, #20
    14a6:	f3c0 000a 	ubfx	r0, r0, #0, #11
    14aa:	051b      	lsls	r3, r3, #20
    14ac:	4303      	orrs	r3, r0
    14ae:	4804      	ldr	r0, [pc, #16]	; (14c0 <cmu_hfxo_startup_calib+0x28>)
    14b0:	ea00 20c1 	and.w	r0, r0, r1, lsl #11
    14b4:	4303      	orrs	r3, r0
    14b6:	62d3      	str	r3, [r2, #44]	; 0x2c
}
    14b8:	4770      	bx	lr
    14ba:	bf00      	nop
    14bc:	400e4000 	.word	0x400e4000
    14c0:	000ff800 	.word	0x000ff800

000014c4 <cmu_hfxo_get_startup_current>:
float cmu_hfxo_get_startup_current()
{
    return HFXO_IBTRIM_TO_UA((CMU->HFXOSTARTUPCTRL & _CMU_HFXOSTARTUPCTRL_IBTRIMXOCORE_MASK) >> _CMU_HFXOSTARTUPCTRL_IBTRIMXOCORE_SHIFT);
    14c4:	4a07      	ldr	r2, [pc, #28]	; (14e4 <cmu_hfxo_get_startup_current+0x20>)
    14c6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    14c8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    14ca:	f44f 7120 	mov.w	r1, #640	; 0x280
    14ce:	b2d2      	uxtb	r2, r2
    14d0:	f3c3 2341 	ubfx	r3, r3, #9, #2
    14d4:	fb01 2303 	mla	r3, r1, r3, r2
    14d8:	005b      	lsls	r3, r3, #1
    14da:	ee00 3a10 	vmov	s0, r3
}
    14de:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    14e2:	4770      	bx	lr
    14e4:	400e4000 	.word	0x400e4000

000014e8 <cmu_hfxo_get_startup_cap>:
float cmu_hfxo_get_startup_cap()
{
    return HFXO_CTUNE_TO_PF((CMU->HFXOSTARTUPCTRL & _CMU_HFXOSTARTUPCTRL_CTUNE_MASK) >> _CMU_HFXOSTARTUPCTRL_CTUNE_SHIFT);
    14e8:	4b07      	ldr	r3, [pc, #28]	; (1508 <cmu_hfxo_get_startup_cap+0x20>)
}
    14ea:	ed9f 7a08 	vldr	s14, [pc, #32]	; 150c <cmu_hfxo_get_startup_cap+0x24>
    return HFXO_CTUNE_TO_PF((CMU->HFXOSTARTUPCTRL & _CMU_HFXOSTARTUPCTRL_CTUNE_MASK) >> _CMU_HFXOSTARTUPCTRL_CTUNE_SHIFT);
    14ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
    14f0:	ed9f 0a07 	vldr	s0, [pc, #28]	; 1510 <cmu_hfxo_get_startup_cap+0x28>
    return HFXO_CTUNE_TO_PF((CMU->HFXOSTARTUPCTRL & _CMU_HFXOSTARTUPCTRL_CTUNE_MASK) >> _CMU_HFXOSTARTUPCTRL_CTUNE_SHIFT);
    14f4:	f3c3 23c8 	ubfx	r3, r3, #11, #9
    14f8:	ee07 3a90 	vmov	s15, r3
    14fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
    1500:	eea7 0a87 	vfma.f32	s0, s15, s14
    1504:	4770      	bx	lr
    1506:	bf00      	nop
    1508:	400e4000 	.word	0x400e4000
    150c:	3dac0831 	.word	0x3dac0831
    1510:	410b3333 	.word	0x410b3333

00001514 <cmu_hfxo_steady_calib>:
void cmu_hfxo_steady_calib(uint16_t usIBTrim, uint16_t usCTune)
{
    if(CMU->STATUS & CMU_STATUS_HFXOENS)
    1514:	4a08      	ldr	r2, [pc, #32]	; (1538 <cmu_hfxo_steady_calib+0x24>)
    1516:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    151a:	075b      	lsls	r3, r3, #29
    151c:	d40a      	bmi.n	1534 <cmu_hfxo_steady_calib+0x20>
        return;

    CMU->HFXOSTEADYSTATECTRL = (CMU->HFXOSTEADYSTATECTRL & ~(_CMU_HFXOSTEADYSTATECTRL_CTUNE_MASK | _CMU_HFXOSTEADYSTATECTRL_IBTRIMXOCORE_MASK)) | (((uint32_t)usCTune << _CMU_HFXOSTEADYSTATECTRL_CTUNE_SHIFT) & _CMU_HFXOSTEADYSTATECTRL_CTUNE_MASK) | (((uint32_t)usIBTrim << _CMU_HFXOSTEADYSTATECTRL_IBTRIMXOCORE_SHIFT) & _CMU_HFXOSTEADYSTATECTRL_IBTRIMXOCORE_MASK);
    151e:	6b13      	ldr	r3, [r2, #48]	; 0x30
    1520:	0d1b      	lsrs	r3, r3, #20
    1522:	f3c0 000a 	ubfx	r0, r0, #0, #11
    1526:	051b      	lsls	r3, r3, #20
    1528:	4303      	orrs	r3, r0
    152a:	4804      	ldr	r0, [pc, #16]	; (153c <cmu_hfxo_steady_calib+0x28>)
    152c:	ea00 20c1 	and.w	r0, r0, r1, lsl #11
    1530:	4303      	orrs	r3, r0
    1532:	6313      	str	r3, [r2, #48]	; 0x30
}
    1534:	4770      	bx	lr
    1536:	bf00      	nop
    1538:	400e4000 	.word	0x400e4000
    153c:	000ff800 	.word	0x000ff800

00001540 <cmu_hfxo_get_steady_current>:
float cmu_hfxo_get_steady_current()
{
    return HFXO_IBTRIM_TO_UA((CMU->HFXOSTEADYSTATECTRL & _CMU_HFXOSTEADYSTATECTRL_IBTRIMXOCORE_MASK) >> _CMU_HFXOSTEADYSTATECTRL_IBTRIMXOCORE_SHIFT);
    1540:	4a07      	ldr	r2, [pc, #28]	; (1560 <cmu_hfxo_get_steady_current+0x20>)
    1542:	6b13      	ldr	r3, [r2, #48]	; 0x30
    1544:	6b12      	ldr	r2, [r2, #48]	; 0x30
    1546:	f44f 7120 	mov.w	r1, #640	; 0x280
    154a:	b2d2      	uxtb	r2, r2
    154c:	f3c3 2341 	ubfx	r3, r3, #9, #2
    1550:	fb01 2303 	mla	r3, r1, r3, r2
    1554:	005b      	lsls	r3, r3, #1
    1556:	ee00 3a10 	vmov	s0, r3
}
    155a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    155e:	4770      	bx	lr
    1560:	400e4000 	.word	0x400e4000

00001564 <cmu_hfxo_get_steady_cap>:
float cmu_hfxo_get_steady_cap()
{
    return HFXO_CTUNE_TO_PF((CMU->HFXOSTEADYSTATECTRL & _CMU_HFXOSTEADYSTATECTRL_CTUNE_MASK) >> _CMU_HFXOSTEADYSTATECTRL_CTUNE_SHIFT);
    1564:	4b07      	ldr	r3, [pc, #28]	; (1584 <cmu_hfxo_get_steady_cap+0x20>)
}
    1566:	ed9f 7a08 	vldr	s14, [pc, #32]	; 1588 <cmu_hfxo_get_steady_cap+0x24>
    return HFXO_CTUNE_TO_PF((CMU->HFXOSTEADYSTATECTRL & _CMU_HFXOSTEADYSTATECTRL_CTUNE_MASK) >> _CMU_HFXOSTEADYSTATECTRL_CTUNE_SHIFT);
    156a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
    156c:	ed9f 0a07 	vldr	s0, [pc, #28]	; 158c <cmu_hfxo_get_steady_cap+0x28>
    return HFXO_CTUNE_TO_PF((CMU->HFXOSTEADYSTATECTRL & _CMU_HFXOSTEADYSTATECTRL_CTUNE_MASK) >> _CMU_HFXOSTEADYSTATECTRL_CTUNE_SHIFT);
    1570:	f3c3 23c8 	ubfx	r3, r3, #11, #9
    1574:	ee07 3a90 	vmov	s15, r3
    1578:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
    157c:	eea7 0a87 	vfma.f32	s0, s15, s14
    1580:	4770      	bx	lr
    1582:	bf00      	nop
    1584:	400e4000 	.word	0x400e4000
    1588:	3dac0831 	.word	0x3dac0831
    158c:	410b3333 	.word	0x410b3333

00001590 <cmu_hfxo_get_pda_ibtrim>:
uint16_t cmu_hfxo_get_pda_ibtrim(uint8_t ubTrigger)
{
    if(!(CMU->STATUS & CMU_STATUS_HFXOENS))
    1590:	4a09      	ldr	r2, [pc, #36]	; (15b8 <cmu_hfxo_get_pda_ibtrim+0x28>)
    1592:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    1596:	f013 0304 	ands.w	r3, r3, #4
    159a:	d00b      	beq.n	15b4 <cmu_hfxo_get_pda_ibtrim+0x24>
        return 0;

    if(ubTrigger)
    159c:	b128      	cbz	r0, 15aa <cmu_hfxo_get_pda_ibtrim+0x1a>
    {
        CMU->CMD = CMU_CMD_HFXOPEAKDETSTART;
    159e:	2310      	movs	r3, #16
    15a0:	6653      	str	r3, [r2, #100]	; 0x64
        while(!(CMU->STATUS & CMU_STATUS_HFXOPEAKDETRDY));
    15a2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    15a6:	025b      	lsls	r3, r3, #9
    15a8:	d5fb      	bpl.n	15a2 <cmu_hfxo_get_pda_ibtrim+0x12>
    }

    return (CMU->HFXOTRIMSTATUS & _CMU_HFXOTRIMSTATUS_IBTRIMXOCORE_MASK) >> _CMU_HFXOTRIMSTATUS_IBTRIMXOCORE_SHIFT;
    15aa:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    15ae:	f3c0 000a 	ubfx	r0, r0, #0, #11
    15b2:	4770      	bx	lr
        return 0;
    15b4:	4618      	mov	r0, r3
}
    15b6:	4770      	bx	lr
    15b8:	400e4000 	.word	0x400e4000

000015bc <cmu_hfxo_get_pda_current>:
float cmu_hfxo_get_pda_current(uint8_t ubTrigger)
{
    if(!(CMU->STATUS & CMU_STATUS_HFXOENS))
    15bc:	4b0e      	ldr	r3, [pc, #56]	; (15f8 <cmu_hfxo_get_pda_current+0x3c>)
    15be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    15c2:	075b      	lsls	r3, r3, #29
{
    15c4:	b510      	push	{r4, lr}
    15c6:	4604      	mov	r4, r0
    if(!(CMU->STATUS & CMU_STATUS_HFXOENS))
    15c8:	d512      	bpl.n	15f0 <cmu_hfxo_get_pda_current+0x34>
        return 0;
    
    return HFXO_IBTRIM_TO_UA(cmu_hfxo_get_pda_ibtrim(ubTrigger));
    15ca:	f7ff ffe1 	bl	1590 <cmu_hfxo_get_pda_ibtrim>
    15ce:	4601      	mov	r1, r0
    15d0:	4620      	mov	r0, r4
    15d2:	f7ff ffdd 	bl	1590 <cmu_hfxo_get_pda_ibtrim>
    15d6:	f44f 7320 	mov.w	r3, #640	; 0x280
    15da:	f3c1 2141 	ubfx	r1, r1, #9, #2
    15de:	b2c0      	uxtb	r0, r0
    15e0:	fb03 0101 	mla	r1, r3, r1, r0
    15e4:	0049      	lsls	r1, r1, #1
    15e6:	ee07 1a90 	vmov	s15, r1
    15ea:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
}
    15ee:	bd10      	pop	{r4, pc}
        return 0;
    15f0:	ed9f 0a02 	vldr	s0, [pc, #8]	; 15fc <cmu_hfxo_get_pda_current+0x40>
    15f4:	e7fb      	b.n	15ee <cmu_hfxo_get_pda_current+0x32>
    15f6:	bf00      	nop
    15f8:	400e4000 	.word	0x400e4000
    15fc:	00000000 	.word	0x00000000

00001600 <cmu_hfxo_get_pma_ibtrim>:
uint16_t cmu_hfxo_get_pma_ibtrim()
{
    if(!(CMU->STATUS & CMU_STATUS_HFXOENS))
    1600:	4b05      	ldr	r3, [pc, #20]	; (1618 <cmu_hfxo_get_pma_ibtrim+0x18>)
    1602:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
    1606:	f010 0004 	ands.w	r0, r0, #4
        return 0;

    return (CMU->HFXOTRIMSTATUS & _CMU_HFXOTRIMSTATUS_IBTRIMXOCOREMON_MASK) >> _CMU_HFXOTRIMSTATUS_IBTRIMXOCOREMON_SHIFT;
    160a:	bf1c      	itt	ne
    160c:	f8d3 009c 	ldrne.w	r0, [r3, #156]	; 0x9c
    1610:	f3c0 400a 	ubfxne	r0, r0, #16, #11
}
    1614:	4770      	bx	lr
    1616:	bf00      	nop
    1618:	400e4000 	.word	0x400e4000

0000161c <cmu_hfxo_get_pma_current>:
float cmu_hfxo_get_pma_current()
{
    161c:	b508      	push	{r3, lr}
    if(!(CMU->STATUS & CMU_STATUS_HFXOENS))
    161e:	4b0d      	ldr	r3, [pc, #52]	; (1654 <cmu_hfxo_get_pma_current+0x38>)
    1620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    1624:	075b      	lsls	r3, r3, #29
    1626:	d511      	bpl.n	164c <cmu_hfxo_get_pma_current+0x30>
        return 0;
    
    return HFXO_IBTRIM_TO_UA(cmu_hfxo_get_pma_ibtrim());
    1628:	f7ff ffea 	bl	1600 <cmu_hfxo_get_pma_ibtrim>
    162c:	4602      	mov	r2, r0
    162e:	f7ff ffe7 	bl	1600 <cmu_hfxo_get_pma_ibtrim>
    1632:	f44f 7320 	mov.w	r3, #640	; 0x280
    1636:	f3c2 2241 	ubfx	r2, r2, #9, #2
    163a:	b2c0      	uxtb	r0, r0
    163c:	fb03 0202 	mla	r2, r3, r2, r0
    1640:	0052      	lsls	r2, r2, #1
    1642:	ee07 2a90 	vmov	s15, r2
    1646:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
}
    164a:	bd08      	pop	{r3, pc}
        return 0;
    164c:	ed9f 0a02 	vldr	s0, [pc, #8]	; 1658 <cmu_hfxo_get_pma_current+0x3c>
    1650:	e7fb      	b.n	164a <cmu_hfxo_get_pma_current+0x2e>
    1652:	bf00      	nop
    1654:	400e4000 	.word	0x400e4000
    1658:	00000000 	.word	0x00000000

0000165c <crc_init>:

#else

void crc_init()
{
    CMU->HFBUSCLKEN0 |= CMU_HFBUSCLKEN0_GPCRC;
    165c:	4a07      	ldr	r2, [pc, #28]	; (167c <crc_init+0x20>)
    165e:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
    1662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1666:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

    GPCRC->CTRL = GPCRC_CTRL_BYTEREVERSE | GPCRC_CTRL_BITREVERSE | GPCRC_CTRL_POLYSEL_CRC32 | GPCRC_CTRL_EN_ENABLE;
    166a:	4b05      	ldr	r3, [pc, #20]	; (1680 <crc_init+0x24>)
    166c:	f240 6201 	movw	r2, #1537	; 0x601
    1670:	601a      	str	r2, [r3, #0]
    GPCRC->INIT = 0xFFFFFFFF;
    1672:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1676:	609a      	str	r2, [r3, #8]
}
    1678:	4770      	bx	lr
    167a:	bf00      	nop
    167c:	400e4000 	.word	0x400e4000
    1680:	4001c000 	.word	0x4001c000

00001684 <dbg_init>:
    dbg_swo_putc(ch, 0);
}

void dbg_init()
{
    CMU->DBGCLKSEL = CMU_DBGCLKSEL_DBG_HFRCODIV2;
    1684:	4b02      	ldr	r3, [pc, #8]	; (1690 <dbg_init+0xc>)
    1686:	2202      	movs	r2, #2
    1688:	671a      	str	r2, [r3, #112]	; 0x70

    cmu_update_clocks();
    168a:	f7ff bb81 	b.w	d90 <cmu_update_clocks>
    168e:	bf00      	nop
    1690:	400e4000 	.word	0x400e4000

00001694 <dbg_swo_config>:
}
void dbg_swo_config(uint32_t ulChannelMask, uint32_t ulFrequency)
{
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    1694:	4a11      	ldr	r2, [pc, #68]	; (16dc <dbg_swo_config+0x48>)
    1696:	68d3      	ldr	r3, [r2, #12]
    1698:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    169c:	60d3      	str	r3, [r2, #12]
    TPI->SPPR = 2 << TPI_SPPR_TXMODE_Pos;
    169e:	4a10      	ldr	r2, [pc, #64]	; (16e0 <dbg_swo_config+0x4c>)
    16a0:	2302      	movs	r3, #2
    16a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    TPI->ACPR = (DBG_CLOCK_FREQ / ulFrequency) - 1;
    16a6:	4b0f      	ldr	r3, [pc, #60]	; (16e4 <dbg_swo_config+0x50>)
    16a8:	681b      	ldr	r3, [r3, #0]
    16aa:	fbb3 f1f1 	udiv	r1, r3, r1
    TPI->FFCR = 0x00000100;
    16ae:	f44f 7380 	mov.w	r3, #256	; 0x100
    TPI->ACPR = (DBG_CLOCK_FREQ / ulFrequency) - 1;
    16b2:	3901      	subs	r1, #1
    16b4:	6111      	str	r1, [r2, #16]
    TPI->FFCR = 0x00000100;
    16b6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    DWT->CTRL = 0x400003FE;
    16ba:	4b0b      	ldr	r3, [pc, #44]	; (16e8 <dbg_swo_config+0x54>)
    16bc:	4a0b      	ldr	r2, [pc, #44]	; (16ec <dbg_swo_config+0x58>)
    16be:	601a      	str	r2, [r3, #0]
    ITM->TCR = (1 << ITM_TCR_TraceBusID_Pos) | ITM_TCR_ITMENA_Msk;
    16c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    16c4:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    16c8:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    ITM->LAR = 0xC5ACCE55;
    16cc:	4a08      	ldr	r2, [pc, #32]	; (16f0 <dbg_swo_config+0x5c>)
    16ce:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    ITM->TPR = ulChannelMask;
    16d2:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    ITM->TER = ulChannelMask;
    16d6:	f8c3 0e00 	str.w	r0, [r3, #3584]	; 0xe00
}
    16da:	4770      	bx	lr
    16dc:	e000edf0 	.word	0xe000edf0
    16e0:	e0040000 	.word	0xe0040000
    16e4:	20000108 	.word	0x20000108
    16e8:	e0001000 	.word	0xe0001000
    16ec:	400003fe 	.word	0x400003fe
    16f0:	c5acce55 	.word	0xc5acce55

000016f4 <dbg_swo_send_uint8>:
{
    dbg_swo_send_uint8((uint8_t)c, ubChannel);
}
void dbg_swo_send_uint8(uint8_t ubData, uint8_t ubChannel)
{
    if (!(ITM->TCR & ITM_TCR_ITMENA_Msk))
    16f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
{
    16f8:	b510      	push	{r4, lr}
    if (!(ITM->TCR & ITM_TCR_ITMENA_Msk))
    16fa:	f8d3 2e80 	ldr.w	r2, [r3, #3712]	; 0xe80
    16fe:	07d2      	lsls	r2, r2, #31
    1700:	d50a      	bpl.n	1718 <dbg_swo_send_uint8+0x24>
        return;

    if (!(ITM->TER & (1 << ubChannel)))
    1702:	f8d3 4e00 	ldr.w	r4, [r3, #3584]	; 0xe00
    1706:	2201      	movs	r2, #1
    1708:	408a      	lsls	r2, r1
    170a:	4222      	tst	r2, r4
    170c:	d004      	beq.n	1718 <dbg_swo_send_uint8+0x24>
        return;

    while(!ITM->PORT[0].u8);
    170e:	781a      	ldrb	r2, [r3, #0]
    1710:	2a00      	cmp	r2, #0
    1712:	d0fc      	beq.n	170e <dbg_swo_send_uint8+0x1a>

    ITM->PORT[ubChannel].u8 = ubData;
    1714:	f803 0021 	strb.w	r0, [r3, r1, lsl #2]
}
    1718:	bd10      	pop	{r4, pc}

0000171a <_putchar>:
    dbg_swo_send_uint8((uint8_t)c, ubChannel);
    171a:	2100      	movs	r1, #0
    171c:	f7ff bfea 	b.w	16f4 <dbg_swo_send_uint8>

00001720 <crypto_init>:
#include "crypto.h"

void crypto_init()
{
    CMU->HFBUSCLKEN0 |= CMU_HFBUSCLKEN0_CRYPTO0;
    1720:	4a03      	ldr	r2, [pc, #12]	; (1730 <crypto_init+0x10>)
    1722:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
    1726:	f043 0302 	orr.w	r3, r3, #2
    172a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
}
    172e:	4770      	bx	lr
    1730:	400e4000 	.word	0x400e4000

00001734 <_hardfault_isr>:

void trace_stack(uint32_t *pulFaultStackAddress);

void __attribute__ ((naked)) _hardfault_isr()
{
    __asm__ volatile
    1734:	f01e 0f04 	tst.w	lr, #4
    1738:	bf0c      	ite	eq
    173a:	f3ef 8008 	mrseq	r0, MSP
    173e:	f3ef 8009 	mrsne	r0, PSP
    1742:	6981      	ldr	r1, [r0, #24]
    1744:	4a00      	ldr	r2, [pc, #0]	; (1748 <hardfault_trace_stack_addr>)
    1746:	4710      	bx	r2

00001748 <hardfault_trace_stack_addr>:
    1748:	00001795 	.word	0x00001795

0000174c <_memmanage_isr>:
    );
}

void __attribute__ ((naked)) _memmanage_isr()
{
    __asm__ volatile
    174c:	f01e 0f04 	tst.w	lr, #4
    1750:	bf0c      	ite	eq
    1752:	f3ef 8008 	mrseq	r0, MSP
    1756:	f3ef 8009 	mrsne	r0, PSP
    175a:	6981      	ldr	r1, [r0, #24]
    175c:	4a00      	ldr	r2, [pc, #0]	; (1760 <memmanage_trace_stack_addr>)
    175e:	4710      	bx	r2

00001760 <memmanage_trace_stack_addr>:
    1760:	00001879 	.word	0x00001879

00001764 <_busfault_isr>:
    );
}

void __attribute__ ((naked)) _busfault_isr()
{
    __asm__ volatile
    1764:	f01e 0f04 	tst.w	lr, #4
    1768:	bf0c      	ite	eq
    176a:	f3ef 8008 	mrseq	r0, MSP
    176e:	f3ef 8009 	mrsne	r0, PSP
    1772:	6981      	ldr	r1, [r0, #24]
    1774:	4a00      	ldr	r2, [pc, #0]	; (1778 <busfault_trace_stack_addr>)
    1776:	4710      	bx	r2

00001778 <busfault_trace_stack_addr>:
    1778:	0000196d 	.word	0x0000196d

0000177c <_usagefault_isr>:
    );
}

void __attribute__ ((naked)) _usagefault_isr()
{
    __asm__ volatile
    177c:	f01e 0f04 	tst.w	lr, #4
    1780:	bf0c      	ite	eq
    1782:	f3ef 8008 	mrseq	r0, MSP
    1786:	f3ef 8009 	mrsne	r0, PSP
    178a:	6981      	ldr	r1, [r0, #24]
    178c:	4a00      	ldr	r2, [pc, #0]	; (1790 <usagefault_trace_stack_addr>)
    178e:	4710      	bx	r2

00001790 <usagefault_trace_stack_addr>:
    1790:	00001a6d 	.word	0x00001a6d

00001794 <hardfault_trace_stack>:
        " usagefault_trace_stack_addr: .word usagefault_trace_stack \n"
    );
}

void hardfault_trace_stack(uint32_t *pulFaultStackAddress)
{
    1794:	b500      	push	{lr}
    1796:	b089      	sub	sp, #36	; 0x24
    volatile uint32_t r0 = pulFaultStackAddress[0];
    1798:	6803      	ldr	r3, [r0, #0]
    179a:	9300      	str	r3, [sp, #0]
    volatile uint32_t r1 = pulFaultStackAddress[1];
    179c:	6843      	ldr	r3, [r0, #4]
    179e:	9301      	str	r3, [sp, #4]
    volatile uint32_t r2 = pulFaultStackAddress[2];
    17a0:	6883      	ldr	r3, [r0, #8]
    17a2:	9302      	str	r3, [sp, #8]
    volatile uint32_t r3 = pulFaultStackAddress[3];
    17a4:	68c3      	ldr	r3, [r0, #12]
    17a6:	9303      	str	r3, [sp, #12]
    volatile uint32_t r12 = pulFaultStackAddress[4];
    17a8:	6903      	ldr	r3, [r0, #16]
    17aa:	9304      	str	r3, [sp, #16]
    volatile uint32_t lr = pulFaultStackAddress[5];
    17ac:	6943      	ldr	r3, [r0, #20]
    17ae:	9305      	str	r3, [sp, #20]
    volatile uint32_t pc = pulFaultStackAddress[6];
    17b0:	6983      	ldr	r3, [r0, #24]
    17b2:	9306      	str	r3, [sp, #24]
    volatile uint32_t psr = pulFaultStackAddress[7];

    DBGPRINTLN_CTX("Hard fault! Stack trace:");
    17b4:	4921      	ldr	r1, [pc, #132]	; (183c <hardfault_trace_stack+0xa8>)
    volatile uint32_t psr = pulFaultStackAddress[7];
    17b6:	69c3      	ldr	r3, [r0, #28]
    DBGPRINTLN_CTX("Hard fault! Stack trace:");
    17b8:	4821      	ldr	r0, [pc, #132]	; (1840 <hardfault_trace_stack+0xac>)
    volatile uint32_t psr = pulFaultStackAddress[7];
    17ba:	9307      	str	r3, [sp, #28]
    DBGPRINTLN_CTX("Hard fault! Stack trace:");
    17bc:	f002 fc7e 	bl	40bc <printf>
    DBGPRINTLN_CTX("R0 [0x%08X]", r0);
    17c0:	9a00      	ldr	r2, [sp, #0]
    17c2:	491e      	ldr	r1, [pc, #120]	; (183c <hardfault_trace_stack+0xa8>)
    17c4:	481f      	ldr	r0, [pc, #124]	; (1844 <hardfault_trace_stack+0xb0>)
    DBGPRINTLN_CTX("R12 [0x%08X]", r12);
    DBGPRINTLN_CTX("LR [R14] [0x%08X] call return", lr);
    DBGPRINTLN_CTX("PC [R15] [0x%08X] program counter", pc);
    DBGPRINTLN_CTX("PSR [0x%08X] program status register", psr);
    DBGPRINTLN_CTX("------------------------------");
    DBGPRINTLN_CTX("HFSR [0x%08X]", SCB->HFSR);
    17c6:	4c20      	ldr	r4, [pc, #128]	; (1848 <hardfault_trace_stack+0xb4>)
    DBGPRINTLN_CTX("R0 [0x%08X]", r0);
    17c8:	f002 fc78 	bl	40bc <printf>
    DBGPRINTLN_CTX("R1 [0x%08X]", r1);
    17cc:	9a01      	ldr	r2, [sp, #4]
    17ce:	491b      	ldr	r1, [pc, #108]	; (183c <hardfault_trace_stack+0xa8>)
    17d0:	481e      	ldr	r0, [pc, #120]	; (184c <hardfault_trace_stack+0xb8>)
    17d2:	f002 fc73 	bl	40bc <printf>
    DBGPRINTLN_CTX("R2 [0x%08X]", r2);
    17d6:	9a02      	ldr	r2, [sp, #8]
    17d8:	4918      	ldr	r1, [pc, #96]	; (183c <hardfault_trace_stack+0xa8>)
    17da:	481d      	ldr	r0, [pc, #116]	; (1850 <hardfault_trace_stack+0xbc>)
    17dc:	f002 fc6e 	bl	40bc <printf>
    DBGPRINTLN_CTX("R3 [0x%08X]", r3);
    17e0:	9a03      	ldr	r2, [sp, #12]
    17e2:	4916      	ldr	r1, [pc, #88]	; (183c <hardfault_trace_stack+0xa8>)
    17e4:	481b      	ldr	r0, [pc, #108]	; (1854 <hardfault_trace_stack+0xc0>)
    17e6:	f002 fc69 	bl	40bc <printf>
    DBGPRINTLN_CTX("R12 [0x%08X]", r12);
    17ea:	9a04      	ldr	r2, [sp, #16]
    17ec:	4913      	ldr	r1, [pc, #76]	; (183c <hardfault_trace_stack+0xa8>)
    17ee:	481a      	ldr	r0, [pc, #104]	; (1858 <hardfault_trace_stack+0xc4>)
    17f0:	f002 fc64 	bl	40bc <printf>
    DBGPRINTLN_CTX("LR [R14] [0x%08X] call return", lr);
    17f4:	9a05      	ldr	r2, [sp, #20]
    17f6:	4911      	ldr	r1, [pc, #68]	; (183c <hardfault_trace_stack+0xa8>)
    17f8:	4818      	ldr	r0, [pc, #96]	; (185c <hardfault_trace_stack+0xc8>)
    17fa:	f002 fc5f 	bl	40bc <printf>
    DBGPRINTLN_CTX("PC [R15] [0x%08X] program counter", pc);
    17fe:	9a06      	ldr	r2, [sp, #24]
    1800:	490e      	ldr	r1, [pc, #56]	; (183c <hardfault_trace_stack+0xa8>)
    1802:	4817      	ldr	r0, [pc, #92]	; (1860 <hardfault_trace_stack+0xcc>)
    1804:	f002 fc5a 	bl	40bc <printf>
    DBGPRINTLN_CTX("PSR [0x%08X] program status register", psr);
    1808:	9a07      	ldr	r2, [sp, #28]
    180a:	490c      	ldr	r1, [pc, #48]	; (183c <hardfault_trace_stack+0xa8>)
    180c:	4815      	ldr	r0, [pc, #84]	; (1864 <hardfault_trace_stack+0xd0>)
    180e:	f002 fc55 	bl	40bc <printf>
    DBGPRINTLN_CTX("------------------------------");
    1812:	490a      	ldr	r1, [pc, #40]	; (183c <hardfault_trace_stack+0xa8>)
    1814:	4814      	ldr	r0, [pc, #80]	; (1868 <hardfault_trace_stack+0xd4>)
    1816:	f002 fc51 	bl	40bc <printf>
    DBGPRINTLN_CTX("HFSR [0x%08X]", SCB->HFSR);
    181a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    181c:	4907      	ldr	r1, [pc, #28]	; (183c <hardfault_trace_stack+0xa8>)
    181e:	4813      	ldr	r0, [pc, #76]	; (186c <hardfault_trace_stack+0xd8>)
    1820:	f002 fc4c 	bl	40bc <printf>
    DBGPRINTLN_CTX("ICSR [0x%08X]", SCB->ICSR);
    1824:	6862      	ldr	r2, [r4, #4]
    1826:	4905      	ldr	r1, [pc, #20]	; (183c <hardfault_trace_stack+0xa8>)
    1828:	4811      	ldr	r0, [pc, #68]	; (1870 <hardfault_trace_stack+0xdc>)
    182a:	f002 fc47 	bl	40bc <printf>
 */
__STATIC_FORCEINLINE uint32_t __get_MSP(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, msp" : "=r" (result) );
    182e:	f3ef 8208 	mrs	r2, MSP
    DBGPRINTLN_CTX("MSP [0x%08X]", __get_MSP());
    1832:	4902      	ldr	r1, [pc, #8]	; (183c <hardfault_trace_stack+0xa8>)
    1834:	480f      	ldr	r0, [pc, #60]	; (1874 <hardfault_trace_stack+0xe0>)
    1836:	f002 fc41 	bl	40bc <printf>

    while(1);
    183a:	e7fe      	b.n	183a <hardfault_trace_stack+0xa6>
    183c:	00004334 	.word	0x00004334
    1840:	000043db 	.word	0x000043db
    1844:	000043fd 	.word	0x000043fd
    1848:	e000ed00 	.word	0xe000ed00
    184c:	00004412 	.word	0x00004412
    1850:	00004427 	.word	0x00004427
    1854:	0000443c 	.word	0x0000443c
    1858:	00004451 	.word	0x00004451
    185c:	00004467 	.word	0x00004467
    1860:	0000448e 	.word	0x0000448e
    1864:	000044b9 	.word	0x000044b9
    1868:	000044e7 	.word	0x000044e7
    186c:	0000450f 	.word	0x0000450f
    1870:	00004526 	.word	0x00004526
    1874:	0000453d 	.word	0x0000453d

00001878 <memmanage_trace_stack>:
}

void memmanage_trace_stack(uint32_t *pulFaultStackAddress)
{
    1878:	b500      	push	{lr}
    187a:	b089      	sub	sp, #36	; 0x24
    volatile uint32_t r0 = pulFaultStackAddress[0];
    187c:	6803      	ldr	r3, [r0, #0]
    187e:	9300      	str	r3, [sp, #0]
    volatile uint32_t r1 = pulFaultStackAddress[1];
    1880:	6843      	ldr	r3, [r0, #4]
    1882:	9301      	str	r3, [sp, #4]
    volatile uint32_t r2 = pulFaultStackAddress[2];
    1884:	6883      	ldr	r3, [r0, #8]
    1886:	9302      	str	r3, [sp, #8]
    volatile uint32_t r3 = pulFaultStackAddress[3];
    1888:	68c3      	ldr	r3, [r0, #12]
    188a:	9303      	str	r3, [sp, #12]
    volatile uint32_t r12 = pulFaultStackAddress[4];
    188c:	6903      	ldr	r3, [r0, #16]
    188e:	9304      	str	r3, [sp, #16]
    volatile uint32_t lr = pulFaultStackAddress[5];
    1890:	6943      	ldr	r3, [r0, #20]
    1892:	9305      	str	r3, [sp, #20]
    volatile uint32_t pc = pulFaultStackAddress[6];
    1894:	6983      	ldr	r3, [r0, #24]
    1896:	9306      	str	r3, [sp, #24]
    volatile uint32_t psr = pulFaultStackAddress[7];

    DBGPRINTLN_CTX("Memory management fault! Stack trace:");
    1898:	4924      	ldr	r1, [pc, #144]	; (192c <memmanage_trace_stack+0xb4>)
    volatile uint32_t psr = pulFaultStackAddress[7];
    189a:	69c3      	ldr	r3, [r0, #28]
    DBGPRINTLN_CTX("Memory management fault! Stack trace:");
    189c:	4824      	ldr	r0, [pc, #144]	; (1930 <memmanage_trace_stack+0xb8>)
    volatile uint32_t psr = pulFaultStackAddress[7];
    189e:	9307      	str	r3, [sp, #28]
    DBGPRINTLN_CTX("Memory management fault! Stack trace:");
    18a0:	f002 fc0c 	bl	40bc <printf>
    DBGPRINTLN_CTX("R0 [0x%08X]", r0);
    18a4:	9a00      	ldr	r2, [sp, #0]
    18a6:	4921      	ldr	r1, [pc, #132]	; (192c <memmanage_trace_stack+0xb4>)
    18a8:	4822      	ldr	r0, [pc, #136]	; (1934 <memmanage_trace_stack+0xbc>)
    DBGPRINTLN_CTX("R12 [0x%08X]", r12);
    DBGPRINTLN_CTX("LR [R14] [0x%08X] call return", lr);
    DBGPRINTLN_CTX("PC [R15] [0x%08X] program counter", pc);
    DBGPRINTLN_CTX("PSR [0x%08X] program status register", psr);
    DBGPRINTLN_CTX("------------------------------");
    DBGPRINTLN_CTX("MMFSR [0x%02X]", (SCB->CFSR >> 0) & 0xFF);
    18aa:	4c23      	ldr	r4, [pc, #140]	; (1938 <memmanage_trace_stack+0xc0>)
    DBGPRINTLN_CTX("R0 [0x%08X]", r0);
    18ac:	f002 fc06 	bl	40bc <printf>
    DBGPRINTLN_CTX("R1 [0x%08X]", r1);
    18b0:	9a01      	ldr	r2, [sp, #4]
    18b2:	491e      	ldr	r1, [pc, #120]	; (192c <memmanage_trace_stack+0xb4>)
    18b4:	4821      	ldr	r0, [pc, #132]	; (193c <memmanage_trace_stack+0xc4>)
    18b6:	f002 fc01 	bl	40bc <printf>
    DBGPRINTLN_CTX("R2 [0x%08X]", r2);
    18ba:	9a02      	ldr	r2, [sp, #8]
    18bc:	491b      	ldr	r1, [pc, #108]	; (192c <memmanage_trace_stack+0xb4>)
    18be:	4820      	ldr	r0, [pc, #128]	; (1940 <memmanage_trace_stack+0xc8>)
    18c0:	f002 fbfc 	bl	40bc <printf>
    DBGPRINTLN_CTX("R3 [0x%08X]", r3);
    18c4:	9a03      	ldr	r2, [sp, #12]
    18c6:	4919      	ldr	r1, [pc, #100]	; (192c <memmanage_trace_stack+0xb4>)
    18c8:	481e      	ldr	r0, [pc, #120]	; (1944 <memmanage_trace_stack+0xcc>)
    18ca:	f002 fbf7 	bl	40bc <printf>
    DBGPRINTLN_CTX("R12 [0x%08X]", r12);
    18ce:	9a04      	ldr	r2, [sp, #16]
    18d0:	4916      	ldr	r1, [pc, #88]	; (192c <memmanage_trace_stack+0xb4>)
    18d2:	481d      	ldr	r0, [pc, #116]	; (1948 <memmanage_trace_stack+0xd0>)
    18d4:	f002 fbf2 	bl	40bc <printf>
    DBGPRINTLN_CTX("LR [R14] [0x%08X] call return", lr);
    18d8:	9a05      	ldr	r2, [sp, #20]
    18da:	4914      	ldr	r1, [pc, #80]	; (192c <memmanage_trace_stack+0xb4>)
    18dc:	481b      	ldr	r0, [pc, #108]	; (194c <memmanage_trace_stack+0xd4>)
    18de:	f002 fbed 	bl	40bc <printf>
    DBGPRINTLN_CTX("PC [R15] [0x%08X] program counter", pc);
    18e2:	9a06      	ldr	r2, [sp, #24]
    18e4:	4911      	ldr	r1, [pc, #68]	; (192c <memmanage_trace_stack+0xb4>)
    18e6:	481a      	ldr	r0, [pc, #104]	; (1950 <memmanage_trace_stack+0xd8>)
    18e8:	f002 fbe8 	bl	40bc <printf>
    DBGPRINTLN_CTX("PSR [0x%08X] program status register", psr);
    18ec:	9a07      	ldr	r2, [sp, #28]
    18ee:	490f      	ldr	r1, [pc, #60]	; (192c <memmanage_trace_stack+0xb4>)
    18f0:	4818      	ldr	r0, [pc, #96]	; (1954 <memmanage_trace_stack+0xdc>)
    18f2:	f002 fbe3 	bl	40bc <printf>
    DBGPRINTLN_CTX("------------------------------");
    18f6:	490d      	ldr	r1, [pc, #52]	; (192c <memmanage_trace_stack+0xb4>)
    18f8:	4817      	ldr	r0, [pc, #92]	; (1958 <memmanage_trace_stack+0xe0>)
    18fa:	f002 fbdf 	bl	40bc <printf>
    DBGPRINTLN_CTX("MMFSR [0x%02X]", (SCB->CFSR >> 0) & 0xFF);
    18fe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1900:	490a      	ldr	r1, [pc, #40]	; (192c <memmanage_trace_stack+0xb4>)
    1902:	4816      	ldr	r0, [pc, #88]	; (195c <memmanage_trace_stack+0xe4>)
    1904:	b2d2      	uxtb	r2, r2
    1906:	f002 fbd9 	bl	40bc <printf>
    DBGPRINTLN_CTX("MMFAR [0x%08X]", SCB->MMFAR);
    190a:	6b62      	ldr	r2, [r4, #52]	; 0x34
    190c:	4907      	ldr	r1, [pc, #28]	; (192c <memmanage_trace_stack+0xb4>)
    190e:	4814      	ldr	r0, [pc, #80]	; (1960 <memmanage_trace_stack+0xe8>)
    1910:	f002 fbd4 	bl	40bc <printf>
    DBGPRINTLN_CTX("ICSR [0x%08X]", SCB->ICSR);
    1914:	6862      	ldr	r2, [r4, #4]
    1916:	4905      	ldr	r1, [pc, #20]	; (192c <memmanage_trace_stack+0xb4>)
    1918:	4812      	ldr	r0, [pc, #72]	; (1964 <memmanage_trace_stack+0xec>)
    191a:	f002 fbcf 	bl	40bc <printf>
    191e:	f3ef 8208 	mrs	r2, MSP
    DBGPRINTLN_CTX("MSP [0x%08X]", __get_MSP());
    1922:	4902      	ldr	r1, [pc, #8]	; (192c <memmanage_trace_stack+0xb4>)
    1924:	4810      	ldr	r0, [pc, #64]	; (1968 <memmanage_trace_stack+0xf0>)
    1926:	f002 fbc9 	bl	40bc <printf>

    while(1);
    192a:	e7fe      	b.n	192a <memmanage_trace_stack+0xb2>
    192c:	0000434a 	.word	0x0000434a
    1930:	00004553 	.word	0x00004553
    1934:	000043fd 	.word	0x000043fd
    1938:	e000ed00 	.word	0xe000ed00
    193c:	00004412 	.word	0x00004412
    1940:	00004427 	.word	0x00004427
    1944:	0000443c 	.word	0x0000443c
    1948:	00004451 	.word	0x00004451
    194c:	00004467 	.word	0x00004467
    1950:	0000448e 	.word	0x0000448e
    1954:	000044b9 	.word	0x000044b9
    1958:	000044e7 	.word	0x000044e7
    195c:	00004582 	.word	0x00004582
    1960:	0000459a 	.word	0x0000459a
    1964:	00004526 	.word	0x00004526
    1968:	0000453d 	.word	0x0000453d

0000196c <busfault_trace_stack>:
}

void busfault_trace_stack(uint32_t *pulFaultStackAddress)
{
    196c:	b500      	push	{lr}
    196e:	b089      	sub	sp, #36	; 0x24
    volatile uint32_t r0 = pulFaultStackAddress[0];
    1970:	6803      	ldr	r3, [r0, #0]
    1972:	9300      	str	r3, [sp, #0]
    volatile uint32_t r1 = pulFaultStackAddress[1];
    1974:	6843      	ldr	r3, [r0, #4]
    1976:	9301      	str	r3, [sp, #4]
    volatile uint32_t r2 = pulFaultStackAddress[2];
    1978:	6883      	ldr	r3, [r0, #8]
    197a:	9302      	str	r3, [sp, #8]
    volatile uint32_t r3 = pulFaultStackAddress[3];
    197c:	68c3      	ldr	r3, [r0, #12]
    197e:	9303      	str	r3, [sp, #12]
    volatile uint32_t r12 = pulFaultStackAddress[4];
    1980:	6903      	ldr	r3, [r0, #16]
    1982:	9304      	str	r3, [sp, #16]
    volatile uint32_t lr = pulFaultStackAddress[5];
    1984:	6943      	ldr	r3, [r0, #20]
    1986:	9305      	str	r3, [sp, #20]
    volatile uint32_t pc = pulFaultStackAddress[6];
    1988:	6983      	ldr	r3, [r0, #24]
    198a:	9306      	str	r3, [sp, #24]
    volatile uint32_t psr = pulFaultStackAddress[7];

    DBGPRINTLN_CTX("Bus fault! Stack trace:");
    198c:	4927      	ldr	r1, [pc, #156]	; (1a2c <busfault_trace_stack+0xc0>)
    volatile uint32_t psr = pulFaultStackAddress[7];
    198e:	69c3      	ldr	r3, [r0, #28]
    DBGPRINTLN_CTX("Bus fault! Stack trace:");
    1990:	4827      	ldr	r0, [pc, #156]	; (1a30 <busfault_trace_stack+0xc4>)
    volatile uint32_t psr = pulFaultStackAddress[7];
    1992:	9307      	str	r3, [sp, #28]
    DBGPRINTLN_CTX("Bus fault! Stack trace:");
    1994:	f002 fb92 	bl	40bc <printf>
    DBGPRINTLN_CTX("R0 [0x%08X]", r0);
    1998:	9a00      	ldr	r2, [sp, #0]
    199a:	4924      	ldr	r1, [pc, #144]	; (1a2c <busfault_trace_stack+0xc0>)
    199c:	4825      	ldr	r0, [pc, #148]	; (1a34 <busfault_trace_stack+0xc8>)
    DBGPRINTLN_CTX("R12 [0x%08X]", r12);
    DBGPRINTLN_CTX("LR [R14] [0x%08X] call return", lr);
    DBGPRINTLN_CTX("PC [R15] [0x%08X] program counter", pc);
    DBGPRINTLN_CTX("PSR [0x%08X] program status register", psr);
    DBGPRINTLN_CTX("------------------------------");
    DBGPRINTLN_CTX("BFSR [0x%02X]", (SCB->CFSR >> 8) & 0xFF);
    199e:	4c26      	ldr	r4, [pc, #152]	; (1a38 <busfault_trace_stack+0xcc>)
    DBGPRINTLN_CTX("R0 [0x%08X]", r0);
    19a0:	f002 fb8c 	bl	40bc <printf>
    DBGPRINTLN_CTX("R1 [0x%08X]", r1);
    19a4:	9a01      	ldr	r2, [sp, #4]
    19a6:	4921      	ldr	r1, [pc, #132]	; (1a2c <busfault_trace_stack+0xc0>)
    19a8:	4824      	ldr	r0, [pc, #144]	; (1a3c <busfault_trace_stack+0xd0>)
    19aa:	f002 fb87 	bl	40bc <printf>
    DBGPRINTLN_CTX("R2 [0x%08X]", r2);
    19ae:	9a02      	ldr	r2, [sp, #8]
    19b0:	491e      	ldr	r1, [pc, #120]	; (1a2c <busfault_trace_stack+0xc0>)
    19b2:	4823      	ldr	r0, [pc, #140]	; (1a40 <busfault_trace_stack+0xd4>)
    19b4:	f002 fb82 	bl	40bc <printf>
    DBGPRINTLN_CTX("R3 [0x%08X]", r3);
    19b8:	9a03      	ldr	r2, [sp, #12]
    19ba:	491c      	ldr	r1, [pc, #112]	; (1a2c <busfault_trace_stack+0xc0>)
    19bc:	4821      	ldr	r0, [pc, #132]	; (1a44 <busfault_trace_stack+0xd8>)
    19be:	f002 fb7d 	bl	40bc <printf>
    DBGPRINTLN_CTX("R12 [0x%08X]", r12);
    19c2:	9a04      	ldr	r2, [sp, #16]
    19c4:	4919      	ldr	r1, [pc, #100]	; (1a2c <busfault_trace_stack+0xc0>)
    19c6:	4820      	ldr	r0, [pc, #128]	; (1a48 <busfault_trace_stack+0xdc>)
    19c8:	f002 fb78 	bl	40bc <printf>
    DBGPRINTLN_CTX("LR [R14] [0x%08X] call return", lr);
    19cc:	9a05      	ldr	r2, [sp, #20]
    19ce:	4917      	ldr	r1, [pc, #92]	; (1a2c <busfault_trace_stack+0xc0>)
    19d0:	481e      	ldr	r0, [pc, #120]	; (1a4c <busfault_trace_stack+0xe0>)
    19d2:	f002 fb73 	bl	40bc <printf>
    DBGPRINTLN_CTX("PC [R15] [0x%08X] program counter", pc);
    19d6:	9a06      	ldr	r2, [sp, #24]
    19d8:	4914      	ldr	r1, [pc, #80]	; (1a2c <busfault_trace_stack+0xc0>)
    19da:	481d      	ldr	r0, [pc, #116]	; (1a50 <busfault_trace_stack+0xe4>)
    19dc:	f002 fb6e 	bl	40bc <printf>
    DBGPRINTLN_CTX("PSR [0x%08X] program status register", psr);
    19e0:	9a07      	ldr	r2, [sp, #28]
    19e2:	4912      	ldr	r1, [pc, #72]	; (1a2c <busfault_trace_stack+0xc0>)
    19e4:	481b      	ldr	r0, [pc, #108]	; (1a54 <busfault_trace_stack+0xe8>)
    19e6:	f002 fb69 	bl	40bc <printf>
    DBGPRINTLN_CTX("------------------------------");
    19ea:	4910      	ldr	r1, [pc, #64]	; (1a2c <busfault_trace_stack+0xc0>)
    19ec:	481a      	ldr	r0, [pc, #104]	; (1a58 <busfault_trace_stack+0xec>)
    19ee:	f002 fb65 	bl	40bc <printf>
    DBGPRINTLN_CTX("BFSR [0x%02X]", (SCB->CFSR >> 8) & 0xFF);
    19f2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    19f4:	490d      	ldr	r1, [pc, #52]	; (1a2c <busfault_trace_stack+0xc0>)
    19f6:	4819      	ldr	r0, [pc, #100]	; (1a5c <busfault_trace_stack+0xf0>)
    19f8:	f3c2 2207 	ubfx	r2, r2, #8, #8
    19fc:	f002 fb5e 	bl	40bc <printf>
    DBGPRINTLN_CTX("BFAR [0x%08X]", SCB->BFAR);
    1a00:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    1a02:	490a      	ldr	r1, [pc, #40]	; (1a2c <busfault_trace_stack+0xc0>)
    1a04:	4816      	ldr	r0, [pc, #88]	; (1a60 <busfault_trace_stack+0xf4>)
    1a06:	f002 fb59 	bl	40bc <printf>
    DBGPRINTLN_CTX("ICSR [0x%08X]", SCB->ICSR);
    1a0a:	6862      	ldr	r2, [r4, #4]
    1a0c:	4907      	ldr	r1, [pc, #28]	; (1a2c <busfault_trace_stack+0xc0>)
    1a0e:	4815      	ldr	r0, [pc, #84]	; (1a64 <busfault_trace_stack+0xf8>)
    1a10:	f002 fb54 	bl	40bc <printf>
    1a14:	f3ef 8208 	mrs	r2, MSP
    DBGPRINTLN_CTX("MSP [0x%08X]", __get_MSP());
    1a18:	4904      	ldr	r1, [pc, #16]	; (1a2c <busfault_trace_stack+0xc0>)
    1a1a:	4813      	ldr	r0, [pc, #76]	; (1a68 <busfault_trace_stack+0xfc>)
    1a1c:	f002 fb4e 	bl	40bc <printf>

    MSC->CACHECMD = MSC_CACHECMD_INVCACHE;
    1a20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1a24:	2201      	movs	r2, #1
    1a26:	645a      	str	r2, [r3, #68]	; 0x44

    while(1);
    1a28:	e7fe      	b.n	1a28 <busfault_trace_stack+0xbc>
    1a2a:	bf00      	nop
    1a2c:	00004360 	.word	0x00004360
    1a30:	0000438c 	.word	0x0000438c
    1a34:	000043fd 	.word	0x000043fd
    1a38:	e000ed00 	.word	0xe000ed00
    1a3c:	00004412 	.word	0x00004412
    1a40:	00004427 	.word	0x00004427
    1a44:	0000443c 	.word	0x0000443c
    1a48:	00004451 	.word	0x00004451
    1a4c:	00004467 	.word	0x00004467
    1a50:	0000448e 	.word	0x0000448e
    1a54:	000044b9 	.word	0x000044b9
    1a58:	000044e7 	.word	0x000044e7
    1a5c:	000043ad 	.word	0x000043ad
    1a60:	000043c4 	.word	0x000043c4
    1a64:	00004526 	.word	0x00004526
    1a68:	0000453d 	.word	0x0000453d

00001a6c <usagefault_trace_stack>:
}

void usagefault_trace_stack(uint32_t *pulFaultStackAddress)
{
    1a6c:	b500      	push	{lr}
    1a6e:	b089      	sub	sp, #36	; 0x24
    volatile uint32_t r0 = pulFaultStackAddress[0];
    1a70:	6803      	ldr	r3, [r0, #0]
    1a72:	9300      	str	r3, [sp, #0]
    volatile uint32_t r1 = pulFaultStackAddress[1];
    1a74:	6843      	ldr	r3, [r0, #4]
    1a76:	9301      	str	r3, [sp, #4]
    volatile uint32_t r2 = pulFaultStackAddress[2];
    1a78:	6883      	ldr	r3, [r0, #8]
    1a7a:	9302      	str	r3, [sp, #8]
    volatile uint32_t r3 = pulFaultStackAddress[3];
    1a7c:	68c3      	ldr	r3, [r0, #12]
    1a7e:	9303      	str	r3, [sp, #12]
    volatile uint32_t r12 = pulFaultStackAddress[4];
    1a80:	6903      	ldr	r3, [r0, #16]
    1a82:	9304      	str	r3, [sp, #16]
    volatile uint32_t lr = pulFaultStackAddress[5];
    1a84:	6943      	ldr	r3, [r0, #20]
    1a86:	9305      	str	r3, [sp, #20]
    volatile uint32_t pc = pulFaultStackAddress[6];
    1a88:	6983      	ldr	r3, [r0, #24]
    1a8a:	9306      	str	r3, [sp, #24]
    volatile uint32_t psr = pulFaultStackAddress[7];

    DBGPRINTLN_CTX("Usage fault! Stack trace:");
    1a8c:	4922      	ldr	r1, [pc, #136]	; (1b18 <usagefault_trace_stack+0xac>)
    volatile uint32_t psr = pulFaultStackAddress[7];
    1a8e:	69c3      	ldr	r3, [r0, #28]
    DBGPRINTLN_CTX("Usage fault! Stack trace:");
    1a90:	4822      	ldr	r0, [pc, #136]	; (1b1c <usagefault_trace_stack+0xb0>)
    volatile uint32_t psr = pulFaultStackAddress[7];
    1a92:	9307      	str	r3, [sp, #28]
    DBGPRINTLN_CTX("Usage fault! Stack trace:");
    1a94:	f002 fb12 	bl	40bc <printf>
    DBGPRINTLN_CTX("R0 [0x%08X]", r0);
    1a98:	9a00      	ldr	r2, [sp, #0]
    1a9a:	491f      	ldr	r1, [pc, #124]	; (1b18 <usagefault_trace_stack+0xac>)
    1a9c:	4820      	ldr	r0, [pc, #128]	; (1b20 <usagefault_trace_stack+0xb4>)
    DBGPRINTLN_CTX("R12 [0x%08X]", r12);
    DBGPRINTLN_CTX("LR [R14] [0x%08X] call return", lr);
    DBGPRINTLN_CTX("PC [R15] [0x%08X] program counter", pc);
    DBGPRINTLN_CTX("PSR [0x%08X] program status register", psr);
    DBGPRINTLN_CTX("------------------------------");
    DBGPRINTLN_CTX("UFSR [0x%04X]", (SCB->CFSR >> 15) & 0xFFFF);
    1a9e:	4c21      	ldr	r4, [pc, #132]	; (1b24 <usagefault_trace_stack+0xb8>)
    DBGPRINTLN_CTX("R0 [0x%08X]", r0);
    1aa0:	f002 fb0c 	bl	40bc <printf>
    DBGPRINTLN_CTX("R1 [0x%08X]", r1);
    1aa4:	9a01      	ldr	r2, [sp, #4]
    1aa6:	491c      	ldr	r1, [pc, #112]	; (1b18 <usagefault_trace_stack+0xac>)
    1aa8:	481f      	ldr	r0, [pc, #124]	; (1b28 <usagefault_trace_stack+0xbc>)
    1aaa:	f002 fb07 	bl	40bc <printf>
    DBGPRINTLN_CTX("R2 [0x%08X]", r2);
    1aae:	9a02      	ldr	r2, [sp, #8]
    1ab0:	4919      	ldr	r1, [pc, #100]	; (1b18 <usagefault_trace_stack+0xac>)
    1ab2:	481e      	ldr	r0, [pc, #120]	; (1b2c <usagefault_trace_stack+0xc0>)
    1ab4:	f002 fb02 	bl	40bc <printf>
    DBGPRINTLN_CTX("R3 [0x%08X]", r3);
    1ab8:	9a03      	ldr	r2, [sp, #12]
    1aba:	4917      	ldr	r1, [pc, #92]	; (1b18 <usagefault_trace_stack+0xac>)
    1abc:	481c      	ldr	r0, [pc, #112]	; (1b30 <usagefault_trace_stack+0xc4>)
    1abe:	f002 fafd 	bl	40bc <printf>
    DBGPRINTLN_CTX("R12 [0x%08X]", r12);
    1ac2:	9a04      	ldr	r2, [sp, #16]
    1ac4:	4914      	ldr	r1, [pc, #80]	; (1b18 <usagefault_trace_stack+0xac>)
    1ac6:	481b      	ldr	r0, [pc, #108]	; (1b34 <usagefault_trace_stack+0xc8>)
    1ac8:	f002 faf8 	bl	40bc <printf>
    DBGPRINTLN_CTX("LR [R14] [0x%08X] call return", lr);
    1acc:	9a05      	ldr	r2, [sp, #20]
    1ace:	4912      	ldr	r1, [pc, #72]	; (1b18 <usagefault_trace_stack+0xac>)
    1ad0:	4819      	ldr	r0, [pc, #100]	; (1b38 <usagefault_trace_stack+0xcc>)
    1ad2:	f002 faf3 	bl	40bc <printf>
    DBGPRINTLN_CTX("PC [R15] [0x%08X] program counter", pc);
    1ad6:	9a06      	ldr	r2, [sp, #24]
    1ad8:	490f      	ldr	r1, [pc, #60]	; (1b18 <usagefault_trace_stack+0xac>)
    1ada:	4818      	ldr	r0, [pc, #96]	; (1b3c <usagefault_trace_stack+0xd0>)
    1adc:	f002 faee 	bl	40bc <printf>
    DBGPRINTLN_CTX("PSR [0x%08X] program status register", psr);
    1ae0:	9a07      	ldr	r2, [sp, #28]
    1ae2:	490d      	ldr	r1, [pc, #52]	; (1b18 <usagefault_trace_stack+0xac>)
    1ae4:	4816      	ldr	r0, [pc, #88]	; (1b40 <usagefault_trace_stack+0xd4>)
    1ae6:	f002 fae9 	bl	40bc <printf>
    DBGPRINTLN_CTX("------------------------------");
    1aea:	490b      	ldr	r1, [pc, #44]	; (1b18 <usagefault_trace_stack+0xac>)
    1aec:	4815      	ldr	r0, [pc, #84]	; (1b44 <usagefault_trace_stack+0xd8>)
    1aee:	f002 fae5 	bl	40bc <printf>
    DBGPRINTLN_CTX("UFSR [0x%04X]", (SCB->CFSR >> 15) & 0xFFFF);
    1af2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1af4:	4908      	ldr	r1, [pc, #32]	; (1b18 <usagefault_trace_stack+0xac>)
    1af6:	4814      	ldr	r0, [pc, #80]	; (1b48 <usagefault_trace_stack+0xdc>)
    1af8:	f3c2 32cf 	ubfx	r2, r2, #15, #16
    1afc:	f002 fade 	bl	40bc <printf>
    DBGPRINTLN_CTX("ICSR [0x%08X]", SCB->ICSR);
    1b00:	6862      	ldr	r2, [r4, #4]
    1b02:	4905      	ldr	r1, [pc, #20]	; (1b18 <usagefault_trace_stack+0xac>)
    1b04:	4811      	ldr	r0, [pc, #68]	; (1b4c <usagefault_trace_stack+0xe0>)
    1b06:	f002 fad9 	bl	40bc <printf>
    1b0a:	f3ef 8208 	mrs	r2, MSP
    DBGPRINTLN_CTX("MSP [0x%08X]", __get_MSP());
    1b0e:	4902      	ldr	r1, [pc, #8]	; (1b18 <usagefault_trace_stack+0xac>)
    1b10:	480f      	ldr	r0, [pc, #60]	; (1b50 <usagefault_trace_stack+0xe4>)
    1b12:	f002 fad3 	bl	40bc <printf>

    while(1);
    1b16:	e7fe      	b.n	1b16 <usagefault_trace_stack+0xaa>
    1b18:	00004375 	.word	0x00004375
    1b1c:	000045b2 	.word	0x000045b2
    1b20:	000043fd 	.word	0x000043fd
    1b24:	e000ed00 	.word	0xe000ed00
    1b28:	00004412 	.word	0x00004412
    1b2c:	00004427 	.word	0x00004427
    1b30:	0000443c 	.word	0x0000443c
    1b34:	00004451 	.word	0x00004451
    1b38:	00004467 	.word	0x00004467
    1b3c:	0000448e 	.word	0x0000448e
    1b40:	000044b9 	.word	0x000044b9
    1b44:	000044e7 	.word	0x000044e7
    1b48:	000045d5 	.word	0x000045d5
    1b4c:	00004526 	.word	0x00004526
    1b50:	0000453d 	.word	0x0000453d

00001b54 <msc_init>:
#include "msc.h"

void msc_init()
{
    MSC->CTRL |= MSC_CTRL_CLKDISFAULTEN | MSC_CTRL_ADDRFAULTEN | MSC_CTRL_IFCREADCLEAR;
    1b54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1b58:	681a      	ldr	r2, [r3, #0]
    1b5a:	f042 020b 	orr.w	r2, r2, #11
    1b5e:	601a      	str	r2, [r3, #0]
    MSC->BOOTLOADERCTRL = MSC_BOOTLOADERCTRL_BLWDIS;
    1b60:	2202      	movs	r2, #2
    1b62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    MSC->READCTRL |= MSC_READCTRL_SCBTP;
    1b66:	685a      	ldr	r2, [r3, #4]
    1b68:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1b6c:	605a      	str	r2, [r3, #4]
    MSC->WRITECTRL = MSC_WRITECTRL_RWWEN;
    1b6e:	2220      	movs	r2, #32
    1b70:	609a      	str	r2, [r3, #8]
    MSC->CACHECMD = MSC_CACHECMD_INVCACHE;
    1b72:	2201      	movs	r2, #1
    1b74:	645a      	str	r2, [r3, #68]	; 0x44
}
    1b76:	4770      	bx	lr

00001b78 <msc_config_waitstates>:
void msc_config_waitstates(uint32_t ulFrequency)
{
    if(ulFrequency <= 18000000)
    1b78:	4b21      	ldr	r3, [pc, #132]	; (1c00 <msc_config_waitstates+0x88>)
    1b7a:	4298      	cmp	r0, r3
    1b7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1b80:	d815      	bhi.n	1bae <msc_config_waitstates+0x36>
        MSC->READCTRL = (MSC->READCTRL & ~_MSC_READCTRL_MODE_MASK) | MSC_READCTRL_MODE_WS0;
    1b82:	685a      	ldr	r2, [r3, #4]
    1b84:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
    else if(ulFrequency <= 36000000)
        MSC->READCTRL = (MSC->READCTRL & ~_MSC_READCTRL_MODE_MASK) | MSC_READCTRL_MODE_WS1;
    1b88:	605a      	str	r2, [r3, #4]
        MSC->READCTRL = (MSC->READCTRL & ~_MSC_READCTRL_MODE_MASK) | MSC_READCTRL_MODE_WS2;
    else
        MSC->READCTRL = (MSC->READCTRL & ~_MSC_READCTRL_MODE_MASK) | MSC_READCTRL_MODE_WS3;

    if(ulFrequency <= 50000000)
        MSC->CTRL &= ~MSC_CTRL_WAITMODE_WS1;
    1b8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1b8e:	6813      	ldr	r3, [r2, #0]
    1b90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    1b94:	6013      	str	r3, [r2, #0]
    else
        MSC->CTRL |= MSC_CTRL_WAITMODE_WS1;

    if(ulFrequency <= 38000000)
    1b96:	4b1b      	ldr	r3, [pc, #108]	; (1c04 <msc_config_waitstates+0x8c>)
    1b98:	4298      	cmp	r0, r3
    1b9a:	d928      	bls.n	1bee <msc_config_waitstates+0x76>
        MSC->RAMCTRL &= ~(MSC_RAMCTRL_RAM2WSEN | MSC_RAMCTRL_RAM2PREFETCHEN | MSC_RAMCTRL_RAM1WSEN | MSC_RAMCTRL_RAM1PREFETCHEN | MSC_RAMCTRL_RAMWSEN | MSC_RAMCTRL_RAMPREFETCHEN);
    else
        MSC->RAMCTRL |= MSC_RAMCTRL_RAM2WSEN | MSC_RAMCTRL_RAM2PREFETCHEN | MSC_RAMCTRL_RAM1WSEN | MSC_RAMCTRL_RAM1PREFETCHEN | MSC_RAMCTRL_RAMWSEN | MSC_RAMCTRL_RAMPREFETCHEN;
    1b9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1ba0:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
    1ba4:	f043 1306 	orr.w	r3, r3, #393222	; 0x60006
    1ba8:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
    1bac:	e025      	b.n	1bfa <msc_config_waitstates+0x82>
    else if(ulFrequency <= 36000000)
    1bae:	4a16      	ldr	r2, [pc, #88]	; (1c08 <msc_config_waitstates+0x90>)
    1bb0:	4290      	cmp	r0, r2
    1bb2:	d805      	bhi.n	1bc0 <msc_config_waitstates+0x48>
        MSC->READCTRL = (MSC->READCTRL & ~_MSC_READCTRL_MODE_MASK) | MSC_READCTRL_MODE_WS1;
    1bb4:	685a      	ldr	r2, [r3, #4]
    1bb6:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
    1bba:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    1bbe:	e7e3      	b.n	1b88 <msc_config_waitstates+0x10>
    else if(ulFrequency <= 54000000)
    1bc0:	4a12      	ldr	r2, [pc, #72]	; (1c0c <msc_config_waitstates+0x94>)
    1bc2:	4290      	cmp	r0, r2
        MSC->READCTRL = (MSC->READCTRL & ~_MSC_READCTRL_MODE_MASK) | MSC_READCTRL_MODE_WS2;
    1bc4:	685a      	ldr	r2, [r3, #4]
    else if(ulFrequency <= 54000000)
    1bc6:	d80e      	bhi.n	1be6 <msc_config_waitstates+0x6e>
        MSC->READCTRL = (MSC->READCTRL & ~_MSC_READCTRL_MODE_MASK) | MSC_READCTRL_MODE_WS2;
    1bc8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
    1bcc:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
    1bd0:	605a      	str	r2, [r3, #4]
    if(ulFrequency <= 50000000)
    1bd2:	4b0f      	ldr	r3, [pc, #60]	; (1c10 <msc_config_waitstates+0x98>)
    1bd4:	4298      	cmp	r0, r3
    1bd6:	d9d8      	bls.n	1b8a <msc_config_waitstates+0x12>
        MSC->CTRL |= MSC_CTRL_WAITMODE_WS1;
    1bd8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1bdc:	6813      	ldr	r3, [r2, #0]
    1bde:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    1be2:	6013      	str	r3, [r2, #0]
    if(ulFrequency <= 38000000)
    1be4:	e7da      	b.n	1b9c <msc_config_waitstates+0x24>
        MSC->READCTRL = (MSC->READCTRL & ~_MSC_READCTRL_MODE_MASK) | MSC_READCTRL_MODE_WS3;
    1be6:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
    1bea:	605a      	str	r2, [r3, #4]
    if(ulFrequency <= 50000000)
    1bec:	e7f4      	b.n	1bd8 <msc_config_waitstates+0x60>
        MSC->RAMCTRL &= ~(MSC_RAMCTRL_RAM2WSEN | MSC_RAMCTRL_RAM2PREFETCHEN | MSC_RAMCTRL_RAM1WSEN | MSC_RAMCTRL_RAM1PREFETCHEN | MSC_RAMCTRL_RAMWSEN | MSC_RAMCTRL_RAMPREFETCHEN);
    1bee:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
    1bf2:	f023 1306 	bic.w	r3, r3, #393222	; 0x60006
    1bf6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
        MSC->RAMCTRL |= MSC_RAMCTRL_RAM2WSEN | MSC_RAMCTRL_RAM2PREFETCHEN | MSC_RAMCTRL_RAM1WSEN | MSC_RAMCTRL_RAM1PREFETCHEN | MSC_RAMCTRL_RAMWSEN | MSC_RAMCTRL_RAMPREFETCHEN;
    1bfa:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    1bfe:	4770      	bx	lr
    1c00:	0112a880 	.word	0x0112a880
    1c04:	0243d580 	.word	0x0243d580
    1c08:	02255100 	.word	0x02255100
    1c0c:	0337f980 	.word	0x0337f980
    1c10:	02faf080 	.word	0x02faf080

00001c14 <qspi_flash_cmd.part.1>:
    
    while(!(QSPI0->CONFIG & QSPI_CONFIG_IDLE));
}


void qspi_flash_cmd(uint8_t ubOpCode, uint32_t ulAddress, uint8_t ubAddressSize, uint8_t ubModeBits, uint8_t ubDummyCycles, uint8_t *pubSrc, uint8_t ubSrcSize, uint8_t *pubDst, uint8_t ubDstSize)
    1c14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        return;
        
    if(ubDstSize && !pubDst)
        return;

    while(!(QSPI0->CONFIG & QSPI_CONFIG_IDLE));
    1c16:	4d59      	ldr	r5, [pc, #356]	; (1d7c <qspi_flash_cmd.part.1+0x168>)
void qspi_flash_cmd(uint8_t ubOpCode, uint32_t ulAddress, uint8_t ubAddressSize, uint8_t ubModeBits, uint8_t ubDummyCycles, uint8_t *pubSrc, uint8_t ubSrcSize, uint8_t *pubDst, uint8_t ubDstSize)
    1c18:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
    1c1c:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
    while(!(QSPI0->CONFIG & QSPI_CONFIG_IDLE));
    1c20:	682f      	ldr	r7, [r5, #0]
    1c22:	2f00      	cmp	r7, #0
    1c24:	dafc      	bge.n	1c20 <qspi_flash_cmd.part.1+0xc>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1c26:	f3ef 8710 	mrs	r7, PRIMASK

    return 1;
}
static inline uint32_t __iDisableIRQRetVal()
{
    __asm__ volatile ("cpsid i" ::: "memory");
    1c2a:	b672      	cpsid	i
    
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    {
        QSPI0->CONFIG &= ~(QSPI_CONFIG_ENBDIRACCCTLR | QSPI_CONFIG_ENBSPI);
    1c2c:	f8d5 e000 	ldr.w	lr, [r5]
    1c30:	f02e 0e81 	bic.w	lr, lr, #129	; 0x81
    1c34:	f8c5 e000 	str.w	lr, [r5]
        QSPI0->CONFIG |= QSPI_CONFIG_ENBSPI;
    1c38:	f8d5 e000 	ldr.w	lr, [r5]
    1c3c:	f04e 0e01 	orr.w	lr, lr, #1
    1c40:	f8c5 e000 	str.w	lr, [r5]
        
        QSPI0->FLASHCMDCTRL = ((uint32_t)ubOpCode << _QSPI_FLASHCMDCTRL_CMDOPCODE_SHIFT) | ((uint32_t)ubDummyCycles << _QSPI_FLASHCMDCTRL_NUMDUMMYCYCLES_SHIFT) | (!!ubModeBits << _QSPI_FLASHCMDCTRL_ENBMODEBIT_SHIFT);
    1c44:	f89d 5020 	ldrb.w	r5, [sp, #32]
    1c48:	2b00      	cmp	r3, #0
    1c4a:	ea4f 15c5 	mov.w	r5, r5, lsl #7
    1c4e:	ea45 6500 	orr.w	r5, r5, r0, lsl #24
    1c52:	bf14      	ite	ne
    1c54:	f44f 2080 	movne.w	r0, #262144	; 0x40000
    1c58:	2000      	moveq	r0, #0
    1c5a:	4305      	orrs	r5, r0
    1c5c:	4847      	ldr	r0, [pc, #284]	; (1d7c <qspi_flash_cmd.part.1+0x168>)
    1c5e:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90

        if(ubAddressSize)
    1c62:	b152      	cbz	r2, 1c7a <qspi_flash_cmd.part.1+0x66>
        {
            QSPI0->FLASHCMDCTRL |= QSPI_FLASHCMDCTRL_ENBCOMDADDR | ((uint32_t)(ubAddressSize - 1) << _QSPI_FLASHCMDCTRL_NUMADDRBYTES_SHIFT);
    1c64:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
    1c68:	3a01      	subs	r2, #1
    1c6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    1c6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    1c72:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
            QSPI0->FLASHCMDADDR = ulAddress;
    1c76:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
        }

        if (ubSrcSize)
    1c7a:	b1b6      	cbz	r6, 1caa <qspi_flash_cmd.part.1+0x96>
        {
            uint32_t pulBuf[2] = { 0, 0 };
    1c7c:	2300      	movs	r3, #0
    1c7e:	e9cd 3300 	strd	r3, r3, [sp]
            uint8_t *pubBuf = (uint8_t *)pulBuf;

            QSPI0->FLASHCMDCTRL |= QSPI_FLASHCMDCTRL_ENBWRITEDATA | ((uint32_t)(ubSrcSize - 1) << _QSPI_FLASHCMDCTRL_NUMWRDATABYTES_SHIFT);
    1c82:	493e      	ldr	r1, [pc, #248]	; (1d7c <qspi_flash_cmd.part.1+0x168>)
    1c84:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
    1c88:	1e70      	subs	r0, r6, #1
    1c8a:	ea42 3200 	orr.w	r2, r2, r0, lsl #12
    1c8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    1c92:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90

            for (uint8_t i = 0; i < ubSrcSize; i++)
    1c96:	b2da      	uxtb	r2, r3
    1c98:	4296      	cmp	r6, r2
    1c9a:	d83c      	bhi.n	1d16 <qspi_flash_cmd.part.1+0x102>
                pubBuf[i] = pubSrc[i];

            QSPI0->FLASHWRDATALOWER = pulBuf[0];
    1c9c:	4b37      	ldr	r3, [pc, #220]	; (1d7c <qspi_flash_cmd.part.1+0x168>)
    1c9e:	9a00      	ldr	r2, [sp, #0]
    1ca0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
            QSPI0->FLASHWRDATAUPPER = pulBuf[1];
    1ca4:	9a01      	ldr	r2, [sp, #4]
    1ca6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        }
        
        if (ubDstSize)
    1caa:	b1bc      	cbz	r4, 1cdc <qspi_flash_cmd.part.1+0xc8>
        {
            QSPI0->FLASHCMDCTRL |= QSPI_FLASHCMDCTRL_ENBREADDATA;
    1cac:	4b33      	ldr	r3, [pc, #204]	; (1d7c <qspi_flash_cmd.part.1+0x168>)
    1cae:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    1cb2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
    1cb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

            if(ubDstSize > 8)
    1cba:	2c08      	cmp	r4, #8
                QSPI0->FLASHCMDCTRL |= QSPI_FLASHCMDCTRL_STIGMEMBANKEN | ((uint32_t)(ubDstSize - 9) << _QSPI_FLASHCMDCTRL_NUMRDDATABYTES_SHIFT);
    1cbc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    1cc0:	bf85      	ittet	hi
    1cc2:	f1a4 0109 	subhi.w	r1, r4, #9
    1cc6:	ea42 5201 	orrhi.w	r2, r2, r1, lsl #20
            else
                QSPI0->FLASHCMDCTRL |= ((uint32_t)(ubDstSize - 1) << _QSPI_FLASHCMDCTRL_NUMRDDATABYTES_SHIFT);
    1cca:	f104 31ff 	addls.w	r1, r4, #4294967295	; 0xffffffff
                QSPI0->FLASHCMDCTRL |= QSPI_FLASHCMDCTRL_STIGMEMBANKEN | ((uint32_t)(ubDstSize - 9) << _QSPI_FLASHCMDCTRL_NUMRDDATABYTES_SHIFT);
    1cce:	f042 0204 	orrhi.w	r2, r2, #4
                QSPI0->FLASHCMDCTRL |= ((uint32_t)(ubDstSize - 1) << _QSPI_FLASHCMDCTRL_NUMRDDATABYTES_SHIFT);
    1cd2:	bf98      	it	ls
    1cd4:	ea42 5201 	orrls.w	r2, r2, r1, lsl #20
    1cd8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        QSPI0->FLASHCMDCTRL |= QSPI_FLASHCMDCTRL_CMDEXEC;
    1cdc:	4b27      	ldr	r3, [pc, #156]	; (1d7c <qspi_flash_cmd.part.1+0x168>)
    1cde:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    1ce2:	f042 0201 	orr.w	r2, r2, #1
    1ce6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        while(QSPI0->FLASHCMDCTRL & QSPI_FLASHCMDCTRL_CMDEXECSTATUS);
    1cea:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    1cee:	0790      	lsls	r0, r2, #30
    1cf0:	d4fb      	bmi.n	1cea <qspi_flash_cmd.part.1+0xd6>

        if (ubDstSize)
    1cf2:	2c00      	cmp	r4, #0
    1cf4:	d13d      	bne.n	1d72 <qspi_flash_cmd.part.1+0x15e>

            for (uint8_t i = 0; i < ubDataLeft; i++)
                pubDstTemp[i] = pubBuf[i];
        }

        while(!(QSPI0->CONFIG & QSPI_CONFIG_IDLE));
    1cf6:	4b21      	ldr	r3, [pc, #132]	; (1d7c <qspi_flash_cmd.part.1+0x168>)
    1cf8:	681a      	ldr	r2, [r3, #0]
    1cfa:	2a00      	cmp	r2, #0
    1cfc:	dafc      	bge.n	1cf8 <qspi_flash_cmd.part.1+0xe4>

        QSPI0->CONFIG &= ~QSPI_CONFIG_ENBSPI;
    1cfe:	681a      	ldr	r2, [r3, #0]
    1d00:	f022 0201 	bic.w	r2, r2, #1
    1d04:	601a      	str	r2, [r3, #0]
        QSPI0->CONFIG |= QSPI_CONFIG_ENBDIRACCCTLR | QSPI_CONFIG_ENBSPI;
    1d06:	681a      	ldr	r2, [r3, #0]
    1d08:	f042 0281 	orr.w	r2, r2, #129	; 0x81
    1d0c:	601a      	str	r2, [r3, #0]
    __asm__ volatile ("cpsid i" ::: "memory");
    (void)__s;
}
static inline void __iRestore(const uint32_t *__s)
{
    if(!*__s)
    1d0e:	b907      	cbnz	r7, 1d12 <qspi_flash_cmd.part.1+0xfe>
        __asm__ volatile ("cpsie i" ::: "memory");
    1d10:	b662      	cpsie	i
    }
}
    1d12:	b003      	add	sp, #12
    1d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
                pubBuf[i] = pubSrc[i];
    1d16:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1d18:	5cd2      	ldrb	r2, [r2, r3]
    1d1a:	f80d 2003 	strb.w	r2, [sp, r3]
    1d1e:	3301      	adds	r3, #1
    1d20:	e7b9      	b.n	1c96 <qspi_flash_cmd.part.1+0x82>
                QSPI0->FLASHCOMMANDCTRLMEM = (uint32_t)(ubDstSize - ubDataLeft) << _QSPI_FLASHCOMMANDCTRLMEM_MEMBANKADDR_SHIFT;
    1d22:	0500      	lsls	r0, r0, #20
    1d24:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
                QSPI0->FLASHCOMMANDCTRLMEM |= QSPI_FLASHCOMMANDCTRLMEM_TRIGGERMEMBANKREQ;
    1d28:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
    1d2c:	f041 0101 	orr.w	r1, r1, #1
    1d30:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
                while(QSPI0->FLASHCOMMANDCTRLMEM & QSPI_FLASHCOMMANDCTRLMEM_MEMBANKREQINPROGRESS);
    1d34:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
    1d38:	0789      	lsls	r1, r1, #30
    1d3a:	d4fb      	bmi.n	1d34 <qspi_flash_cmd.part.1+0x120>
                *pubDstTemp = (QSPI0->FLASHCOMMANDCTRLMEM & _QSPI_FLASHCOMMANDCTRLMEM_MEMBANKREADDATA_MASK) >> _QSPI_FLASHCOMMANDCTRLMEM_MEMBANKREADDATA_SHIFT;
    1d3c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
    1d40:	0a09      	lsrs	r1, r1, #8
    1d42:	f802 1b01 	strb.w	r1, [r2], #1
                pubDstTemp++;
    1d46:	1aa9      	subs	r1, r5, r2
            while(ubDstSize > 8 && ubDstSize - ubDataLeft < 8)
    1d48:	2c08      	cmp	r4, #8
    1d4a:	b2c9      	uxtb	r1, r1
    1d4c:	d902      	bls.n	1d54 <qspi_flash_cmd.part.1+0x140>
    1d4e:	1a60      	subs	r0, r4, r1
    1d50:	2807      	cmp	r0, #7
    1d52:	dde6      	ble.n	1d22 <qspi_flash_cmd.part.1+0x10e>
            pulBuf[0] = QSPI0->FLASHRDDATALOWER;
    1d54:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
    1d58:	9000      	str	r0, [sp, #0]
            pulBuf[1] = QSPI0->FLASHRDDATAUPPER;
    1d5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    1d5e:	9301      	str	r3, [sp, #4]
    1d60:	2300      	movs	r3, #0
            for (uint8_t i = 0; i < ubDataLeft; i++)
    1d62:	b2d8      	uxtb	r0, r3
    1d64:	4281      	cmp	r1, r0
    1d66:	d9c6      	bls.n	1cf6 <qspi_flash_cmd.part.1+0xe2>
                pubDstTemp[i] = pubBuf[i];
    1d68:	f81d 0003 	ldrb.w	r0, [sp, r3]
    1d6c:	54d0      	strb	r0, [r2, r3]
    1d6e:	3301      	adds	r3, #1
    1d70:	e7f7      	b.n	1d62 <qspi_flash_cmd.part.1+0x14e>
            uint8_t *pubDstTemp = pubDst;
    1d72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    1d74:	4b01      	ldr	r3, [pc, #4]	; (1d7c <qspi_flash_cmd.part.1+0x168>)
    1d76:	1915      	adds	r5, r2, r4
    1d78:	e7e5      	b.n	1d46 <qspi_flash_cmd.part.1+0x132>
    1d7a:	bf00      	nop
    1d7c:	4001c400 	.word	0x4001c400

00001d80 <qspi_flash_cmd>:
{
    1d80:	b4f0      	push	{r4, r5, r6, r7}
    if(ubAddressSize > 4)
    1d82:	2a04      	cmp	r2, #4
{
    1d84:	f89d 6010 	ldrb.w	r6, [sp, #16]
    1d88:	9f05      	ldr	r7, [sp, #20]
    1d8a:	f89d 4018 	ldrb.w	r4, [sp, #24]
    1d8e:	f8dd c01c 	ldr.w	ip, [sp, #28]
    1d92:	f89d 5020 	ldrb.w	r5, [sp, #32]
    if(ubAddressSize > 4)
    1d96:	d813      	bhi.n	1dc0 <qspi_flash_cmd+0x40>
    if(ubDummyCycles > 31)
    1d98:	2e1f      	cmp	r6, #31
    1d9a:	d811      	bhi.n	1dc0 <qspi_flash_cmd+0x40>
    if(ubSrcSize > 8)
    1d9c:	2c08      	cmp	r4, #8
    1d9e:	d80f      	bhi.n	1dc0 <qspi_flash_cmd+0x40>
    if(ubSrcSize && !pubSrc)
    1da0:	b104      	cbz	r4, 1da4 <qspi_flash_cmd+0x24>
    1da2:	b16f      	cbz	r7, 1dc0 <qspi_flash_cmd+0x40>
    if(ubDstSize > 16)
    1da4:	2d10      	cmp	r5, #16
    1da6:	d80b      	bhi.n	1dc0 <qspi_flash_cmd+0x40>
    if(ubDstSize && !pubDst)
    1da8:	b115      	cbz	r5, 1db0 <qspi_flash_cmd+0x30>
    1daa:	f1bc 0f00 	cmp.w	ip, #0
    1dae:	d007      	beq.n	1dc0 <qspi_flash_cmd+0x40>
    1db0:	e9cd c507 	strd	ip, r5, [sp, #28]
    1db4:	e9cd 7405 	strd	r7, r4, [sp, #20]
    1db8:	9604      	str	r6, [sp, #16]
}
    1dba:	bcf0      	pop	{r4, r5, r6, r7}
    1dbc:	f7ff bf2a 	b.w	1c14 <qspi_flash_cmd.part.1>
    1dc0:	bcf0      	pop	{r4, r5, r6, r7}
    1dc2:	4770      	bx	lr

00001dc4 <qspi_flash_reset>:
    
    qspi_flash_unprotect_all_blocks(); // Unprotect all blocks to be able to read/write
    qspi_flash_write_status_config(qspi_flash_read_status(), qspi_flash_read_config() | 0x02); // Enable SIO2 and SIO3
}
void qspi_flash_reset()
{
    1dc4:	b510      	push	{r4, lr}
    1dc6:	b086      	sub	sp, #24
    1dc8:	2400      	movs	r4, #0
    1dca:	4623      	mov	r3, r4
    1dcc:	4622      	mov	r2, r4
    1dce:	4621      	mov	r1, r4
    1dd0:	e9cd 4403 	strd	r4, r4, [sp, #12]
    1dd4:	e9cd 4401 	strd	r4, r4, [sp, #4]
    1dd8:	9400      	str	r4, [sp, #0]
    1dda:	2066      	movs	r0, #102	; 0x66
    1ddc:	f7ff ff1a 	bl	1c14 <qspi_flash_cmd.part.1>
    if(ubDstSize && !pubDst)
    1de0:	e9cd 4403 	strd	r4, r4, [sp, #12]
    1de4:	e9cd 4401 	strd	r4, r4, [sp, #4]
    1de8:	9400      	str	r4, [sp, #0]
    1dea:	4623      	mov	r3, r4
    1dec:	4622      	mov	r2, r4
    1dee:	4621      	mov	r1, r4
    1df0:	2099      	movs	r0, #153	; 0x99
    1df2:	f7ff ff0f 	bl	1c14 <qspi_flash_cmd.part.1>
    qspi_flash_cmd(QSPI_FLASH_CMD_RESET_ENABLE, 0x00000000, 0, 0, 0, NULL, 0, NULL, 0);
    qspi_flash_cmd(QSPI_FLASH_CMD_RESET, 0x00000000, 0, 0, 0, NULL, 0, NULL, 0);
}
    1df6:	b006      	add	sp, #24
    1df8:	bd10      	pop	{r4, pc}

00001dfa <qspi_flash_read_status>:
uint8_t qspi_flash_read_status()
{
    1dfa:	b500      	push	{lr}
    1dfc:	b089      	sub	sp, #36	; 0x24
    if(ubDstSize && !pubDst)
    1dfe:	2301      	movs	r3, #1
    1e00:	9304      	str	r3, [sp, #16]
    1e02:	f10d 031f 	add.w	r3, sp, #31
    1e06:	9303      	str	r3, [sp, #12]
    1e08:	2300      	movs	r3, #0
    1e0a:	e9cd 3301 	strd	r3, r3, [sp, #4]
    1e0e:	9300      	str	r3, [sp, #0]
    1e10:	461a      	mov	r2, r3
    1e12:	4619      	mov	r1, r3
    1e14:	2005      	movs	r0, #5
    1e16:	f7ff fefd 	bl	1c14 <qspi_flash_cmd.part.1>
    uint8_t ubStatus;

    qspi_flash_cmd(QSPI_FLASH_CMD_READ_STATUS, 0x00000000, 0, 0, 0, NULL, 0, &ubStatus, 1);

    return ubStatus;
}
    1e1a:	f89d 001f 	ldrb.w	r0, [sp, #31]
    1e1e:	b009      	add	sp, #36	; 0x24
    1e20:	f85d fb04 	ldr.w	pc, [sp], #4

00001e24 <qspi_flash_read_config>:
uint8_t qspi_flash_read_config()
{
    1e24:	b500      	push	{lr}
    1e26:	b089      	sub	sp, #36	; 0x24
    if(ubDstSize && !pubDst)
    1e28:	2301      	movs	r3, #1
    1e2a:	9304      	str	r3, [sp, #16]
    1e2c:	f10d 031f 	add.w	r3, sp, #31
    1e30:	9303      	str	r3, [sp, #12]
    1e32:	2300      	movs	r3, #0
    1e34:	e9cd 3301 	strd	r3, r3, [sp, #4]
    1e38:	9300      	str	r3, [sp, #0]
    1e3a:	461a      	mov	r2, r3
    1e3c:	4619      	mov	r1, r3
    1e3e:	2035      	movs	r0, #53	; 0x35
    1e40:	f7ff fee8 	bl	1c14 <qspi_flash_cmd.part.1>
    uint8_t ubConfig;

    qspi_flash_cmd(QSPI_FLASH_CMD_READ_CFG, 0x00000000, 0, 0, 0, NULL, 0, &ubConfig, 1);

    return ubConfig;
}
    1e44:	f89d 001f 	ldrb.w	r0, [sp, #31]
    1e48:	b009      	add	sp, #36	; 0x24
    1e4a:	f85d fb04 	ldr.w	pc, [sp], #4

00001e4e <qspi_flash_write_enable>:
{
	while(qspi_flash_read_status() & 0x01)
		delay_ms(1);
}
void qspi_flash_write_enable()
{
    1e4e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    1e50:	2300      	movs	r3, #0
    1e52:	e9cd 3303 	strd	r3, r3, [sp, #12]
    1e56:	e9cd 3301 	strd	r3, r3, [sp, #4]
    1e5a:	9300      	str	r3, [sp, #0]
    1e5c:	461a      	mov	r2, r3
    1e5e:	4619      	mov	r1, r3
    1e60:	2006      	movs	r0, #6
    1e62:	f7ff fed7 	bl	1c14 <qspi_flash_cmd.part.1>
    qspi_flash_cmd(QSPI_FLASH_CMD_WRITE_ENABLE, 0x00000000, 0, 0, 0, NULL, 0, NULL, 0);

	while(!(qspi_flash_read_status() & 0x02))
    1e66:	f7ff ffc8 	bl	1dfa <qspi_flash_read_status>
    1e6a:	0783      	lsls	r3, r0, #30
    1e6c:	d502      	bpl.n	1e74 <qspi_flash_write_enable+0x26>
		delay_ms(1);
}
    1e6e:	b007      	add	sp, #28
    1e70:	f85d fb04 	ldr.w	pc, [sp], #4
		delay_ms(1);
    1e74:	2001      	movs	r0, #1
    1e76:	2100      	movs	r1, #0
    1e78:	f001 fa46 	bl	3308 <delay_ms>
    1e7c:	e7f3      	b.n	1e66 <qspi_flash_write_enable+0x18>

00001e7e <qspi_flash_write_status_config>:
{
    1e7e:	b500      	push	{lr}
    1e80:	b089      	sub	sp, #36	; 0x24
    uint8_t ubBuf[] = { ubStatus, ubConfig };
    1e82:	f88d 001c 	strb.w	r0, [sp, #28]
    1e86:	f88d 101d 	strb.w	r1, [sp, #29]
    qspi_flash_write_enable();
    1e8a:	f7ff ffe0 	bl	1e4e <qspi_flash_write_enable>
    if(ubDstSize && !pubDst)
    1e8e:	2202      	movs	r2, #2
    1e90:	2300      	movs	r3, #0
    1e92:	9202      	str	r2, [sp, #8]
    1e94:	aa07      	add	r2, sp, #28
    1e96:	e9cd 3200 	strd	r3, r2, [sp]
    1e9a:	e9cd 3303 	strd	r3, r3, [sp, #12]
    1e9e:	461a      	mov	r2, r3
    1ea0:	4619      	mov	r1, r3
    1ea2:	2001      	movs	r0, #1
    1ea4:	f7ff feb6 	bl	1c14 <qspi_flash_cmd.part.1>
}
    1ea8:	b009      	add	sp, #36	; 0x24
    1eaa:	f85d fb04 	ldr.w	pc, [sp], #4

00001eae <qspi_flash_read_jedec_id>:
    qspi_flash_cmd(QSPI_FLASH_CMD_CHIP_ERASE, 0x00000000, 0, 0, 0, NULL, 0, NULL, 0);

    qspi_flash_busy_wait();
}
uint32_t qspi_flash_read_jedec_id()
{
    1eae:	b500      	push	{lr}
    1eb0:	b089      	sub	sp, #36	; 0x24
    1eb2:	2203      	movs	r2, #3
	uint8_t ubBuf[] = { 0x00, 0x00, 0x00 };
    1eb4:	2300      	movs	r3, #0
    1eb6:	9204      	str	r2, [sp, #16]
    1eb8:	aa07      	add	r2, sp, #28
    1eba:	e9cd 3202 	strd	r3, r2, [sp, #8]
    1ebe:	e9cd 3300 	strd	r3, r3, [sp]
    1ec2:	461a      	mov	r2, r3
    1ec4:	4619      	mov	r1, r3
    1ec6:	209f      	movs	r0, #159	; 0x9f
    1ec8:	f8ad 301c 	strh.w	r3, [sp, #28]
    1ecc:	f88d 301e 	strb.w	r3, [sp, #30]
    if(ubDstSize && !pubDst)
    1ed0:	f7ff fea0 	bl	1c14 <qspi_flash_cmd.part.1>

    qspi_flash_cmd(QSPI_FLASH_CMD_JEDEC_READ_ID, 0x00000000, 0, 0, 0, NULL, 0, ubBuf, 3);

	return ((uint32_t)ubBuf[0] << 16) | ((uint32_t)ubBuf[1] << 8) | (uint32_t)ubBuf[2];
    1ed4:	f89d 301d 	ldrb.w	r3, [sp, #29]
    1ed8:	f89d 001c 	ldrb.w	r0, [sp, #28]
    1edc:	021b      	lsls	r3, r3, #8
    1ede:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    1ee2:	f89d 001e 	ldrb.w	r0, [sp, #30]
}
    1ee6:	4318      	orrs	r0, r3
    1ee8:	b009      	add	sp, #36	; 0x24
    1eea:	f85d fb04 	ldr.w	pc, [sp], #4

00001eee <qspi_flash_read_security>:
void qspi_flash_read_security(uint16_t usAddress, uint8_t *pubDst, uint8_t ubCount)
{
    1eee:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    qspi_flash_cmd(QSPI_FLASH_CMD_READ_SECURITY, usAddress, 2, 0, 8, NULL, 0, pubDst, ubCount);
    1ef0:	2300      	movs	r3, #0
    1ef2:	e9cd 1203 	strd	r1, r2, [sp, #12]
    1ef6:	2208      	movs	r2, #8
    1ef8:	9200      	str	r2, [sp, #0]
    1efa:	4601      	mov	r1, r0
    1efc:	e9cd 3301 	strd	r3, r3, [sp, #4]
    1f00:	2202      	movs	r2, #2
    1f02:	2088      	movs	r0, #136	; 0x88
    1f04:	f7ff ff3c 	bl	1d80 <qspi_flash_cmd>
}
    1f08:	b007      	add	sp, #28
    1f0a:	f85d fb04 	ldr.w	pc, [sp], #4

00001f0e <qspi_flash_unprotect_all_blocks>:
{
    qspi_flash_write_enable();
    qspi_flash_cmd(QSPI_FLASH_CMD_WRITE_SECURITY, usAddress, 2, 0, 0, pubSrc, ubCount, NULL, 0);
}
void qspi_flash_unprotect_all_blocks()
{
    1f0e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	qspi_flash_write_enable();
    1f10:	f7ff ff9d 	bl	1e4e <qspi_flash_write_enable>
    if(ubDstSize && !pubDst)
    1f14:	2300      	movs	r3, #0
    1f16:	e9cd 3303 	strd	r3, r3, [sp, #12]
    1f1a:	e9cd 3301 	strd	r3, r3, [sp, #4]
    1f1e:	9300      	str	r3, [sp, #0]
    1f20:	461a      	mov	r2, r3
    1f22:	4619      	mov	r1, r3
    1f24:	2098      	movs	r0, #152	; 0x98
    1f26:	f7ff fe75 	bl	1c14 <qspi_flash_cmd.part.1>
    qspi_flash_cmd(QSPI_FLASH_CMD_UNLOCK_PROTECTION, 0x00000000, 0, 0, 0, NULL, 0, NULL, 0);
    1f2a:	b007      	add	sp, #28
    1f2c:	f85d fb04 	ldr.w	pc, [sp], #4

00001f30 <qspi_flash_init>:
{
    1f30:	b510      	push	{r4, lr}
    qspi_flash_reset();
    1f32:	f7ff ff47 	bl	1dc4 <qspi_flash_reset>
    if(qspi_flash_read_jedec_id() != 0xBF2643)
    1f36:	f7ff ffba 	bl	1eae <qspi_flash_read_jedec_id>
    1f3a:	4b09      	ldr	r3, [pc, #36]	; (1f60 <qspi_flash_init+0x30>)
    1f3c:	4298      	cmp	r0, r3
    1f3e:	d10e      	bne.n	1f5e <qspi_flash_init+0x2e>
    qspi_flash_unprotect_all_blocks(); // Unprotect all blocks to be able to read/write
    1f40:	f7ff ffe5 	bl	1f0e <qspi_flash_unprotect_all_blocks>
    qspi_flash_write_status_config(qspi_flash_read_status(), qspi_flash_read_config() | 0x02); // Enable SIO2 and SIO3
    1f44:	f7ff ff59 	bl	1dfa <qspi_flash_read_status>
    1f48:	4604      	mov	r4, r0
    1f4a:	f7ff ff6b 	bl	1e24 <qspi_flash_read_config>
    1f4e:	f040 0102 	orr.w	r1, r0, #2
    1f52:	b2c9      	uxtb	r1, r1
    1f54:	4620      	mov	r0, r4
}
    1f56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    qspi_flash_write_status_config(qspi_flash_read_status(), qspi_flash_read_config() | 0x02); // Enable SIO2 and SIO3
    1f5a:	f7ff bf90 	b.w	1e7e <qspi_flash_write_status_config>
}
    1f5e:	bd10      	pop	{r4, pc}
    1f60:	00bf2643 	.word	0x00bf2643

00001f64 <qspi_init>:
    CMU->HFBUSCLKEN0 |= CMU_HFBUSCLKEN0_QSPI0;
    1f64:	4a1d      	ldr	r2, [pc, #116]	; (1fdc <qspi_init+0x78>)
    1f66:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
{
    1f6a:	b510      	push	{r4, lr}
    CMU->HFBUSCLKEN0 |= CMU_HFBUSCLKEN0_QSPI0;
    1f6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    while(!(QSPI0->CONFIG & QSPI_CONFIG_IDLE));
    1f70:	4c1b      	ldr	r4, [pc, #108]	; (1fe0 <qspi_init+0x7c>)
    CMU->HFBUSCLKEN0 |= CMU_HFBUSCLKEN0_QSPI0;
    1f72:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
    while(!(QSPI0->CONFIG & QSPI_CONFIG_IDLE));
    1f76:	6823      	ldr	r3, [r4, #0]
    1f78:	2b00      	cmp	r3, #0
    1f7a:	dafc      	bge.n	1f76 <qspi_init+0x12>
    QSPI0->CONFIG = QSPI_CONFIG_ENBAHBADDRREMAP | (0 << _QSPI_CONFIG_PERIPHCSLINES_SHIFT) | QSPI_CONFIG_ENBDIRACCCTLR | QSPI_CONFIG_PHYMODEENABLE;
    1f7c:	4b19      	ldr	r3, [pc, #100]	; (1fe4 <qspi_init+0x80>)
    1f7e:	6023      	str	r3, [r4, #0]
    QSPI0->DEVINSTRRDCONFIG = (0 << _QSPI_DEVINSTRRDCONFIG_DUMMYRDCLKCYCLES_SHIFT) | QSPI_DEVINSTRRDCONFIG_MODEBITENABLE | (0 << _QSPI_DEVINSTRRDCONFIG_DATAXFERTYPEEXTMODE_SHIFT) | (0 << _QSPI_DEVINSTRRDCONFIG_ADDRXFERTYPESTDMODE_SHIFT) | (0 << _QSPI_DEVINSTRRDCONFIG_INSTRTYPE_SHIFT) | ((uint32_t)QSPI_FLASH_CMD_READ_FAST << _QSPI_DEVINSTRRDCONFIG_RDOPCODENONXIP_SHIFT);
    1f80:	4b19      	ldr	r3, [pc, #100]	; (1fe8 <qspi_init+0x84>)
    1f82:	6063      	str	r3, [r4, #4]
    QSPI0->DEVINSTRWRCONFIG = (0 << _QSPI_DEVINSTRWRCONFIG_DUMMYWRCLKCYCLES_SHIFT) | (0 << _QSPI_DEVINSTRWRCONFIG_DATAXFERTYPEEXTMODE_SHIFT) | (0 << _QSPI_DEVINSTRWRCONFIG_ADDRXFERTYPESTDMODE_SHIFT) | ((uint32_t)QSPI_FLASH_CMD_WRITE << _QSPI_DEVINSTRWRCONFIG_WROPCODE_SHIFT);
    1f84:	2302      	movs	r3, #2
    1f86:	60a3      	str	r3, [r4, #8]
    QSPI0->DEVDELAY = (2 << _QSPI_DEVDELAY_DNSS_SHIFT) | (2 << _QSPI_DEVDELAY_DBTWN_SHIFT) | (0 << _QSPI_DEVDELAY_DAFTER_SHIFT) | (0 << _QSPI_DEVDELAY_DINIT_SHIFT);
    1f88:	4b18      	ldr	r3, [pc, #96]	; (1fec <qspi_init+0x88>)
    1f8a:	60e3      	str	r3, [r4, #12]
    QSPI0->DEVSIZECONFIG = (0 << _QSPI_DEVSIZECONFIG_MEMSIZEONCS0_SHIFT) | (12 << _QSPI_DEVSIZECONFIG_BYTESPERSUBSECTOR_SHIFT) | (256 << _QSPI_DEVSIZECONFIG_BYTESPERDEVICEPAGE_SHIFT) | (2 << _QSPI_DEVSIZECONFIG_NUMADDRBYTES_SHIFT);
    1f8c:	4b18      	ldr	r3, [pc, #96]	; (1ff0 <qspi_init+0x8c>)
    1f8e:	6163      	str	r3, [r4, #20]
    QSPI0->WRITECOMPLETIONCTRL = (5 << _QSPI_WRITECOMPLETIONCTRL_POLLREPDELAY_SHIFT) | (1 << _QSPI_WRITECOMPLETIONCTRL_POLLCOUNT_SHIFT) | (0 << _QSPI_WRITECOMPLETIONCTRL_POLLINGPOLARITY_SHIFT) | (0 << _QSPI_WRITECOMPLETIONCTRL_POLLINGBITINDEX_SHIFT) | (QSPI_FLASH_CMD_READ_STATUS << _QSPI_WRITECOMPLETIONCTRL_OPCODE_SHIFT);
    1f90:	4a18      	ldr	r2, [pc, #96]	; (1ff4 <qspi_init+0x90>)
    QSPI0->REMAPADDR = 0x00000000;
    1f92:	2300      	movs	r3, #0
    1f94:	6263      	str	r3, [r4, #36]	; 0x24
    QSPI0->MODEBITCONFIG = (0x00 << _QSPI_MODEBITCONFIG_MODE_SHIFT);
    1f96:	62a3      	str	r3, [r4, #40]	; 0x28
    QSPI0->WRITECOMPLETIONCTRL = (5 << _QSPI_WRITECOMPLETIONCTRL_POLLREPDELAY_SHIFT) | (1 << _QSPI_WRITECOMPLETIONCTRL_POLLCOUNT_SHIFT) | (0 << _QSPI_WRITECOMPLETIONCTRL_POLLINGPOLARITY_SHIFT) | (0 << _QSPI_WRITECOMPLETIONCTRL_POLLINGBITINDEX_SHIFT) | (QSPI_FLASH_CMD_READ_STATUS << _QSPI_WRITECOMPLETIONCTRL_OPCODE_SHIFT);
    1f98:	63a2      	str	r2, [r4, #56]	; 0x38
    QSPI0->PHYCONFIGURATION = QSPI_PHYCONFIGURATION_PHYCONFIGRESYNC | (25 << _QSPI_PHYCONFIGURATION_PHYCONFIGTXDLLDELAY_SHIFT) | (43 << _QSPI_PHYCONFIGURATION_PHYCONFIGRXDLLDELAY_SHIFT);
    1f9a:	4a17      	ldr	r2, [pc, #92]	; (1ff8 <qspi_init+0x94>)
    QSPI0->POLLINGFLASHSTATUS = (0 << _QSPI_POLLINGFLASHSTATUS_DEVICESTATUSNBDUMMY_SHIFT);
    1f9c:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
    QSPI0->PHYCONFIGURATION = QSPI_PHYCONFIGURATION_PHYCONFIGRESYNC | (25 << _QSPI_PHYCONFIGURATION_PHYCONFIGTXDLLDELAY_SHIFT) | (43 << _QSPI_PHYCONFIGURATION_PHYCONFIGRXDLLDELAY_SHIFT);
    1fa0:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
    QSPI0->OPCODEEXTUPPER = (QSPI_FLASH_CMD_WRITE_ENABLE << _QSPI_OPCODEEXTUPPER_WELOPCODE_SHIFT);
    1fa4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
    1fa8:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
    QSPI0->ROUTELOC0 = QSPI_ROUTELOC0_QSPILOC_LOC0;
    1fac:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    QSPI0->ROUTEPEN = QSPI_ROUTEPEN_DQ0PEN | QSPI_ROUTEPEN_DQ1PEN | QSPI_ROUTEPEN_DQ2PEN | QSPI_ROUTEPEN_DQ3PEN | QSPI_ROUTEPEN_CS0PEN | QSPI_ROUTEPEN_SCLKPEN;
    1fb0:	f240 13e3 	movw	r3, #483	; 0x1e3
    1fb4:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    CMU->QSPICTRL = CMU_QSPICTRL_QSPI0CLKSEL_HFXO;
    1fb8:	4b08      	ldr	r3, [pc, #32]	; (1fdc <qspi_init+0x78>)
    1fba:	2201      	movs	r2, #1
    1fbc:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
    cmu_update_clocks();
    1fc0:	f7fe fee6 	bl	d90 <cmu_update_clocks>
    QSPI0->CONFIG |= QSPI_CONFIG_ENBSPI;
    1fc4:	6823      	ldr	r3, [r4, #0]
    while(!(QSPI0->CONFIG & QSPI_CONFIG_IDLE));
    1fc6:	4a06      	ldr	r2, [pc, #24]	; (1fe0 <qspi_init+0x7c>)
    QSPI0->CONFIG |= QSPI_CONFIG_ENBSPI;
    1fc8:	f043 0301 	orr.w	r3, r3, #1
    1fcc:	6023      	str	r3, [r4, #0]
    while(!(QSPI0->CONFIG & QSPI_CONFIG_IDLE));
    1fce:	6813      	ldr	r3, [r2, #0]
    1fd0:	2b00      	cmp	r3, #0
    1fd2:	dafc      	bge.n	1fce <qspi_init+0x6a>
}
    1fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    qspi_flash_init();
    1fd8:	f7ff bfaa 	b.w	1f30 <qspi_flash_init>
    1fdc:	400e4000 	.word	0x400e4000
    1fe0:	4001c400 	.word	0x4001c400
    1fe4:	00010088 	.word	0x00010088
    1fe8:	0010000b 	.word	0x0010000b
    1fec:	02020000 	.word	0x02020000
    1ff0:	000c1002 	.word	0x000c1002
    1ff4:	05010005 	.word	0x05010005
    1ff8:	8019002b 	.word	0x8019002b

00001ffc <emu_vmon_thresh_get>:
}
static float emu_vmon_thresh_get(uint8_t ubThresh1V86, uint8_t ubThresh2V98, uint8_t ubCurrentThresh)
{
    // Convert from BCD
    float fCurrentThresh = 10 * ((ubCurrentThresh >> 4) & 0xF) + ((ubCurrentThresh >> 0) & 0xF);
    float fThresh1V86 = 10 * ((ubThresh1V86 >> 4) & 0xF) + ((ubThresh1V86 >> 0) & 0xF);
    1ffc:	230a      	movs	r3, #10
{
    1ffe:	b510      	push	{r4, lr}
    float fThresh1V86 = 10 * ((ubThresh1V86 >> 4) & 0xF) + ((ubThresh1V86 >> 0) & 0xF);
    2000:	0904      	lsrs	r4, r0, #4
    2002:	f000 000f 	and.w	r0, r0, #15
    2006:	fb13 0404 	smlabb	r4, r3, r4, r0
    200a:	ee07 4a90 	vmov	s15, r4
    float fThresh2V98 = 10 * ((ubThresh2V98 >> 4) & 0xF) + ((ubThresh2V98 >> 0) & 0xF);
    200e:	0908      	lsrs	r0, r1, #4
    2010:	f001 010f 	and.w	r1, r1, #15
    2014:	fb13 1100 	smlabb	r1, r3, r0, r1
    float fThresh1V86 = 10 * ((ubThresh1V86 >> 4) & 0xF) + ((ubThresh1V86 >> 0) & 0xF);
    2018:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    float fThresh2V98 = 10 * ((ubThresh2V98 >> 4) & 0xF) + ((ubThresh2V98 >> 0) & 0xF);
    201c:	ee07 1a90 	vmov	s15, r1
    2020:	eef8 7ae7 	vcvt.f32.s32	s15, s15

    // Interpolate between the two calibration thresholds
    float fSlope = (2.98f - 1.86f) / (fThresh2V98 - fThresh1V86);
    2024:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 2050 <emu_vmon_thresh_get+0x54>
    float fOffset = 1.86f - (fSlope * fThresh1V86);
    2028:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 2054 <emu_vmon_thresh_get+0x58>
    float fSlope = (2.98f - 1.86f) / (fThresh2V98 - fThresh1V86);
    202c:	ee77 7ac7 	vsub.f32	s15, s15, s14
    float fCurrentThresh = 10 * ((ubCurrentThresh >> 4) & 0xF) + ((ubCurrentThresh >> 0) & 0xF);
    2030:	0911      	lsrs	r1, r2, #4
    float fSlope = (2.98f - 1.86f) / (fThresh2V98 - fThresh1V86);
    2032:	eec6 6a27 	vdiv.f32	s13, s12, s15
    float fCurrentThresh = 10 * ((ubCurrentThresh >> 4) & 0xF) + ((ubCurrentThresh >> 0) & 0xF);
    2036:	f002 020f 	and.w	r2, r2, #15
    203a:	fb13 2301 	smlabb	r3, r3, r1, r2
    203e:	ee07 3a90 	vmov	s15, r3
    float fOffset = 1.86f - (fSlope * fThresh1V86);
    2042:	eea7 0a66 	vfms.f32	s0, s14, s13
    float fCurrentThresh = 10 * ((ubCurrentThresh >> 4) & 0xF) + ((ubCurrentThresh >> 0) & 0xF);
    2046:	eef8 7ae7 	vcvt.f32.s32	s15, s15

    // Find the Code for the target voltage
    float fCurrentVoltage = (fCurrentThresh * fSlope) + fOffset;

    return fCurrentVoltage;
}
    204a:	eea7 0aa6 	vfma.f32	s0, s15, s13
    204e:	bd10      	pop	{r4, pc}
    2050:	3f8f5c29 	.word	0x3f8f5c29
    2054:	3fee147b 	.word	0x3fee147b

00002058 <emu_vmon_thresh_calc>:
{
    2058:	b507      	push	{r0, r1, r2, lr}
    float fThresh1V86 = 10 * ((ubThresh1V86 >> 4) & 0xF) + ((ubThresh1V86 >> 0) & 0xF);
    205a:	230a      	movs	r3, #10
    205c:	0902      	lsrs	r2, r0, #4
    205e:	f000 000f 	and.w	r0, r0, #15
    2062:	fb13 0202 	smlabb	r2, r3, r2, r0
    2066:	ee07 2a90 	vmov	s15, r2
    float fThresh2V98 = 10 * ((ubThresh2V98 >> 4) & 0xF) + ((ubThresh2V98 >> 0) & 0xF);
    206a:	090a      	lsrs	r2, r1, #4
    206c:	f001 010f 	and.w	r1, r1, #15
    2070:	fb13 1302 	smlabb	r3, r3, r2, r1
    float fThresh1V86 = 10 * ((ubThresh1V86 >> 4) & 0xF) + ((ubThresh1V86 >> 0) & 0xF);
    2074:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    float fThresh2V98 = 10 * ((ubThresh2V98 >> 4) & 0xF) + ((ubThresh2V98 >> 0) & 0xF);
    2078:	ee07 3a90 	vmov	s15, r3
    207c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    float fSlope = (2.98f - 1.86f) / (fThresh2V98 - fThresh1V86);
    2080:	ed9f 6a17 	vldr	s12, [pc, #92]	; 20e0 <emu_vmon_thresh_calc+0x88>
    2084:	ee77 7ac7 	vsub.f32	s15, s15, s14
    2088:	eec6 6a27 	vdiv.f32	s13, s12, s15
    float fOffset = 1.86f - (fSlope * fThresh1V86);
    208c:	eddf 7a15 	vldr	s15, [pc, #84]	; 20e4 <emu_vmon_thresh_calc+0x8c>
    2090:	eee7 7a66 	vfms.f32	s15, s14, s13
    float fTargetThresh = roundf((fTargetVoltage - fOffset) / fSlope);
    2094:	ee30 0a67 	vsub.f32	s0, s0, s15
    2098:	ee80 0a26 	vdiv.f32	s0, s0, s13
    209c:	f002 f836 	bl	410c <roundf>
    uint8_t ubDecThresh = fTargetThresh / 10.f;
    20a0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
    20a4:	eec0 7a07 	vdiv.f32	s15, s0, s14
    20a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    20ac:	edcd 7a01 	vstr	s15, [sp, #4]
    20b0:	f89d 3004 	ldrb.w	r3, [sp, #4]
    uint8_t ubUniThresh = fTargetThresh - (ubDecThresh * 10);
    20b4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    20b8:	0052      	lsls	r2, r2, #1
    20ba:	ee07 2a90 	vmov	s15, r2
    20be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    20c2:	ee30 0a67 	vsub.f32	s0, s0, s15
    20c6:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    uint8_t ubTargetThresh = ((ubDecThresh & 0xF) << 4) | (ubUniThresh & 0xF);
    20ca:	ee10 2a10 	vmov	r2, s0
    20ce:	f002 000f 	and.w	r0, r2, #15
    20d2:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
    20d6:	b2c0      	uxtb	r0, r0
    20d8:	b003      	add	sp, #12
    20da:	f85d fb04 	ldr.w	pc, [sp], #4
    20de:	bf00      	nop
    20e0:	3f8f5c29 	.word	0x3f8f5c29
    20e4:	3fee147b 	.word	0x3fee147b

000020e8 <_emu_isr>:

void _emu_isr()
{
    uint32_t ulFlags = EMU->IFC;
    20e8:	4b15      	ldr	r3, [pc, #84]	; (2140 <_emu_isr+0x58>)
    20ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    if(ulFlags & EMU_IFC_VMONAVDDFALL)
    20ec:	f013 0101 	ands.w	r1, r3, #1
    20f0:	d015      	beq.n	211e <_emu_isr+0x36>
        g_ubAVDDLow = 1;
    20f2:	4a14      	ldr	r2, [pc, #80]	; (2144 <_emu_isr+0x5c>)
    20f4:	2101      	movs	r1, #1
    else if(ulFlags & EMU_IFC_VMONAVDDRISE)
        g_ubAVDDLow = 0;
    20f6:	7011      	strb	r1, [r2, #0]

    if(ulFlags & EMU_IFC_VMONALTAVDDFALL)
    20f8:	f013 0104 	ands.w	r1, r3, #4
    20fc:	d013      	beq.n	2126 <_emu_isr+0x3e>
        g_ubAltAVDDLow = 1;
    20fe:	4a12      	ldr	r2, [pc, #72]	; (2148 <_emu_isr+0x60>)
    2100:	2101      	movs	r1, #1
    else if(ulFlags & EMU_IFC_VMONALTAVDDRISE)
        g_ubAltAVDDLow = 0;
    2102:	7011      	strb	r1, [r2, #0]

    if(ulFlags & EMU_IFC_VMONDVDDFALL)
    2104:	f013 0110 	ands.w	r1, r3, #16
    2108:	d011      	beq.n	212e <_emu_isr+0x46>
        g_ubDVDDLow = 1;
    210a:	4a10      	ldr	r2, [pc, #64]	; (214c <_emu_isr+0x64>)
    210c:	2101      	movs	r1, #1
    else if(ulFlags & EMU_IFC_VMONDVDDRISE)
        g_ubDVDDLow = 0;
    210e:	7011      	strb	r1, [r2, #0]

    if(ulFlags & EMU_IFC_VMONIO0FALL)
    2110:	f013 0240 	ands.w	r2, r3, #64	; 0x40
    2114:	d00f      	beq.n	2136 <_emu_isr+0x4e>
        g_ubIOVDDLow = 1;
    2116:	4b0e      	ldr	r3, [pc, #56]	; (2150 <_emu_isr+0x68>)
    2118:	2201      	movs	r2, #1
    else if(ulFlags & EMU_IFC_VMONIO0RISE)
        g_ubIOVDDLow = 0;
    211a:	701a      	strb	r2, [r3, #0]
}
    211c:	4770      	bx	lr
    else if(ulFlags & EMU_IFC_VMONAVDDRISE)
    211e:	079a      	lsls	r2, r3, #30
    2120:	d5ea      	bpl.n	20f8 <_emu_isr+0x10>
        g_ubAVDDLow = 0;
    2122:	4a08      	ldr	r2, [pc, #32]	; (2144 <_emu_isr+0x5c>)
    2124:	e7e7      	b.n	20f6 <_emu_isr+0xe>
    else if(ulFlags & EMU_IFC_VMONALTAVDDRISE)
    2126:	0718      	lsls	r0, r3, #28
    2128:	d5ec      	bpl.n	2104 <_emu_isr+0x1c>
        g_ubAltAVDDLow = 0;
    212a:	4a07      	ldr	r2, [pc, #28]	; (2148 <_emu_isr+0x60>)
    212c:	e7e9      	b.n	2102 <_emu_isr+0x1a>
    else if(ulFlags & EMU_IFC_VMONDVDDRISE)
    212e:	069a      	lsls	r2, r3, #26
    2130:	d5ee      	bpl.n	2110 <_emu_isr+0x28>
        g_ubDVDDLow = 0;
    2132:	4a06      	ldr	r2, [pc, #24]	; (214c <_emu_isr+0x64>)
    2134:	e7eb      	b.n	210e <_emu_isr+0x26>
    else if(ulFlags & EMU_IFC_VMONIO0RISE)
    2136:	061b      	lsls	r3, r3, #24
    2138:	d5f0      	bpl.n	211c <_emu_isr+0x34>
        g_ubIOVDDLow = 0;
    213a:	4b05      	ldr	r3, [pc, #20]	; (2150 <_emu_isr+0x68>)
    213c:	e7ed      	b.n	211a <_emu_isr+0x32>
    213e:	bf00      	nop
    2140:	400e3000 	.word	0x400e3000
    2144:	20000078 	.word	0x20000078
    2148:	20000079 	.word	0x20000079
    214c:	2000007a 	.word	0x2000007a
    2150:	2000007b 	.word	0x2000007b

00002154 <emu_init>:

void emu_init()
{
    EMU->PWRCTRL = EMU_PWRCTRL_IMMEDIATEPWRSWITCH | EMU_PWRCTRL_REGPWRSEL_DVDD | EMU_PWRCTRL_ANASW_AVDD;
    2154:	4b07      	ldr	r3, [pc, #28]	; (2174 <emu_init+0x20>)
    2156:	f44f 5210 	mov.w	r2, #9216	; 0x2400
    215a:	63da      	str	r2, [r3, #60]	; 0x3c

    EMU->IFC = _EMU_IFC_MASK; // Clear pending IRQs
    215c:	4a06      	ldr	r2, [pc, #24]	; (2178 <emu_init+0x24>)
    215e:	62da      	str	r2, [r3, #44]	; 0x2c
    IRQ_CLEAR(EMU_IRQn); // Clear pending vector
    2160:	4b06      	ldr	r3, [pc, #24]	; (217c <emu_init+0x28>)
    2162:	2201      	movs	r2, #1
    IRQ_SET_PRIO(EMU_IRQn, 3, 1); // Set priority 3,1 (min)
    2164:	21e0      	movs	r1, #224	; 0xe0
    IRQ_CLEAR(EMU_IRQn); // Clear pending vector
    2166:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    IRQ_SET_PRIO(EMU_IRQn, 3, 1); // Set priority 3,1 (min)
    216a:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    IRQ_ENABLE(EMU_IRQn); // Enable vector
    216e:	601a      	str	r2, [r3, #0]
}
    2170:	4770      	bx	lr
    2172:	bf00      	nop
    2174:	400e3000 	.word	0x400e3000
    2178:	e3df37ff 	.word	0xe3df37ff
    217c:	e000e100 	.word	0xe000e100

00002180 <emu_get_temperature>:
float emu_get_temperature()
{
    EMU->IFC = EMU_IF_TEMP;
    2180:	4912      	ldr	r1, [pc, #72]	; (21cc <emu_get_temperature+0x4c>)
    2182:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    2186:	62cb      	str	r3, [r1, #44]	; 0x2c

    while(!(EMU->IF & EMU_IF_TEMP));
    2188:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    218a:	009b      	lsls	r3, r3, #2
    218c:	d5fc      	bpl.n	2188 <emu_get_temperature+0x8>

    float fCalibrationTemp = (DEVINFO->CAL & _DEVINFO_CAL_TEMP_MASK) >> _DEVINFO_CAL_TEMP_SHIFT;
    218e:	4b10      	ldr	r3, [pc, #64]	; (21d0 <emu_get_temperature+0x50>)
    float fEMUCalibrationTemp = (DEVINFO->EMUTEMP & _DEVINFO_EMUTEMP_EMUTEMPROOM_MASK) >> _DEVINFO_EMUTEMP_EMUTEMPROOM_SHIFT;
    float fTempCoefEM01 = 0.278f + fEMUCalibrationTemp / 100.f;
    2190:	ed9f 6a10 	vldr	s12, [pc, #64]	; 21d4 <emu_get_temperature+0x54>
    float fCalibrationTemp = (DEVINFO->CAL & _DEVINFO_CAL_TEMP_MASK) >> _DEVINFO_CAL_TEMP_SHIFT;
    2194:	681a      	ldr	r2, [r3, #0]
    float fEMUCalibrationTemp = (DEVINFO->EMUTEMP & _DEVINFO_EMUTEMP_EMUTEMPROOM_MASK) >> _DEVINFO_EMUTEMP_EMUTEMPROOM_SHIFT;
    2196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    float fEMUTemp = fCalibrationTemp + fTempCoefEM01 * (fEMUCalibrationTemp - EMU->TEMP);
    2198:	ed91 7a08 	vldr	s14, [r1, #32]
    float fEMUCalibrationTemp = (DEVINFO->EMUTEMP & _DEVINFO_EMUTEMP_EMUTEMPROOM_MASK) >> _DEVINFO_EMUTEMP_EMUTEMPROOM_SHIFT;
    219c:	b2db      	uxtb	r3, r3
    219e:	ee07 3a90 	vmov	s15, r3
    21a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    float fEMUTemp = fCalibrationTemp + fTempCoefEM01 * (fEMUCalibrationTemp - EMU->TEMP);
    21a6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    float fTempCoefEM01 = 0.278f + fEMUCalibrationTemp / 100.f;
    21aa:	eec7 6a86 	vdiv.f32	s13, s15, s12
    float fCalibrationTemp = (DEVINFO->CAL & _DEVINFO_CAL_TEMP_MASK) >> _DEVINFO_CAL_TEMP_SHIFT;
    21ae:	f3c2 4307 	ubfx	r3, r2, #16, #8
    float fEMUTemp = fCalibrationTemp + fTempCoefEM01 * (fEMUCalibrationTemp - EMU->TEMP);
    21b2:	ee37 7ac7 	vsub.f32	s14, s15, s14
    float fCalibrationTemp = (DEVINFO->CAL & _DEVINFO_CAL_TEMP_MASK) >> _DEVINFO_CAL_TEMP_SHIFT;
    21b6:	ee00 3a10 	vmov	s0, r3
    float fTempCoefEM01 = 0.278f + fEMUCalibrationTemp / 100.f;
    21ba:	eddf 7a07 	vldr	s15, [pc, #28]	; 21d8 <emu_get_temperature+0x58>
    float fCalibrationTemp = (DEVINFO->CAL & _DEVINFO_CAL_TEMP_MASK) >> _DEVINFO_CAL_TEMP_SHIFT;
    21be:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    float fTempCoefEM01 = 0.278f + fEMUCalibrationTemp / 100.f;
    21c2:	ee76 7aa7 	vadd.f32	s15, s13, s15

    return fEMUTemp;
}
    21c6:	eea7 0a27 	vfma.f32	s0, s14, s15
    21ca:	4770      	bx	lr
    21cc:	400e3000 	.word	0x400e3000
    21d0:	0fe081b0 	.word	0x0fe081b0
    21d4:	42c80000 	.word	0x42c80000
    21d8:	3e8e5604 	.word	0x3e8e5604

000021dc <emu_vmon_avdd_config>:
void emu_vmon_avdd_config(uint8_t ubEnable, float fLowThresh, float *pfLowThresh, float fHighThresh, float *pfHighThresh)
{
    21dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    21e0:	4689      	mov	r9, r1
    21e2:	ed2d 8b02 	vpush	{d8}
    21e6:	4690      	mov	r8, r2
    21e8:	eeb0 8a60 	vmov.f32	s16, s1
    if(!ubEnable)
    21ec:	b970      	cbnz	r0, 220c <emu_vmon_avdd_config+0x30>
    {
        EMU->VMONAVDDCTRL &= ~EMU_VMONAVDDCTRL_EN;
    21ee:	4b23      	ldr	r3, [pc, #140]	; (227c <emu_vmon_avdd_config+0xa0>)
    21f0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    21f4:	f022 0201 	bic.w	r2, r2, #1
    21f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        EMU->IEN &= ~(EMU_IEN_VMONAVDDRISE | EMU_IEN_VMONAVDDFALL);
    21fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    21fe:	f022 0203 	bic.w	r2, r2, #3
    2202:	631a      	str	r2, [r3, #48]	; 0x30
        *pfHighThresh = emu_vmon_thresh_get(ubThresh1V86, ubThresh2V98, ubHighThresh);

    EMU->IFC = EMU_IFC_VMONAVDDRISE | EMU_IFC_VMONAVDDFALL;
    EMU->IEN |= EMU_IEN_VMONAVDDRISE | EMU_IEN_VMONAVDDFALL;
    EMU->VMONAVDDCTRL = ((uint32_t)ubLowThresh << _EMU_VMONAVDDCTRL_FALLTHRESFINE_SHIFT) | ((uint32_t)ubHighThresh << _EMU_VMONAVDDCTRL_RISETHRESFINE_SHIFT) | EMU_VMONAVDDCTRL_EN;
}
    2204:	ecbd 8b02 	vpop	{d8}
    2208:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    uint8_t ubThresh1V86 = (DEVINFO->VMONCAL0 >> 0) & 0xFF;
    220c:	4b1c      	ldr	r3, [pc, #112]	; (2280 <emu_vmon_avdd_config+0xa4>)
    220e:	f8d3 5140 	ldr.w	r5, [r3, #320]	; 0x140
    uint8_t ubThresh2V98 = (DEVINFO->VMONCAL0 >> 8) & 0xFF;
    2212:	f8d3 6140 	ldr.w	r6, [r3, #320]	; 0x140
    uint8_t ubThresh1V86 = (DEVINFO->VMONCAL0 >> 0) & 0xFF;
    2216:	b2ed      	uxtb	r5, r5
    uint8_t ubThresh2V98 = (DEVINFO->VMONCAL0 >> 8) & 0xFF;
    2218:	f3c6 2607 	ubfx	r6, r6, #8, #8
    uint8_t ubLowThresh = emu_vmon_thresh_calc(ubThresh1V86, ubThresh2V98, fLowThresh);
    221c:	4631      	mov	r1, r6
    221e:	4628      	mov	r0, r5
    2220:	f7ff ff1a 	bl	2058 <emu_vmon_thresh_calc>
    uint8_t ubHighThresh = emu_vmon_thresh_calc(ubThresh1V86, ubThresh2V98, fHighThresh);
    2224:	eeb0 0a48 	vmov.f32	s0, s16
    uint8_t ubLowThresh = emu_vmon_thresh_calc(ubThresh1V86, ubThresh2V98, fLowThresh);
    2228:	4607      	mov	r7, r0
    uint8_t ubHighThresh = emu_vmon_thresh_calc(ubThresh1V86, ubThresh2V98, fHighThresh);
    222a:	4631      	mov	r1, r6
    222c:	4628      	mov	r0, r5
    222e:	f7ff ff13 	bl	2058 <emu_vmon_thresh_calc>
    2232:	4604      	mov	r4, r0
    if(pfLowThresh)
    2234:	f1b9 0f00 	cmp.w	r9, #0
    2238:	d006      	beq.n	2248 <emu_vmon_avdd_config+0x6c>
        *pfLowThresh = emu_vmon_thresh_get(ubThresh1V86, ubThresh2V98, ubLowThresh);
    223a:	463a      	mov	r2, r7
    223c:	4631      	mov	r1, r6
    223e:	4628      	mov	r0, r5
    2240:	f7ff fedc 	bl	1ffc <emu_vmon_thresh_get>
    2244:	ed89 0a00 	vstr	s0, [r9]
    if(pfHighThresh)
    2248:	f1b8 0f00 	cmp.w	r8, #0
    224c:	d006      	beq.n	225c <emu_vmon_avdd_config+0x80>
        *pfHighThresh = emu_vmon_thresh_get(ubThresh1V86, ubThresh2V98, ubHighThresh);
    224e:	4622      	mov	r2, r4
    2250:	4631      	mov	r1, r6
    2252:	4628      	mov	r0, r5
    2254:	f7ff fed2 	bl	1ffc <emu_vmon_thresh_get>
    2258:	ed88 0a00 	vstr	s0, [r8]
    EMU->IFC = EMU_IFC_VMONAVDDRISE | EMU_IFC_VMONAVDDFALL;
    225c:	4b07      	ldr	r3, [pc, #28]	; (227c <emu_vmon_avdd_config+0xa0>)
    225e:	2203      	movs	r2, #3
    2260:	62da      	str	r2, [r3, #44]	; 0x2c
    EMU->IEN |= EMU_IEN_VMONAVDDRISE | EMU_IEN_VMONAVDDFALL;
    2262:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    EMU->VMONAVDDCTRL = ((uint32_t)ubLowThresh << _EMU_VMONAVDDCTRL_FALLTHRESFINE_SHIFT) | ((uint32_t)ubHighThresh << _EMU_VMONAVDDCTRL_RISETHRESFINE_SHIFT) | EMU_VMONAVDDCTRL_EN;
    2264:	0424      	lsls	r4, r4, #16
    2266:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
    EMU->IEN |= EMU_IEN_VMONAVDDRISE | EMU_IEN_VMONAVDDFALL;
    226a:	f042 0203 	orr.w	r2, r2, #3
    EMU->VMONAVDDCTRL = ((uint32_t)ubLowThresh << _EMU_VMONAVDDCTRL_FALLTHRESFINE_SHIFT) | ((uint32_t)ubHighThresh << _EMU_VMONAVDDCTRL_RISETHRESFINE_SHIFT) | EMU_VMONAVDDCTRL_EN;
    226e:	f044 0401 	orr.w	r4, r4, #1
    EMU->IEN |= EMU_IEN_VMONAVDDRISE | EMU_IEN_VMONAVDDFALL;
    2272:	631a      	str	r2, [r3, #48]	; 0x30
    EMU->VMONAVDDCTRL = ((uint32_t)ubLowThresh << _EMU_VMONAVDDCTRL_FALLTHRESFINE_SHIFT) | ((uint32_t)ubHighThresh << _EMU_VMONAVDDCTRL_RISETHRESFINE_SHIFT) | EMU_VMONAVDDCTRL_EN;
    2274:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
    2278:	e7c4      	b.n	2204 <emu_vmon_avdd_config+0x28>
    227a:	bf00      	nop
    227c:	400e3000 	.word	0x400e3000
    2280:	0fe081b0 	.word	0x0fe081b0

00002284 <emu_vmon_dvdd_config>:
    EMU->IFC = EMU_IFC_VMONALTAVDDRISE | EMU_IFC_VMONALTAVDDFALL;
    EMU->IEN |= EMU_IEN_VMONALTAVDDRISE | EMU_IEN_VMONALTAVDDFALL;
    EMU->VMONALTAVDDCTRL = ((uint32_t)ubLowThresh << _EMU_VMONALTAVDDCTRL_THRESFINE_SHIFT) | EMU_VMONALTAVDDCTRL_EN;
}
void emu_vmon_dvdd_config(uint8_t ubEnable, float fLowThresh, float *pfLowThresh)
{
    2284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2286:	460f      	mov	r7, r1
    if(!ubEnable)
    2288:	b958      	cbnz	r0, 22a2 <emu_vmon_dvdd_config+0x1e>
    {
        EMU->VMONDVDDCTRL &= ~EMU_VMONDVDDCTRL_EN;
    228a:	4b17      	ldr	r3, [pc, #92]	; (22e8 <emu_vmon_dvdd_config+0x64>)
    228c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    2290:	f022 0201 	bic.w	r2, r2, #1
    2294:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        EMU->IEN &= ~(EMU_IEN_VMONDVDDRISE | EMU_IEN_VMONDVDDFALL);
    2298:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    229a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
    229e:	631a      	str	r2, [r3, #48]	; 0x30
        *pfLowThresh = emu_vmon_thresh_get(ubThresh1V86, ubThresh2V98, ubLowThresh);

    EMU->IFC = EMU_IFC_VMONDVDDRISE | EMU_IFC_VMONDVDDFALL;
    EMU->IEN |= EMU_IEN_VMONDVDDRISE | EMU_IEN_VMONDVDDFALL;
    EMU->VMONDVDDCTRL = ((uint32_t)ubLowThresh << _EMU_VMONDVDDCTRL_THRESFINE_SHIFT) | EMU_VMONDVDDCTRL_EN;
}
    22a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint8_t ubThresh1V86 = (DEVINFO->VMONCAL1 >> 0) & 0xFF;
    22a2:	4b12      	ldr	r3, [pc, #72]	; (22ec <emu_vmon_dvdd_config+0x68>)
    22a4:	f8d3 5144 	ldr.w	r5, [r3, #324]	; 0x144
    uint8_t ubThresh2V98 = (DEVINFO->VMONCAL1 >> 8) & 0xFF;
    22a8:	f8d3 6144 	ldr.w	r6, [r3, #324]	; 0x144
    uint8_t ubThresh1V86 = (DEVINFO->VMONCAL1 >> 0) & 0xFF;
    22ac:	b2ed      	uxtb	r5, r5
    uint8_t ubThresh2V98 = (DEVINFO->VMONCAL1 >> 8) & 0xFF;
    22ae:	f3c6 2607 	ubfx	r6, r6, #8, #8
    uint8_t ubLowThresh = emu_vmon_thresh_calc(ubThresh1V86, ubThresh2V98, fLowThresh);
    22b2:	4631      	mov	r1, r6
    22b4:	4628      	mov	r0, r5
    22b6:	f7ff fecf 	bl	2058 <emu_vmon_thresh_calc>
    22ba:	4604      	mov	r4, r0
    if(pfLowThresh)
    22bc:	b137      	cbz	r7, 22cc <emu_vmon_dvdd_config+0x48>
        *pfLowThresh = emu_vmon_thresh_get(ubThresh1V86, ubThresh2V98, ubLowThresh);
    22be:	4602      	mov	r2, r0
    22c0:	4631      	mov	r1, r6
    22c2:	4628      	mov	r0, r5
    22c4:	f7ff fe9a 	bl	1ffc <emu_vmon_thresh_get>
    22c8:	ed87 0a00 	vstr	s0, [r7]
    EMU->IFC = EMU_IFC_VMONDVDDRISE | EMU_IFC_VMONDVDDFALL;
    22cc:	4b06      	ldr	r3, [pc, #24]	; (22e8 <emu_vmon_dvdd_config+0x64>)
    22ce:	2230      	movs	r2, #48	; 0x30
    22d0:	62da      	str	r2, [r3, #44]	; 0x2c
    EMU->IEN |= EMU_IEN_VMONDVDDRISE | EMU_IEN_VMONDVDDFALL;
    22d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    EMU->VMONDVDDCTRL = ((uint32_t)ubLowThresh << _EMU_VMONDVDDCTRL_THRESFINE_SHIFT) | EMU_VMONDVDDCTRL_EN;
    22d4:	0224      	lsls	r4, r4, #8
    EMU->IEN |= EMU_IEN_VMONDVDDRISE | EMU_IEN_VMONDVDDFALL;
    22d6:	f042 0230 	orr.w	r2, r2, #48	; 0x30
    EMU->VMONDVDDCTRL = ((uint32_t)ubLowThresh << _EMU_VMONDVDDCTRL_THRESFINE_SHIFT) | EMU_VMONDVDDCTRL_EN;
    22da:	f044 0401 	orr.w	r4, r4, #1
    EMU->IEN |= EMU_IEN_VMONDVDDRISE | EMU_IEN_VMONDVDDFALL;
    22de:	631a      	str	r2, [r3, #48]	; 0x30
    EMU->VMONDVDDCTRL = ((uint32_t)ubLowThresh << _EMU_VMONDVDDCTRL_THRESFINE_SHIFT) | EMU_VMONDVDDCTRL_EN;
    22e0:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
    22e4:	e7dc      	b.n	22a0 <emu_vmon_dvdd_config+0x1c>
    22e6:	bf00      	nop
    22e8:	400e3000 	.word	0x400e3000
    22ec:	0fe081b0 	.word	0x0fe081b0

000022f0 <emu_vmon_iovdd_config>:
void emu_vmon_iovdd_config(uint8_t ubEnable, float fLowThresh, float *pfLowThresh)
{
    22f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22f2:	460f      	mov	r7, r1
    if(!ubEnable)
    22f4:	b958      	cbnz	r0, 230e <emu_vmon_iovdd_config+0x1e>
    {
        EMU->VMONIO0CTRL &= ~EMU_VMONIO0CTRL_EN;
    22f6:	4b17      	ldr	r3, [pc, #92]	; (2354 <emu_vmon_iovdd_config+0x64>)
    22f8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    22fc:	f022 0201 	bic.w	r2, r2, #1
    2300:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        EMU->IEN &= ~(EMU_IEN_VMONIO0RISE | EMU_IEN_VMONIO0FALL);
    2304:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2306:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
    230a:	631a      	str	r2, [r3, #48]	; 0x30
        *pfLowThresh = emu_vmon_thresh_get(ubThresh1V86, ubThresh2V98, ubLowThresh);

    EMU->IFC = EMU_IFC_VMONIO0RISE | EMU_IFC_VMONIO0FALL;
    EMU->IEN |= EMU_IEN_VMONIO0RISE | EMU_IEN_VMONIO0FALL;
    EMU->VMONIO0CTRL = ((uint32_t)ubLowThresh << _EMU_VMONIO0CTRL_THRESFINE_SHIFT) | EMU_VMONIO0CTRL_EN;
    230c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint8_t ubThresh1V86 = (DEVINFO->VMONCAL1 >> 16) & 0xFF;
    230e:	4b12      	ldr	r3, [pc, #72]	; (2358 <emu_vmon_iovdd_config+0x68>)
    2310:	f8d3 5144 	ldr.w	r5, [r3, #324]	; 0x144
    uint8_t ubThresh2V98 = (DEVINFO->VMONCAL1 >> 24) & 0xFF;
    2314:	f8d3 6144 	ldr.w	r6, [r3, #324]	; 0x144
    uint8_t ubThresh1V86 = (DEVINFO->VMONCAL1 >> 16) & 0xFF;
    2318:	f3c5 4507 	ubfx	r5, r5, #16, #8
    uint8_t ubThresh2V98 = (DEVINFO->VMONCAL1 >> 24) & 0xFF;
    231c:	0e36      	lsrs	r6, r6, #24
    uint8_t ubLowThresh = emu_vmon_thresh_calc(ubThresh1V86, ubThresh2V98, fLowThresh);
    231e:	4631      	mov	r1, r6
    2320:	4628      	mov	r0, r5
    2322:	f7ff fe99 	bl	2058 <emu_vmon_thresh_calc>
    2326:	4604      	mov	r4, r0
    if(pfLowThresh)
    2328:	b137      	cbz	r7, 2338 <emu_vmon_iovdd_config+0x48>
        *pfLowThresh = emu_vmon_thresh_get(ubThresh1V86, ubThresh2V98, ubLowThresh);
    232a:	4602      	mov	r2, r0
    232c:	4631      	mov	r1, r6
    232e:	4628      	mov	r0, r5
    2330:	f7ff fe64 	bl	1ffc <emu_vmon_thresh_get>
    2334:	ed87 0a00 	vstr	s0, [r7]
    EMU->IFC = EMU_IFC_VMONIO0RISE | EMU_IFC_VMONIO0FALL;
    2338:	4b06      	ldr	r3, [pc, #24]	; (2354 <emu_vmon_iovdd_config+0x64>)
    233a:	22c0      	movs	r2, #192	; 0xc0
    233c:	62da      	str	r2, [r3, #44]	; 0x2c
    EMU->IEN |= EMU_IEN_VMONIO0RISE | EMU_IEN_VMONIO0FALL;
    233e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    EMU->VMONIO0CTRL = ((uint32_t)ubLowThresh << _EMU_VMONIO0CTRL_THRESFINE_SHIFT) | EMU_VMONIO0CTRL_EN;
    2340:	0224      	lsls	r4, r4, #8
    EMU->IEN |= EMU_IEN_VMONIO0RISE | EMU_IEN_VMONIO0FALL;
    2342:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
    EMU->VMONIO0CTRL = ((uint32_t)ubLowThresh << _EMU_VMONIO0CTRL_THRESFINE_SHIFT) | EMU_VMONIO0CTRL_EN;
    2346:	f044 0401 	orr.w	r4, r4, #1
    EMU->IEN |= EMU_IEN_VMONIO0RISE | EMU_IEN_VMONIO0FALL;
    234a:	631a      	str	r2, [r3, #48]	; 0x30
    EMU->VMONIO0CTRL = ((uint32_t)ubLowThresh << _EMU_VMONIO0CTRL_THRESFINE_SHIFT) | EMU_VMONIO0CTRL_EN;
    234c:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
    2350:	e7dc      	b.n	230c <emu_vmon_iovdd_config+0x1c>
    2352:	bf00      	nop
    2354:	400e3000 	.word	0x400e3000
    2358:	0fe081b0 	.word	0x0fe081b0

0000235c <get_device_name>:

    return ulFreeRAM;
}

void get_device_name(char *pszDeviceName, uint32_t ulDeviceNameSize)
{
    235c:	b570      	push	{r4, r5, r6, lr}
    uint8_t ubFamily = (DEVINFO->PART & _DEVINFO_PART_DEVICE_FAMILY_MASK) >> _DEVINFO_PART_DEVICE_FAMILY_SHIFT;
    235e:	4ca2      	ldr	r4, [pc, #648]	; (25e8 <get_device_name+0x28c>)
    2360:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    2362:	f3c2 4207 	ubfx	r2, r2, #16, #8
    const char* szFamily = "?";

    if(ubFamily == 0x10)
    2366:	2a10      	cmp	r2, #16
{
    2368:	b086      	sub	sp, #24
    if(ubFamily == 0x10)
    236a:	f000 80cc 	beq.w	2506 <get_device_name+0x1aa>
        szFamily = "EFR32MG1P";
    else if(ubFamily == 0x11)
    236e:	2a11      	cmp	r2, #17
    2370:	f000 80cb 	beq.w	250a <get_device_name+0x1ae>
        szFamily = "EFR32MG1B";
    else if(ubFamily == 0x12)
    2374:	2a12      	cmp	r2, #18
    2376:	f000 80ca 	beq.w	250e <get_device_name+0x1b2>
        szFamily = "EFR32MG1V";
    else if(ubFamily == 0x13)
    237a:	2a13      	cmp	r2, #19
    237c:	f000 80c9 	beq.w	2512 <get_device_name+0x1b6>
        szFamily = "EFR32BG1P";
    else if(ubFamily == 0x14)
    2380:	2a14      	cmp	r2, #20
    2382:	f000 80c8 	beq.w	2516 <get_device_name+0x1ba>
        szFamily = "EFR32BG1B";
    else if(ubFamily == 0x15)
    2386:	2a15      	cmp	r2, #21
    2388:	f000 80c7 	beq.w	251a <get_device_name+0x1be>
        szFamily = "EFR32BG1V";
    else if(ubFamily == 0x19)
    238c:	2a19      	cmp	r2, #25
    238e:	f000 80c6 	beq.w	251e <get_device_name+0x1c2>
        szFamily = "EFR32FG1P";
    else if(ubFamily == 0x1A)
    2392:	2a1a      	cmp	r2, #26
    2394:	f000 80c5 	beq.w	2522 <get_device_name+0x1c6>
        szFamily = "EFR32FG1B";
    else if(ubFamily == 0x1B)
    2398:	2a1b      	cmp	r2, #27
    239a:	f000 80c4 	beq.w	2526 <get_device_name+0x1ca>
        szFamily = "EFR32FG1V";
    else if(ubFamily == 0x1C)
    239e:	2a1c      	cmp	r2, #28
    23a0:	f000 80c3 	beq.w	252a <get_device_name+0x1ce>
        szFamily = "EFR32MG12P";
    else if(ubFamily == 0x1D)
    23a4:	2a1d      	cmp	r2, #29
    23a6:	f000 80c2 	beq.w	252e <get_device_name+0x1d2>
        szFamily = "EFR32MG12B";
    else if(ubFamily == 0x1E)
    23aa:	2a1e      	cmp	r2, #30
    23ac:	f000 80c1 	beq.w	2532 <get_device_name+0x1d6>
        szFamily = "EFR32MG12V";
    else if(ubFamily == 0x1F)
    23b0:	2a1f      	cmp	r2, #31
    23b2:	f000 80c0 	beq.w	2536 <get_device_name+0x1da>
        szFamily = "EFR32BG12P";
    else if(ubFamily == 0x20)
    23b6:	2a20      	cmp	r2, #32
    23b8:	f000 80bf 	beq.w	253a <get_device_name+0x1de>
        szFamily = "EFR32BG12B";
    else if(ubFamily == 0x21)
    23bc:	2a21      	cmp	r2, #33	; 0x21
    23be:	f000 80be 	beq.w	253e <get_device_name+0x1e2>
        szFamily = "EFR32BG12V";
    else if(ubFamily == 0x25)
    23c2:	2a25      	cmp	r2, #37	; 0x25
    23c4:	f000 80bd 	beq.w	2542 <get_device_name+0x1e6>
        szFamily = "EFR32FG12P";
    else if(ubFamily == 0x26)
    23c8:	2a26      	cmp	r2, #38	; 0x26
    23ca:	f000 80bc 	beq.w	2546 <get_device_name+0x1ea>
        szFamily = "EFR32FG12B";
    else if(ubFamily == 0x27)
    23ce:	2a27      	cmp	r2, #39	; 0x27
    23d0:	f000 80bb 	beq.w	254a <get_device_name+0x1ee>
        szFamily = "EFR32FG12V";
    else if(ubFamily == 0x28)
    23d4:	2a28      	cmp	r2, #40	; 0x28
    23d6:	f000 80ba 	beq.w	254e <get_device_name+0x1f2>
        szFamily = "EFR32MG13P";
    else if(ubFamily == 0x29)
    23da:	2a29      	cmp	r2, #41	; 0x29
    23dc:	f000 80b9 	beq.w	2552 <get_device_name+0x1f6>
        szFamily = "EFR32MG13B";
    else if(ubFamily == 0x2A)
    23e0:	2a2a      	cmp	r2, #42	; 0x2a
    23e2:	f000 80b8 	beq.w	2556 <get_device_name+0x1fa>
        szFamily = "EFR32MG13V";
    else if(ubFamily == 0x2B)
    23e6:	2a2b      	cmp	r2, #43	; 0x2b
    23e8:	f000 80b7 	beq.w	255a <get_device_name+0x1fe>
        szFamily = "EFR32BG13P";
    else if(ubFamily == 0x2C)
    23ec:	2a2c      	cmp	r2, #44	; 0x2c
    23ee:	f000 80b6 	beq.w	255e <get_device_name+0x202>
        szFamily = "EFR32BG13B";
    else if(ubFamily == 0x2D)
    23f2:	2a2d      	cmp	r2, #45	; 0x2d
    23f4:	f000 80b5 	beq.w	2562 <get_device_name+0x206>
        szFamily = "EFR32BG13V";
    else if(ubFamily == 0x2E)
    23f8:	2a2e      	cmp	r2, #46	; 0x2e
    23fa:	f000 80b4 	beq.w	2566 <get_device_name+0x20a>
        szFamily = "EFR32ZG13P";
    else if(ubFamily == 0x31)
    23fe:	2a31      	cmp	r2, #49	; 0x31
    2400:	f000 80b3 	beq.w	256a <get_device_name+0x20e>
        szFamily = "EFR32FG13P";
    else if(ubFamily == 0x32)
    2404:	2a32      	cmp	r2, #50	; 0x32
    2406:	f000 80b2 	beq.w	256e <get_device_name+0x212>
        szFamily = "EFR32FG13B";
    else if(ubFamily == 0x33)
    240a:	2a33      	cmp	r2, #51	; 0x33
    240c:	f000 80b1 	beq.w	2572 <get_device_name+0x216>
        szFamily = "EFR32FG13V";
    else if(ubFamily == 0x34)
    2410:	2a34      	cmp	r2, #52	; 0x34
    2412:	f000 80b0 	beq.w	2576 <get_device_name+0x21a>
        szFamily = "EFR32MG14P";
    else if(ubFamily == 0x35)
    2416:	2a35      	cmp	r2, #53	; 0x35
    2418:	f000 80af 	beq.w	257a <get_device_name+0x21e>
        szFamily = "EFR32MG14B";
    else if(ubFamily == 0x36)
    241c:	2a36      	cmp	r2, #54	; 0x36
    241e:	f000 80ae 	beq.w	257e <get_device_name+0x222>
        szFamily = "EFR32MG14V";
    else if(ubFamily == 0x37)
    2422:	2a37      	cmp	r2, #55	; 0x37
    2424:	f000 80ad 	beq.w	2582 <get_device_name+0x226>
        szFamily = "EFR32BG14P";
    else if(ubFamily == 0x38)
    2428:	2a38      	cmp	r2, #56	; 0x38
    242a:	f000 80ac 	beq.w	2586 <get_device_name+0x22a>
        szFamily = "EFR32BG14B";
    else if(ubFamily == 0x39)
    242e:	2a39      	cmp	r2, #57	; 0x39
    2430:	f000 80ab 	beq.w	258a <get_device_name+0x22e>
        szFamily = "EFR32BG14V";
    else if(ubFamily == 0x3A)
    2434:	2a3a      	cmp	r2, #58	; 0x3a
    2436:	f000 80aa 	beq.w	258e <get_device_name+0x232>
        szFamily = "EFR32ZG14P";
    else if(ubFamily == 0x3D)
    243a:	2a3d      	cmp	r2, #61	; 0x3d
    243c:	f000 80a9 	beq.w	2592 <get_device_name+0x236>
        szFamily = "EFR32FG14P";
    else if(ubFamily == 0x3E)
    2440:	2a3e      	cmp	r2, #62	; 0x3e
    2442:	f000 80a8 	beq.w	2596 <get_device_name+0x23a>
        szFamily = "EFR32FG14B";
    else if(ubFamily == 0x3F)
    2446:	2a3f      	cmp	r2, #63	; 0x3f
    2448:	f000 80a7 	beq.w	259a <get_device_name+0x23e>
        szFamily = "EFR32FG14V";
    else if(ubFamily == 0x47)
    244c:	2a47      	cmp	r2, #71	; 0x47
    244e:	f000 80a6 	beq.w	259e <get_device_name+0x242>
        szFamily = "EFM32G";
    else if(ubFamily == 0x47)
        szFamily = "G";
    else if(ubFamily == 0x48)
    2452:	2a48      	cmp	r2, #72	; 0x48
    2454:	f000 80a5 	beq.w	25a2 <get_device_name+0x246>
        szFamily = "EFM32GG";
    else if(ubFamily == 0x48)
        szFamily = "GG";
    else if(ubFamily == 0x49)
    2458:	2a49      	cmp	r2, #73	; 0x49
    245a:	f000 80a4 	beq.w	25a6 <get_device_name+0x24a>
        szFamily = "TG";
    else if(ubFamily == 0x49)
        szFamily = "EFM32TG";
    else if(ubFamily == 0x4A)
    245e:	2a4a      	cmp	r2, #74	; 0x4a
    2460:	f000 80a3 	beq.w	25aa <get_device_name+0x24e>
        szFamily = "EFM32LG";
    else if(ubFamily == 0x4A)
        szFamily = "LG";
    else if(ubFamily == 0x4B)
    2464:	2a4b      	cmp	r2, #75	; 0x4b
    2466:	f000 80a2 	beq.w	25ae <get_device_name+0x252>
        szFamily = "EFM32WG";
    else if(ubFamily == 0x4B)
        szFamily = "WG";
    else if(ubFamily == 0x4C)
    246a:	2a4c      	cmp	r2, #76	; 0x4c
    246c:	f000 80a1 	beq.w	25b2 <get_device_name+0x256>
        szFamily = "ZG";
    else if(ubFamily == 0x4C)
        szFamily = "EFM32ZG";
    else if(ubFamily == 0x4D)
    2470:	2a4d      	cmp	r2, #77	; 0x4d
    2472:	f000 80a0 	beq.w	25b6 <get_device_name+0x25a>
        szFamily = "HG";
    else if(ubFamily == 0x4D)
        szFamily = "EFM32HG";
    else if(ubFamily == 0x51)
    2476:	2a51      	cmp	r2, #81	; 0x51
    2478:	f000 809f 	beq.w	25ba <get_device_name+0x25e>
        szFamily = "EFM32PG1B";
    else if(ubFamily == 0x53)
    247c:	2a53      	cmp	r2, #83	; 0x53
    247e:	f000 809e 	beq.w	25be <get_device_name+0x262>
        szFamily = "EFM32JG1B";
    else if(ubFamily == 0x55)
    2482:	2a55      	cmp	r2, #85	; 0x55
    2484:	f000 809d 	beq.w	25c2 <get_device_name+0x266>
        szFamily = "EFM32PG12B";
    else if(ubFamily == 0x57)
    2488:	2a57      	cmp	r2, #87	; 0x57
    248a:	f000 809c 	beq.w	25c6 <get_device_name+0x26a>
        szFamily = "EFM32JG12B";
    else if(ubFamily == 0x64)
    248e:	2a64      	cmp	r2, #100	; 0x64
    2490:	f000 809b 	beq.w	25ca <get_device_name+0x26e>
        szFamily = "EFM32GG11B";
    else if(ubFamily == 0x67)
    2494:	2a67      	cmp	r2, #103	; 0x67
    2496:	f000 809a 	beq.w	25ce <get_device_name+0x272>
        szFamily = "EFM32TG11B";
    else if(ubFamily == 0x6A)
    249a:	2a6a      	cmp	r2, #106	; 0x6a
    249c:	f000 8099 	beq.w	25d2 <get_device_name+0x276>
        szFamily = "EFM32GG12B";
    else if(ubFamily == 0x78)
    24a0:	2a78      	cmp	r2, #120	; 0x78
    24a2:	f000 8098 	beq.w	25d6 <get_device_name+0x27a>
        szFamily = "EZR32LG";
    else if(ubFamily == 0x79)
    24a6:	2a79      	cmp	r2, #121	; 0x79
    24a8:	f000 8097 	beq.w	25da <get_device_name+0x27e>
        szFamily = "EZR32WG";
    else if(ubFamily == 0x7A)
        szFamily = "EZR32HG";
    24ac:	4d4f      	ldr	r5, [pc, #316]	; (25ec <get_device_name+0x290>)
    24ae:	4b50      	ldr	r3, [pc, #320]	; (25f0 <get_device_name+0x294>)
    24b0:	2a7a      	cmp	r2, #122	; 0x7a
    24b2:	bf18      	it	ne
    24b4:	462b      	movne	r3, r5
    
    uint8_t ubPackage = (DEVINFO->MEMINFO & _DEVINFO_MEMINFO_PKGTYPE_MASK) >> _DEVINFO_MEMINFO_PKGTYPE_SHIFT;
    24b6:	6b62      	ldr	r2, [r4, #52]	; 0x34
    24b8:	f3c2 2207 	ubfx	r2, r2, #8, #8
    char cPackage = '?';
    
    if(ubPackage == 74)
    24bc:	2a4a      	cmp	r2, #74	; 0x4a
    24be:	f000 808e 	beq.w	25de <get_device_name+0x282>
        cPackage = '?';
    else if(ubPackage == 76)
    24c2:	2a4c      	cmp	r2, #76	; 0x4c
    24c4:	d005      	beq.n	24d2 <get_device_name+0x176>
        cPackage = 'L';
    else if(ubPackage == 77)
    24c6:	2a4d      	cmp	r2, #77	; 0x4d
    24c8:	d003      	beq.n	24d2 <get_device_name+0x176>
        cPackage = 'M';
    else if(ubPackage == 81)
        cPackage = 'Q';
    24ca:	2a51      	cmp	r2, #81	; 0x51
    24cc:	bf14      	ite	ne
    24ce:	223f      	movne	r2, #63	; 0x3f
    24d0:	2251      	moveq	r2, #81	; 0x51

    uint8_t ubTempGrade = (DEVINFO->MEMINFO & _DEVINFO_MEMINFO_TEMPGRADE_MASK) >> _DEVINFO_MEMINFO_TEMPGRADE_SHIFT;
    24d2:	6b65      	ldr	r5, [r4, #52]	; 0x34
    char cTempGrade = '?';

    if(ubTempGrade == 0)
    24d4:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    24d8:	f000 8083 	beq.w	25e2 <get_device_name+0x286>
        cTempGrade = 'G';
    else if(ubTempGrade == 1)
        cTempGrade = 'I';
    else if(ubTempGrade == 2)
        cTempGrade = '?';
    24dc:	2d01      	cmp	r5, #1
    24de:	bf0c      	ite	eq
    24e0:	2649      	moveq	r6, #73	; 0x49
    24e2:	263f      	movne	r6, #63	; 0x3f
    else if(ubTempGrade == 3)
        cTempGrade = '?';

    uint16_t usPartNumber = (DEVINFO->PART & _DEVINFO_PART_DEVICE_NUMBER_MASK) >> _DEVINFO_PART_DEVICE_NUMBER_SHIFT;
    24e4:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
    uint8_t ubPinCount = (DEVINFO->MEMINFO & _DEVINFO_MEMINFO_PINCOUNT_MASK) >> _DEVINFO_MEMINFO_PINCOUNT_SHIFT;
    24e6:	6b64      	ldr	r4, [r4, #52]	; 0x34

    snprintf(pszDeviceName, ulDeviceNameSize, "%s%huF%hu%c%c%hhu", szFamily, usPartNumber, FLASH_SIZE >> 10, cTempGrade, cPackage, ubPinCount);
    24e8:	9602      	str	r6, [sp, #8]
    24ea:	f3c4 4407 	ubfx	r4, r4, #16, #8
    24ee:	e9cd 2403 	strd	r2, r4, [sp, #12]
    24f2:	b2ad      	uxth	r5, r5
    24f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
    24f8:	9201      	str	r2, [sp, #4]
    24fa:	9500      	str	r5, [sp, #0]
    24fc:	4a3d      	ldr	r2, [pc, #244]	; (25f4 <get_device_name+0x298>)
    24fe:	f001 fdf1 	bl	40e4 <snprintf>
}
    2502:	b006      	add	sp, #24
    2504:	bd70      	pop	{r4, r5, r6, pc}
        szFamily = "EFR32MG1P";
    2506:	4b3c      	ldr	r3, [pc, #240]	; (25f8 <get_device_name+0x29c>)
    2508:	e7d5      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "EFR32MG1B";
    250a:	4b3c      	ldr	r3, [pc, #240]	; (25fc <get_device_name+0x2a0>)
    250c:	e7d3      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "EFR32MG1V";
    250e:	4b3c      	ldr	r3, [pc, #240]	; (2600 <get_device_name+0x2a4>)
    2510:	e7d1      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "EFR32BG1P";
    2512:	4b3c      	ldr	r3, [pc, #240]	; (2604 <get_device_name+0x2a8>)
    2514:	e7cf      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "EFR32BG1B";
    2516:	4b3c      	ldr	r3, [pc, #240]	; (2608 <get_device_name+0x2ac>)
    2518:	e7cd      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "EFR32BG1V";
    251a:	4b3c      	ldr	r3, [pc, #240]	; (260c <get_device_name+0x2b0>)
    251c:	e7cb      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "EFR32FG1P";
    251e:	4b3c      	ldr	r3, [pc, #240]	; (2610 <get_device_name+0x2b4>)
    2520:	e7c9      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "EFR32FG1B";
    2522:	4b3c      	ldr	r3, [pc, #240]	; (2614 <get_device_name+0x2b8>)
    2524:	e7c7      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "EFR32FG1V";
    2526:	4b3c      	ldr	r3, [pc, #240]	; (2618 <get_device_name+0x2bc>)
    2528:	e7c5      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "EFR32MG12P";
    252a:	4b3c      	ldr	r3, [pc, #240]	; (261c <get_device_name+0x2c0>)
    252c:	e7c3      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "EFR32MG12B";
    252e:	4b3c      	ldr	r3, [pc, #240]	; (2620 <get_device_name+0x2c4>)
    2530:	e7c1      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "EFR32MG12V";
    2532:	4b3c      	ldr	r3, [pc, #240]	; (2624 <get_device_name+0x2c8>)
    2534:	e7bf      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "EFR32BG12P";
    2536:	4b3c      	ldr	r3, [pc, #240]	; (2628 <get_device_name+0x2cc>)
    2538:	e7bd      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "EFR32BG12B";
    253a:	4b3c      	ldr	r3, [pc, #240]	; (262c <get_device_name+0x2d0>)
    253c:	e7bb      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "EFR32BG12V";
    253e:	4b3c      	ldr	r3, [pc, #240]	; (2630 <get_device_name+0x2d4>)
    2540:	e7b9      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "EFR32FG12P";
    2542:	4b3c      	ldr	r3, [pc, #240]	; (2634 <get_device_name+0x2d8>)
    2544:	e7b7      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "EFR32FG12B";
    2546:	4b3c      	ldr	r3, [pc, #240]	; (2638 <get_device_name+0x2dc>)
    2548:	e7b5      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "EFR32FG12V";
    254a:	4b3c      	ldr	r3, [pc, #240]	; (263c <get_device_name+0x2e0>)
    254c:	e7b3      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "EFR32MG13P";
    254e:	4b3c      	ldr	r3, [pc, #240]	; (2640 <get_device_name+0x2e4>)
    2550:	e7b1      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "EFR32MG13B";
    2552:	4b3c      	ldr	r3, [pc, #240]	; (2644 <get_device_name+0x2e8>)
    2554:	e7af      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "EFR32MG13V";
    2556:	4b3c      	ldr	r3, [pc, #240]	; (2648 <get_device_name+0x2ec>)
    2558:	e7ad      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "EFR32BG13P";
    255a:	4b3c      	ldr	r3, [pc, #240]	; (264c <get_device_name+0x2f0>)
    255c:	e7ab      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "EFR32BG13B";
    255e:	4b3c      	ldr	r3, [pc, #240]	; (2650 <get_device_name+0x2f4>)
    2560:	e7a9      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "EFR32BG13V";
    2562:	4b3c      	ldr	r3, [pc, #240]	; (2654 <get_device_name+0x2f8>)
    2564:	e7a7      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "EFR32ZG13P";
    2566:	4b3c      	ldr	r3, [pc, #240]	; (2658 <get_device_name+0x2fc>)
    2568:	e7a5      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "EFR32FG13P";
    256a:	4b3c      	ldr	r3, [pc, #240]	; (265c <get_device_name+0x300>)
    256c:	e7a3      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "EFR32FG13B";
    256e:	4b3c      	ldr	r3, [pc, #240]	; (2660 <get_device_name+0x304>)
    2570:	e7a1      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "EFR32FG13V";
    2572:	4b3c      	ldr	r3, [pc, #240]	; (2664 <get_device_name+0x308>)
    2574:	e79f      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "EFR32MG14P";
    2576:	4b3c      	ldr	r3, [pc, #240]	; (2668 <get_device_name+0x30c>)
    2578:	e79d      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "EFR32MG14B";
    257a:	4b3c      	ldr	r3, [pc, #240]	; (266c <get_device_name+0x310>)
    257c:	e79b      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "EFR32MG14V";
    257e:	4b3c      	ldr	r3, [pc, #240]	; (2670 <get_device_name+0x314>)
    2580:	e799      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "EFR32BG14P";
    2582:	4b3c      	ldr	r3, [pc, #240]	; (2674 <get_device_name+0x318>)
    2584:	e797      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "EFR32BG14B";
    2586:	4b3c      	ldr	r3, [pc, #240]	; (2678 <get_device_name+0x31c>)
    2588:	e795      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "EFR32BG14V";
    258a:	4b3c      	ldr	r3, [pc, #240]	; (267c <get_device_name+0x320>)
    258c:	e793      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "EFR32ZG14P";
    258e:	4b3c      	ldr	r3, [pc, #240]	; (2680 <get_device_name+0x324>)
    2590:	e791      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "EFR32FG14P";
    2592:	4b3c      	ldr	r3, [pc, #240]	; (2684 <get_device_name+0x328>)
    2594:	e78f      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "EFR32FG14B";
    2596:	4b3c      	ldr	r3, [pc, #240]	; (2688 <get_device_name+0x32c>)
    2598:	e78d      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "EFR32FG14V";
    259a:	4b3c      	ldr	r3, [pc, #240]	; (268c <get_device_name+0x330>)
    259c:	e78b      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "EFM32G";
    259e:	4b3c      	ldr	r3, [pc, #240]	; (2690 <get_device_name+0x334>)
    25a0:	e789      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "EFM32GG";
    25a2:	4b3c      	ldr	r3, [pc, #240]	; (2694 <get_device_name+0x338>)
    25a4:	e787      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "TG";
    25a6:	4b3c      	ldr	r3, [pc, #240]	; (2698 <get_device_name+0x33c>)
    25a8:	e785      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "EFM32LG";
    25aa:	4b3c      	ldr	r3, [pc, #240]	; (269c <get_device_name+0x340>)
    25ac:	e783      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "EFM32WG";
    25ae:	4b3c      	ldr	r3, [pc, #240]	; (26a0 <get_device_name+0x344>)
    25b0:	e781      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "ZG";
    25b2:	4b3c      	ldr	r3, [pc, #240]	; (26a4 <get_device_name+0x348>)
    25b4:	e77f      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "HG";
    25b6:	4b3c      	ldr	r3, [pc, #240]	; (26a8 <get_device_name+0x34c>)
    25b8:	e77d      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "EFM32PG1B";
    25ba:	4b3c      	ldr	r3, [pc, #240]	; (26ac <get_device_name+0x350>)
    25bc:	e77b      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "EFM32JG1B";
    25be:	4b3c      	ldr	r3, [pc, #240]	; (26b0 <get_device_name+0x354>)
    25c0:	e779      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "EFM32PG12B";
    25c2:	4b3c      	ldr	r3, [pc, #240]	; (26b4 <get_device_name+0x358>)
    25c4:	e777      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "EFM32JG12B";
    25c6:	4b3c      	ldr	r3, [pc, #240]	; (26b8 <get_device_name+0x35c>)
    25c8:	e775      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "EFM32GG11B";
    25ca:	4b3c      	ldr	r3, [pc, #240]	; (26bc <get_device_name+0x360>)
    25cc:	e773      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "EFM32TG11B";
    25ce:	4b3c      	ldr	r3, [pc, #240]	; (26c0 <get_device_name+0x364>)
    25d0:	e771      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "EFM32GG12B";
    25d2:	4b3c      	ldr	r3, [pc, #240]	; (26c4 <get_device_name+0x368>)
    25d4:	e76f      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "EZR32LG";
    25d6:	4b3c      	ldr	r3, [pc, #240]	; (26c8 <get_device_name+0x36c>)
    25d8:	e76d      	b.n	24b6 <get_device_name+0x15a>
        szFamily = "EZR32WG";
    25da:	4b3c      	ldr	r3, [pc, #240]	; (26cc <get_device_name+0x370>)
    25dc:	e76b      	b.n	24b6 <get_device_name+0x15a>
        cPackage = '?';
    25de:	223f      	movs	r2, #63	; 0x3f
    25e0:	e777      	b.n	24d2 <get_device_name+0x176>
        cTempGrade = 'G';
    25e2:	2647      	movs	r6, #71	; 0x47
    25e4:	e77e      	b.n	24e4 <get_device_name+0x188>
    25e6:	bf00      	nop
    25e8:	0fe081b0 	.word	0x0fe081b0
    25ec:	00004600 	.word	0x00004600
    25f0:	00004811 	.word	0x00004811
    25f4:	00004819 	.word	0x00004819
    25f8:	00004602 	.word	0x00004602
    25fc:	0000460c 	.word	0x0000460c
    2600:	00004616 	.word	0x00004616
    2604:	00004620 	.word	0x00004620
    2608:	0000462a 	.word	0x0000462a
    260c:	00004634 	.word	0x00004634
    2610:	0000463e 	.word	0x0000463e
    2614:	00004648 	.word	0x00004648
    2618:	00004652 	.word	0x00004652
    261c:	0000465c 	.word	0x0000465c
    2620:	00004667 	.word	0x00004667
    2624:	00004672 	.word	0x00004672
    2628:	0000467d 	.word	0x0000467d
    262c:	00004688 	.word	0x00004688
    2630:	00004693 	.word	0x00004693
    2634:	0000469e 	.word	0x0000469e
    2638:	000046a9 	.word	0x000046a9
    263c:	000046b4 	.word	0x000046b4
    2640:	000046bf 	.word	0x000046bf
    2644:	000046ca 	.word	0x000046ca
    2648:	000046d5 	.word	0x000046d5
    264c:	000046e0 	.word	0x000046e0
    2650:	000046eb 	.word	0x000046eb
    2654:	000046f6 	.word	0x000046f6
    2658:	00004701 	.word	0x00004701
    265c:	0000470c 	.word	0x0000470c
    2660:	00004717 	.word	0x00004717
    2664:	00004722 	.word	0x00004722
    2668:	0000472d 	.word	0x0000472d
    266c:	00004738 	.word	0x00004738
    2670:	00004743 	.word	0x00004743
    2674:	0000474e 	.word	0x0000474e
    2678:	00004759 	.word	0x00004759
    267c:	00004764 	.word	0x00004764
    2680:	0000476f 	.word	0x0000476f
    2684:	0000477a 	.word	0x0000477a
    2688:	00004785 	.word	0x00004785
    268c:	00004798 	.word	0x00004798
    2690:	000047ab 	.word	0x000047ab
    2694:	000047bd 	.word	0x000047bd
    2698:	000047d0 	.word	0x000047d0
    269c:	000047de 	.word	0x000047de
    26a0:	000047f1 	.word	0x000047f1
    26a4:	00004804 	.word	0x00004804
    26a8:	00004816 	.word	0x00004816
    26ac:	00004807 	.word	0x00004807
    26b0:	000045f6 	.word	0x000045f6
    26b4:	000047f9 	.word	0x000047f9
    26b8:	000047e6 	.word	0x000047e6
    26bc:	000047d3 	.word	0x000047d3
    26c0:	000047c5 	.word	0x000047c5
    26c4:	000047b2 	.word	0x000047b2
    26c8:	000047a3 	.word	0x000047a3
    26cc:	00004790 	.word	0x00004790

000026d0 <init>:
    GPIO->ROUTEPEN |= GPIO_ROUTEPEN_SWVPEN; // Enable SWO
    GPIO->ROUTELOC0 = GPIO_ROUTELOC0_SWVLOC_LOC0; // SWO on PF2
}

int init()
{
    26d0:	b570      	push	{r4, r5, r6, lr}
    26d2:	ed2d 8b04 	vpush	{d8-d9}
    26d6:	b08c      	sub	sp, #48	; 0x30
    emu_init(); // Init EMU
    26d8:	f7ff fd3c 	bl	2154 <emu_init>
    cmu_hfxo_startup_calib(0x200, 0x087); // Config HFXO Startup for 1280 uA, 20.04 pF
    cmu_hfxo_steady_calib(0x006, 0x087); // Config HFXO Steady state for 12 uA, 20.04 pF

    cmu_init(); // Inic Clocks

    cmu_ushfrco_calib(1, USHFRCO_CALIB_50M, 50000000); // Enable and calibrate USHFRCO for 50 MHz
    26dc:	4dd2      	ldr	r5, [pc, #840]	; (2a28 <init+0x358>)
    cmu_hfxo_startup_calib(0x200, 0x087); // Config HFXO Startup for 1280 uA, 20.04 pF
    26de:	2187      	movs	r1, #135	; 0x87
    26e0:	f44f 7000 	mov.w	r0, #512	; 0x200
    26e4:	f7fe fed8 	bl	1498 <cmu_hfxo_startup_calib>
    cmu_hfxo_steady_calib(0x006, 0x087); // Config HFXO Steady state for 12 uA, 20.04 pF
    26e8:	2187      	movs	r1, #135	; 0x87
    26ea:	2006      	movs	r0, #6
    26ec:	f7fe ff12 	bl	1514 <cmu_hfxo_steady_calib>
    cmu_init(); // Inic Clocks
    26f0:	f7fe fdb8 	bl	1264 <cmu_init>
    cmu_ushfrco_calib(1, USHFRCO_CALIB_50M, 50000000); // Enable and calibrate USHFRCO for 50 MHz
    26f4:	f8d5 1288 	ldr.w	r1, [r5, #648]	; 0x288
    26f8:	4acc      	ldr	r2, [pc, #816]	; (2a2c <init+0x35c>)
    26fa:	2001      	movs	r0, #1
    26fc:	f7fe fe7c 	bl	13f8 <cmu_ushfrco_calib>
    cmu_auxhfrco_calib(1, AUXHFRCO_CALIB_32M, 32000000); // Enable and calibrate AUXHFRCO for 32 MHz
    2700:	4acb      	ldr	r2, [pc, #812]	; (2a30 <init+0x360>)
    2702:	f8d5 110c 	ldr.w	r1, [r5, #268]	; 0x10c
    2706:	2001      	movs	r0, #1
    2708:	f7fe fea2 	bl	1450 <cmu_auxhfrco_calib>

    cmu_update_clocks(); // Update Clocks
    270c:	f7fe fb40 	bl	d90 <cmu_update_clocks>

    dbg_init(); // Init Debug module
    2710:	f7fe ffb8 	bl	1684 <dbg_init>
    dbg_swo_config(BIT(0) | BIT(1), 2000000); // Init SWO channels 0 and 1 at 2 MHz
    2714:	49c7      	ldr	r1, [pc, #796]	; (2a34 <init+0x364>)
    2716:	2003      	movs	r0, #3
    2718:	f7fe ffbc 	bl	1694 <dbg_swo_config>

    msc_init(); // Init Flash, RAM and caches
    271c:	f7ff fa1a 	bl	1b54 <msc_init>

    systick_init(); // Init system tick
    2720:	f000 fdda 	bl	32d8 <systick_init>
    CMU->HFBUSCLKEN0 |= CMU_HFBUSCLKEN0_GPIO;
    2724:	4ac4      	ldr	r2, [pc, #784]	; (2a38 <init+0x368>)
    2726:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
    272a:	f043 0320 	orr.w	r3, r3, #32
    272e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
    GPIO->P[0].MODEL = GPIO_P_MODEL_MODE0_PUSHPULL  // GPIO - LED
    2732:	4bc2      	ldr	r3, [pc, #776]	; (2a3c <init+0x36c>)
    2734:	2204      	movs	r2, #4
    2736:	605a      	str	r2, [r3, #4]
    GPIO->P[0].MODEH = GPIO_P_MODEH_MODE8_DISABLED
    2738:	2400      	movs	r4, #0
    GPIO->P[2].MODEL = GPIO_P_MODEL_MODE0_DISABLED
    273a:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
    GPIO->P[0].MODEH = GPIO_P_MODEH_MODE8_DISABLED
    273e:	609c      	str	r4, [r3, #8]
    GPIO->P[1].MODEL = GPIO_P_MODEL_MODE0_DISABLED
    2740:	635c      	str	r4, [r3, #52]	; 0x34
    GPIO->P[1].MODEH = GPIO_P_MODEH_MODE8_DISABLED
    2742:	639c      	str	r4, [r3, #56]	; 0x38
    GPIO->P[2].MODEL = GPIO_P_MODEL_MODE0_DISABLED
    2744:	665a      	str	r2, [r3, #100]	; 0x64
    GPIO->P[3].MODEH = GPIO_P_MODEH_MODE8_DISABLED
    2746:	4abe      	ldr	r2, [pc, #760]	; (2a40 <init+0x370>)
    GPIO->P[2].MODEH = GPIO_P_MODEH_MODE8_DISABLED
    2748:	669c      	str	r4, [r3, #104]	; 0x68
    GPIO->P[3].MODEL = GPIO_P_MODEL_MODE0_DISABLED
    274a:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
    GPIO->P[3].MODEH = GPIO_P_MODEH_MODE8_DISABLED
    274e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    GPIO->P[5].MODEL = GPIO_P_MODEL_MODE0_DISABLED
    2752:	4abc      	ldr	r2, [pc, #752]	; (2a44 <init+0x374>)
    GPIO->P[4].MODEL = GPIO_P_MODEL_MODE0_DISABLED
    2754:	f8c3 40c4 	str.w	r4, [r3, #196]	; 0xc4
    GPIO->P[4].MODEH = GPIO_P_MODEH_MODE8_DISABLED
    2758:	f8c3 40c8 	str.w	r4, [r3, #200]	; 0xc8
    GPIO->P[5].MODEL = GPIO_P_MODEL_MODE0_DISABLED
    275c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    GPIO->P[5].MODEH = GPIO_P_MODEH_MODE8_DISABLED
    2760:	f8c3 40f8 	str.w	r4, [r3, #248]	; 0xf8
    GPIO->ROUTEPEN &= ~(GPIO_ROUTEPEN_TDIPEN | GPIO_ROUTEPEN_TDOPEN); // Disable JTAG
    2764:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
    2768:	f022 020c 	bic.w	r2, r2, #12
    276c:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
    GPIO->ROUTEPEN |= GPIO_ROUTEPEN_SWVPEN; // Enable SWO
    2770:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
    2774:	f042 0210 	orr.w	r2, r2, #16
    2778:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
    GPIO->ROUTELOC0 = GPIO_ROUTELOC0_SWVLOC_LOC0; // SWO on PF2
    277c:	f8c3 4444 	str.w	r4, [r3, #1092]	; 0x444

    gpio_init(); // Init GPIOs
    rtcc_init(); // Init RTCC
    2780:	f000 fd66 	bl	3250 <rtcc_init>
    crypto_init(); // Init Crypto engine
    2784:	f7fe ffcc 	bl	1720 <crypto_init>
    crc_init(); // Init CRC calculation unit
    2788:	f7fe ff68 	bl	165c <crc_init>
    adc_init(); // Init ADCs
    278c:	f000 fe62 	bl	3454 <adc_init>
    qspi_init(); // Init QSPI memory
    2790:	f7ff fbe8 	bl	1f64 <qspi_init>
    
    float fAVDDHighThresh, fAVDDLowThresh;
    float fDVDDHighThresh, fDVDDLowThresh;
    float fIOVDDHighThresh, fIOVDDLowThresh;

    emu_vmon_avdd_config(1, 3.1f, &fAVDDLowThresh, 3.22f, &fAVDDHighThresh); // Enable AVDD monitor
    2794:	eddf 0aac 	vldr	s1, [pc, #688]	; 2a48 <init+0x378>
    2798:	ed9f 0aac 	vldr	s0, [pc, #688]	; 2a4c <init+0x37c>
    279c:	466a      	mov	r2, sp
    279e:	a901      	add	r1, sp, #4
    27a0:	2001      	movs	r0, #1
    27a2:	f7ff fd1b 	bl	21dc <emu_vmon_avdd_config>
    emu_vmon_dvdd_config(1, 2.5f, &fDVDDLowThresh); // Enable DVDD monitor
    27a6:	a902      	add	r1, sp, #8
    27a8:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
    27ac:	2001      	movs	r0, #1
    27ae:	f7ff fd69 	bl	2284 <emu_vmon_dvdd_config>
    emu_vmon_iovdd_config(1, 3.15f, &fIOVDDLowThresh); // Enable IOVDD monitor
    27b2:	ed9f 0aa7 	vldr	s0, [pc, #668]	; 2a50 <init+0x380>
    27b6:	a903      	add	r1, sp, #12
    27b8:	2001      	movs	r0, #1
    27ba:	f7ff fd99 	bl	22f0 <emu_vmon_iovdd_config>

    fDVDDHighThresh = fDVDDLowThresh + 0.026f; // Hysteresis from datasheet
    27be:	eddf 7aa5 	vldr	s15, [pc, #660]	; 2a54 <init+0x384>
    27c2:	eddd 9a02 	vldr	s19, [sp, #8]
    fIOVDDHighThresh = fIOVDDLowThresh + 0.026f; // Hysteresis from datasheet
    27c6:	ed9d 9a03 	vldr	s18, [sp, #12]

    i2c1_init(I2C_FAST, 0, 0); // Init I2C1 at 400 kHz on location 0
    27ca:	4622      	mov	r2, r4
    27cc:	4621      	mov	r1, r4
    27ce:	2001      	movs	r0, #1
    fDVDDHighThresh = fDVDDLowThresh + 0.026f; // Hysteresis from datasheet
    27d0:	ee79 9aa7 	vadd.f32	s19, s19, s15
    fIOVDDHighThresh = fIOVDDLowThresh + 0.026f; // Hysteresis from datasheet
    27d4:	ee39 9a27 	vadd.f32	s18, s18, s15
    i2c1_init(I2C_FAST, 0, 0); // Init I2C1 at 400 kHz on location 0
    27d8:	f000 fdaa 	bl	3330 <i2c1_init>

    char szDeviceName[32];

    get_device_name(szDeviceName, 32);
    27dc:	a804      	add	r0, sp, #16
    27de:	2120      	movs	r1, #32
    27e0:	f7ff fdbc 	bl	235c <get_device_name>

    DBGPRINTLN_CTX("Device: %s", szDeviceName);
    27e4:	aa04      	add	r2, sp, #16
    27e6:	499c      	ldr	r1, [pc, #624]	; (2a58 <init+0x388>)
    27e8:	489c      	ldr	r0, [pc, #624]	; (2a5c <init+0x38c>)
    27ea:	f001 fc67 	bl	40bc <printf>
    usRevision = ((ROMTABLE->PID0 & _ROMTABLE_PID0_REVMAJOR_MASK) >> _ROMTABLE_PID0_REVMAJOR_SHIFT) << 8;
    27ee:	499c      	ldr	r1, [pc, #624]	; (2a60 <init+0x390>)
    DBGPRINTLN_CTX("Device Revision: 0x%04X", get_device_revision());
    27f0:	489c      	ldr	r0, [pc, #624]	; (2a64 <init+0x394>)
    usRevision = ((ROMTABLE->PID0 & _ROMTABLE_PID0_REVMAJOR_MASK) >> _ROMTABLE_PID0_REVMAJOR_SHIFT) << 8;
    27f2:	690b      	ldr	r3, [r1, #16]
    usRevision |= ((ROMTABLE->PID2 & _ROMTABLE_PID2_REVMINORMSB_MASK) >> _ROMTABLE_PID2_REVMINORMSB_SHIFT) << 4;
    27f4:	698a      	ldr	r2, [r1, #24]
    usRevision |= (ROMTABLE->PID3 & _ROMTABLE_PID3_REVMINORLSB_MASK) >> _ROMTABLE_PID3_REVMINORLSB_SHIFT;
    27f6:	69c9      	ldr	r1, [r1, #28]
    usRevision = ((ROMTABLE->PID0 & _ROMTABLE_PID0_REVMAJOR_MASK) >> _ROMTABLE_PID0_REVMAJOR_SHIFT) << 8;
    27f8:	021b      	lsls	r3, r3, #8
    usRevision |= (ROMTABLE->PID3 & _ROMTABLE_PID3_REVMINORLSB_MASK) >> _ROMTABLE_PID3_REVMINORLSB_SHIFT;
    27fa:	f3c1 1103 	ubfx	r1, r1, #4, #4
    usRevision = ((ROMTABLE->PID0 & _ROMTABLE_PID0_REVMAJOR_MASK) >> _ROMTABLE_PID0_REVMAJOR_SHIFT) << 8;
    27fe:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    2802:	430b      	orrs	r3, r1
    usRevision |= ((ROMTABLE->PID2 & _ROMTABLE_PID2_REVMINORMSB_MASK) >> _ROMTABLE_PID2_REVMINORMSB_SHIFT) << 4;
    2804:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    DBGPRINTLN_CTX("Device Revision: 0x%04X", get_device_revision());
    2808:	431a      	orrs	r2, r3
    280a:	4993      	ldr	r1, [pc, #588]	; (2a58 <init+0x388>)
    280c:	f001 fc56 	bl	40bc <printf>
    DBGPRINTLN_CTX("Calibration temperature: %hhu C", (DEVINFO->CAL & _DEVINFO_CAL_TEMP_MASK) >> _DEVINFO_CAL_TEMP_SHIFT);
    2810:	682a      	ldr	r2, [r5, #0]
    2812:	4991      	ldr	r1, [pc, #580]	; (2a58 <init+0x388>)
    2814:	4894      	ldr	r0, [pc, #592]	; (2a68 <init+0x398>)
    2816:	f3c2 4207 	ubfx	r2, r2, #16, #8
    281a:	f001 fc4f 	bl	40bc <printf>
    DBGPRINTLN_CTX("Flash Size: %hu kB", FLASH_SIZE >> 10);
    281e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2822:	498d      	ldr	r1, [pc, #564]	; (2a58 <init+0x388>)
    2824:	4891      	ldr	r0, [pc, #580]	; (2a6c <init+0x39c>)
    2826:	f001 fc49 	bl	40bc <printf>
    DBGPRINTLN_CTX("RAM Size: %hu kB", SRAM_SIZE >> 10);
    282a:	f44f 7200 	mov.w	r2, #512	; 0x200
    282e:	498a      	ldr	r1, [pc, #552]	; (2a58 <init+0x388>)
    2830:	488f      	ldr	r0, [pc, #572]	; (2a70 <init+0x3a0>)
    2832:	f001 fc43 	bl	40bc <printf>
    void *pCurrentHeap = malloc(1);
    2836:	2001      	movs	r0, #1
    2838:	f001 fc98 	bl	416c <malloc>
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
    283c:	f3ef 8608 	mrs	r6, MSP
    uint32_t ulFreeRAM = (uint32_t)__get_MSP() - (uint32_t)pCurrentHeap;
    2840:	1a36      	subs	r6, r6, r0
    free(pCurrentHeap);
    2842:	f001 fc9b 	bl	417c <free>
    DBGPRINTLN_CTX("Free RAM: %lu B", get_free_ram());
    2846:	4632      	mov	r2, r6
    2848:	4983      	ldr	r1, [pc, #524]	; (2a58 <init+0x388>)
    284a:	488a      	ldr	r0, [pc, #552]	; (2a74 <init+0x3a4>)
    DBGPRINTLN_CTX("Unique ID: %08X-%08X", DEVINFO->UNIQUEH, DEVINFO->UNIQUEL);

    DBGPRINTLN_CTX("CMU - HFXO Clock: %.1f MHz!", (float)HFXO_VALUE / 1000000);
    DBGPRINTLN_CTX("CMU - HFRCO Clock: %.1f MHz!", (float)HFRCO_VALUE / 1000000);
    284c:	eddf 8a8a 	vldr	s17, [pc, #552]	; 2a78 <init+0x3a8>
    DBGPRINTLN_CTX("CMU - USHFRCO Clock: %.1f MHz!", (float)USHFRCO_VALUE / 1000000);
    DBGPRINTLN_CTX("CMU - AUXHFRCO Clock: %.1f MHz!", (float)AUXHFRCO_VALUE / 1000000);
    DBGPRINTLN_CTX("CMU - LFXO Clock: %.3f kHz!", (float)LFXO_VALUE / 1000);
    DBGPRINTLN_CTX("CMU - LFRCO Clock: %.3f kHz!", (float)LFRCO_VALUE / 1000);
    2850:	ed9f 8a8a 	vldr	s16, [pc, #552]	; 2a7c <init+0x3ac>
    DBGPRINTLN_CTX("CMU - RTCC Clock: %.3f kHz!", (float)RTCC_CLOCK_FREQ / 1000);

    DBGPRINTLN_CTX("EMU - AVDD Fall Threshold: %.2f mV!", fAVDDLowThresh * 1000);
    DBGPRINTLN_CTX("EMU - AVDD Rise Threshold: %.2f mV!", fAVDDHighThresh * 1000);
    DBGPRINTLN_CTX("EMU - AVDD Voltage: %.2f mV", adc_get_avdd());
    DBGPRINTLN_CTX("EMU - AVDD Status: %s", g_ubAVDDLow ? "LOW" : "OK");
    2854:	4e8a      	ldr	r6, [pc, #552]	; (2a80 <init+0x3b0>)
    DBGPRINTLN_CTX("Free RAM: %lu B", get_free_ram());
    2856:	f001 fc31 	bl	40bc <printf>
    DBGPRINTLN_CTX("Unique ID: %08X-%08X", DEVINFO->UNIQUEH, DEVINFO->UNIQUEL);
    285a:	6c6a      	ldr	r2, [r5, #68]	; 0x44
    285c:	497e      	ldr	r1, [pc, #504]	; (2a58 <init+0x388>)
    285e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    2860:	4888      	ldr	r0, [pc, #544]	; (2a84 <init+0x3b4>)
    DBGPRINTLN_CTX("EMU - AVDD Status: %s", g_ubAVDDLow ? "LOW" : "OK");
    2862:	4d89      	ldr	r5, [pc, #548]	; (2a88 <init+0x3b8>)
    DBGPRINTLN_CTX("Unique ID: %08X-%08X", DEVINFO->UNIQUEH, DEVINFO->UNIQUEL);
    2864:	f001 fc2a 	bl	40bc <printf>
    DBGPRINTLN_CTX("CMU - HFXO Clock: %.1f MHz!", (float)HFXO_VALUE / 1000000);
    2868:	2200      	movs	r2, #0
    286a:	4b88      	ldr	r3, [pc, #544]	; (2a8c <init+0x3bc>)
    286c:	497a      	ldr	r1, [pc, #488]	; (2a58 <init+0x388>)
    286e:	4888      	ldr	r0, [pc, #544]	; (2a90 <init+0x3c0>)
    2870:	f001 fc24 	bl	40bc <printf>
    DBGPRINTLN_CTX("CMU - HFRCO Clock: %.1f MHz!", (float)HFRCO_VALUE / 1000000);
    2874:	4b87      	ldr	r3, [pc, #540]	; (2a94 <init+0x3c4>)
    2876:	edd3 7a00 	vldr	s15, [r3]
    287a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    287e:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    2882:	ee17 0a90 	vmov	r0, s15
    2886:	f7fd fdc7 	bl	418 <__aeabi_f2d>
    288a:	4602      	mov	r2, r0
    288c:	460b      	mov	r3, r1
    288e:	4882      	ldr	r0, [pc, #520]	; (2a98 <init+0x3c8>)
    2890:	4971      	ldr	r1, [pc, #452]	; (2a58 <init+0x388>)
    2892:	f001 fc13 	bl	40bc <printf>
    DBGPRINTLN_CTX("CMU - USHFRCO Clock: %.1f MHz!", (float)USHFRCO_VALUE / 1000000);
    2896:	4b81      	ldr	r3, [pc, #516]	; (2a9c <init+0x3cc>)
    2898:	edd3 7a00 	vldr	s15, [r3]
    289c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    28a0:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    28a4:	ee17 0a90 	vmov	r0, s15
    28a8:	f7fd fdb6 	bl	418 <__aeabi_f2d>
    28ac:	4602      	mov	r2, r0
    28ae:	460b      	mov	r3, r1
    28b0:	487b      	ldr	r0, [pc, #492]	; (2aa0 <init+0x3d0>)
    28b2:	4969      	ldr	r1, [pc, #420]	; (2a58 <init+0x388>)
    28b4:	f001 fc02 	bl	40bc <printf>
    DBGPRINTLN_CTX("CMU - AUXHFRCO Clock: %.1f MHz!", (float)AUXHFRCO_VALUE / 1000000);
    28b8:	4b7a      	ldr	r3, [pc, #488]	; (2aa4 <init+0x3d4>)
    28ba:	edd3 7a00 	vldr	s15, [r3]
    28be:	eef8 7a67 	vcvt.f32.u32	s15, s15
    28c2:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    28c6:	ee17 0a90 	vmov	r0, s15
    28ca:	f7fd fda5 	bl	418 <__aeabi_f2d>
    28ce:	4602      	mov	r2, r0
    28d0:	460b      	mov	r3, r1
    28d2:	4875      	ldr	r0, [pc, #468]	; (2aa8 <init+0x3d8>)
    28d4:	4960      	ldr	r1, [pc, #384]	; (2a58 <init+0x388>)
    28d6:	f001 fbf1 	bl	40bc <printf>
    DBGPRINTLN_CTX("CMU - LFXO Clock: %.3f kHz!", (float)LFXO_VALUE / 1000);
    28da:	a351      	add	r3, pc, #324	; (adr r3, 2a20 <init+0x350>)
    28dc:	e9d3 2300 	ldrd	r2, r3, [r3]
    28e0:	495d      	ldr	r1, [pc, #372]	; (2a58 <init+0x388>)
    28e2:	4872      	ldr	r0, [pc, #456]	; (2aac <init+0x3dc>)
    28e4:	f001 fbea 	bl	40bc <printf>
    DBGPRINTLN_CTX("CMU - LFRCO Clock: %.3f kHz!", (float)LFRCO_VALUE / 1000);
    28e8:	4b71      	ldr	r3, [pc, #452]	; (2ab0 <init+0x3e0>)
    28ea:	edd3 7a00 	vldr	s15, [r3]
    28ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
    28f2:	eec7 7a88 	vdiv.f32	s15, s15, s16
    28f6:	ee17 0a90 	vmov	r0, s15
    28fa:	f7fd fd8d 	bl	418 <__aeabi_f2d>
    28fe:	4602      	mov	r2, r0
    2900:	460b      	mov	r3, r1
    2902:	486c      	ldr	r0, [pc, #432]	; (2ab4 <init+0x3e4>)
    2904:	4954      	ldr	r1, [pc, #336]	; (2a58 <init+0x388>)
    2906:	f001 fbd9 	bl	40bc <printf>
    DBGPRINTLN_CTX("CMU - ULFRCO Clock: %.3f kHz!", (float)ULFRCO_VALUE / 1000);
    290a:	4b6b      	ldr	r3, [pc, #428]	; (2ab8 <init+0x3e8>)
    290c:	edd3 7a00 	vldr	s15, [r3]
    2910:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2914:	eec7 7a88 	vdiv.f32	s15, s15, s16
    2918:	ee17 0a90 	vmov	r0, s15
    291c:	f7fd fd7c 	bl	418 <__aeabi_f2d>
    2920:	4602      	mov	r2, r0
    2922:	460b      	mov	r3, r1
    2924:	4865      	ldr	r0, [pc, #404]	; (2abc <init+0x3ec>)
    2926:	494c      	ldr	r1, [pc, #304]	; (2a58 <init+0x388>)
    2928:	f001 fbc8 	bl	40bc <printf>
    DBGPRINTLN_CTX("CMU - HFSRC Clock: %.1f MHz!", (float)HFSRC_CLOCK_FREQ / 1000000);
    292c:	4b64      	ldr	r3, [pc, #400]	; (2ac0 <init+0x3f0>)
    292e:	edd3 7a00 	vldr	s15, [r3]
    2932:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2936:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    293a:	ee17 0a90 	vmov	r0, s15
    293e:	f7fd fd6b 	bl	418 <__aeabi_f2d>
    2942:	4602      	mov	r2, r0
    2944:	460b      	mov	r3, r1
    2946:	485f      	ldr	r0, [pc, #380]	; (2ac4 <init+0x3f4>)
    2948:	4943      	ldr	r1, [pc, #268]	; (2a58 <init+0x388>)
    294a:	f001 fbb7 	bl	40bc <printf>
    DBGPRINTLN_CTX("CMU - HF Clock: %.1f MHz!", (float)HF_CLOCK_FREQ / 1000000);
    294e:	4b5e      	ldr	r3, [pc, #376]	; (2ac8 <init+0x3f8>)
    2950:	edd3 7a00 	vldr	s15, [r3]
    2954:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2958:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    295c:	ee17 0a90 	vmov	r0, s15
    2960:	f7fd fd5a 	bl	418 <__aeabi_f2d>
    2964:	4602      	mov	r2, r0
    2966:	460b      	mov	r3, r1
    2968:	4858      	ldr	r0, [pc, #352]	; (2acc <init+0x3fc>)
    296a:	493b      	ldr	r1, [pc, #236]	; (2a58 <init+0x388>)
    296c:	f001 fba6 	bl	40bc <printf>
    DBGPRINTLN_CTX("CMU - HFBUS Clock: %.1f MHz!", (float)HFBUS_CLOCK_FREQ / 1000000);
    2970:	4b57      	ldr	r3, [pc, #348]	; (2ad0 <init+0x400>)
    2972:	edd3 7a00 	vldr	s15, [r3]
    2976:	eef8 7a67 	vcvt.f32.u32	s15, s15
    297a:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    297e:	ee17 0a90 	vmov	r0, s15
    2982:	f7fd fd49 	bl	418 <__aeabi_f2d>
    2986:	4602      	mov	r2, r0
    2988:	460b      	mov	r3, r1
    298a:	4852      	ldr	r0, [pc, #328]	; (2ad4 <init+0x404>)
    298c:	4932      	ldr	r1, [pc, #200]	; (2a58 <init+0x388>)
    298e:	f001 fb95 	bl	40bc <printf>
    DBGPRINTLN_CTX("CMU - HFCORE Clock: %.1f MHz!", (float)HFCORE_CLOCK_FREQ / 1000000);
    2992:	4b51      	ldr	r3, [pc, #324]	; (2ad8 <init+0x408>)
    2994:	edd3 7a00 	vldr	s15, [r3]
    2998:	eef8 7a67 	vcvt.f32.u32	s15, s15
    299c:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    29a0:	ee17 0a90 	vmov	r0, s15
    29a4:	f7fd fd38 	bl	418 <__aeabi_f2d>
    29a8:	4602      	mov	r2, r0
    29aa:	460b      	mov	r3, r1
    29ac:	484b      	ldr	r0, [pc, #300]	; (2adc <init+0x40c>)
    29ae:	492a      	ldr	r1, [pc, #168]	; (2a58 <init+0x388>)
    29b0:	f001 fb84 	bl	40bc <printf>
    DBGPRINTLN_CTX("CMU - HFEXP Clock: %.1f MHz!", (float)HFEXP_CLOCK_FREQ / 1000000);
    29b4:	4b4a      	ldr	r3, [pc, #296]	; (2ae0 <init+0x410>)
    29b6:	edd3 7a00 	vldr	s15, [r3]
    29ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
    29be:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    29c2:	ee17 0a90 	vmov	r0, s15
    29c6:	f7fd fd27 	bl	418 <__aeabi_f2d>
    29ca:	4602      	mov	r2, r0
    29cc:	460b      	mov	r3, r1
    29ce:	4845      	ldr	r0, [pc, #276]	; (2ae4 <init+0x414>)
    29d0:	4921      	ldr	r1, [pc, #132]	; (2a58 <init+0x388>)
    29d2:	f001 fb73 	bl	40bc <printf>
    DBGPRINTLN_CTX("CMU - HFPER Clock: %.1f MHz!", (float)HFPER_CLOCK_FREQ / 1000000);
    29d6:	4b44      	ldr	r3, [pc, #272]	; (2ae8 <init+0x418>)
    29d8:	edd3 7a00 	vldr	s15, [r3]
    29dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
    29e0:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    29e4:	ee17 0a90 	vmov	r0, s15
    29e8:	f7fd fd16 	bl	418 <__aeabi_f2d>
    29ec:	4602      	mov	r2, r0
    29ee:	460b      	mov	r3, r1
    29f0:	483e      	ldr	r0, [pc, #248]	; (2aec <init+0x41c>)
    29f2:	4919      	ldr	r1, [pc, #100]	; (2a58 <init+0x388>)
    29f4:	f001 fb62 	bl	40bc <printf>
    DBGPRINTLN_CTX("CMU - HFPERB Clock: %.1f MHz!", (float)HFPERB_CLOCK_FREQ / 1000000);
    29f8:	4b3d      	ldr	r3, [pc, #244]	; (2af0 <init+0x420>)
    29fa:	edd3 7a00 	vldr	s15, [r3]
    29fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2a02:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    2a06:	ee17 0a90 	vmov	r0, s15
    2a0a:	f7fd fd05 	bl	418 <__aeabi_f2d>
    2a0e:	4602      	mov	r2, r0
    2a10:	460b      	mov	r3, r1
    2a12:	4838      	ldr	r0, [pc, #224]	; (2af4 <init+0x424>)
    2a14:	4910      	ldr	r1, [pc, #64]	; (2a58 <init+0x388>)
    2a16:	f001 fb51 	bl	40bc <printf>
    2a1a:	e06d      	b.n	2af8 <init+0x428>
    2a1c:	f3af 8000 	nop.w
    2a20:	e0000000 	.word	0xe0000000
    2a24:	4040624d 	.word	0x4040624d
    2a28:	0fe081b0 	.word	0x0fe081b0
    2a2c:	02faf080 	.word	0x02faf080
    2a30:	01e84800 	.word	0x01e84800
    2a34:	001e8480 	.word	0x001e8480
    2a38:	400e4000 	.word	0x400e4000
    2a3c:	40088000 	.word	0x40088000
    2a40:	00044440 	.word	0x00044440
    2a44:	44000400 	.word	0x44000400
    2a48:	404e147b 	.word	0x404e147b
    2a4c:	40466666 	.word	0x40466666
    2a50:	4049999a 	.word	0x4049999a
    2a54:	3cd4fdf4 	.word	0x3cd4fdf4
    2a58:	000045ec 	.word	0x000045ec
    2a5c:	00004832 	.word	0x00004832
    2a60:	e00fffd0 	.word	0xe00fffd0
    2a64:	00004846 	.word	0x00004846
    2a68:	00004867 	.word	0x00004867
    2a6c:	00004890 	.word	0x00004890
    2a70:	000048ac 	.word	0x000048ac
    2a74:	000048c6 	.word	0x000048c6
    2a78:	49742400 	.word	0x49742400
    2a7c:	447a0000 	.word	0x447a0000
    2a80:	0000482b 	.word	0x0000482b
    2a84:	000048df 	.word	0x000048df
    2a88:	0000482f 	.word	0x0000482f
    2a8c:	40200000 	.word	0x40200000
    2a90:	000048fd 	.word	0x000048fd
    2a94:	20000004 	.word	0x20000004
    2a98:	00004922 	.word	0x00004922
    2a9c:	20000010 	.word	0x20000010
    2aa0:	00004948 	.word	0x00004948
    2aa4:	20000000 	.word	0x20000000
    2aa8:	00004970 	.word	0x00004970
    2aac:	00004999 	.word	0x00004999
    2ab0:	20000008 	.word	0x20000008
    2ab4:	000049be 	.word	0x000049be
    2ab8:	2000000c 	.word	0x2000000c
    2abc:	000049e4 	.word	0x000049e4
    2ac0:	200000cc 	.word	0x200000cc
    2ac4:	00004a0b 	.word	0x00004a0b
    2ac8:	200000f4 	.word	0x200000f4
    2acc:	00004a31 	.word	0x00004a31
    2ad0:	200000d0 	.word	0x200000d0
    2ad4:	00004a54 	.word	0x00004a54
    2ad8:	200000b8 	.word	0x200000b8
    2adc:	00004a7a 	.word	0x00004a7a
    2ae0:	200000dc 	.word	0x200000dc
    2ae4:	00004aa1 	.word	0x00004aa1
    2ae8:	200000ec 	.word	0x200000ec
    2aec:	00004ac7 	.word	0x00004ac7
    2af0:	200000e0 	.word	0x200000e0
    2af4:	00004aed 	.word	0x00004aed
    DBGPRINTLN_CTX("CMU - HFPERC Clock: %.1f MHz!", (float)HFPERC_CLOCK_FREQ / 1000000);
    2af8:	4bd7      	ldr	r3, [pc, #860]	; (2e58 <init+0x788>)
    2afa:	edd3 7a00 	vldr	s15, [r3]
    2afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2b02:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    2b06:	ee17 0a90 	vmov	r0, s15
    2b0a:	f7fd fc85 	bl	418 <__aeabi_f2d>
    2b0e:	4602      	mov	r2, r0
    2b10:	460b      	mov	r3, r1
    2b12:	48d2      	ldr	r0, [pc, #840]	; (2e5c <init+0x78c>)
    2b14:	49d2      	ldr	r1, [pc, #840]	; (2e60 <init+0x790>)
    2b16:	f001 fad1 	bl	40bc <printf>
    DBGPRINTLN_CTX("CMU - HFLE Clock: %.1f MHz!", (float)HFLE_CLOCK_FREQ / 1000000);
    2b1a:	4bd2      	ldr	r3, [pc, #840]	; (2e64 <init+0x794>)
    2b1c:	edd3 7a00 	vldr	s15, [r3]
    2b20:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2b24:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    2b28:	ee17 0a90 	vmov	r0, s15
    2b2c:	f7fd fc74 	bl	418 <__aeabi_f2d>
    2b30:	4602      	mov	r2, r0
    2b32:	460b      	mov	r3, r1
    2b34:	48cc      	ldr	r0, [pc, #816]	; (2e68 <init+0x798>)
    2b36:	49ca      	ldr	r1, [pc, #808]	; (2e60 <init+0x790>)
    2b38:	f001 fac0 	bl	40bc <printf>
    DBGPRINTLN_CTX("CMU - QSPI Clock: %.1f MHz!", (float)QSPI_CLOCK_FREQ / 1000000);
    2b3c:	4bcb      	ldr	r3, [pc, #812]	; (2e6c <init+0x79c>)
    2b3e:	edd3 7a00 	vldr	s15, [r3]
    2b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2b46:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    2b4a:	ee17 0a90 	vmov	r0, s15
    2b4e:	f7fd fc63 	bl	418 <__aeabi_f2d>
    2b52:	4602      	mov	r2, r0
    2b54:	460b      	mov	r3, r1
    2b56:	48c6      	ldr	r0, [pc, #792]	; (2e70 <init+0x7a0>)
    2b58:	49c1      	ldr	r1, [pc, #772]	; (2e60 <init+0x790>)
    2b5a:	f001 faaf 	bl	40bc <printf>
    DBGPRINTLN_CTX("CMU - SDIO Clock: %.1f MHz!", (float)SDIO_CLOCK_FREQ / 1000000);
    2b5e:	4bc5      	ldr	r3, [pc, #788]	; (2e74 <init+0x7a4>)
    2b60:	edd3 7a00 	vldr	s15, [r3]
    2b64:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2b68:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    2b6c:	ee17 0a90 	vmov	r0, s15
    2b70:	f7fd fc52 	bl	418 <__aeabi_f2d>
    2b74:	4602      	mov	r2, r0
    2b76:	460b      	mov	r3, r1
    2b78:	48bf      	ldr	r0, [pc, #764]	; (2e78 <init+0x7a8>)
    2b7a:	49b9      	ldr	r1, [pc, #740]	; (2e60 <init+0x790>)
    2b7c:	f001 fa9e 	bl	40bc <printf>
    DBGPRINTLN_CTX("CMU - USB Clock: %.1f MHz!", (float)USB_CLOCK_FREQ / 1000000);
    2b80:	4bbe      	ldr	r3, [pc, #760]	; (2e7c <init+0x7ac>)
    2b82:	edd3 7a00 	vldr	s15, [r3]
    2b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2b8a:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    2b8e:	ee17 0a90 	vmov	r0, s15
    2b92:	f7fd fc41 	bl	418 <__aeabi_f2d>
    2b96:	4602      	mov	r2, r0
    2b98:	460b      	mov	r3, r1
    2b9a:	48b9      	ldr	r0, [pc, #740]	; (2e80 <init+0x7b0>)
    2b9c:	49b0      	ldr	r1, [pc, #704]	; (2e60 <init+0x790>)
    2b9e:	f001 fa8d 	bl	40bc <printf>
    DBGPRINTLN_CTX("CMU - ADC0 Clock: %.1f MHz!", (float)ADC0_CLOCK_FREQ / 1000000);
    2ba2:	4bb8      	ldr	r3, [pc, #736]	; (2e84 <init+0x7b4>)
    2ba4:	edd3 7a00 	vldr	s15, [r3]
    2ba8:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2bac:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    2bb0:	ee17 0a90 	vmov	r0, s15
    2bb4:	f7fd fc30 	bl	418 <__aeabi_f2d>
    2bb8:	4602      	mov	r2, r0
    2bba:	460b      	mov	r3, r1
    2bbc:	48b2      	ldr	r0, [pc, #712]	; (2e88 <init+0x7b8>)
    2bbe:	49a8      	ldr	r1, [pc, #672]	; (2e60 <init+0x790>)
    2bc0:	f001 fa7c 	bl	40bc <printf>
    DBGPRINTLN_CTX("CMU - ADC1 Clock: %.1f MHz!", (float)ADC1_CLOCK_FREQ / 1000000);
    2bc4:	4bb1      	ldr	r3, [pc, #708]	; (2e8c <init+0x7bc>)
    2bc6:	edd3 7a00 	vldr	s15, [r3]
    2bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2bce:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    2bd2:	ee17 0a90 	vmov	r0, s15
    2bd6:	f7fd fc1f 	bl	418 <__aeabi_f2d>
    2bda:	4602      	mov	r2, r0
    2bdc:	460b      	mov	r3, r1
    2bde:	48ac      	ldr	r0, [pc, #688]	; (2e90 <init+0x7c0>)
    2be0:	499f      	ldr	r1, [pc, #636]	; (2e60 <init+0x790>)
    2be2:	f001 fa6b 	bl	40bc <printf>
    DBGPRINTLN_CTX("CMU - DBG Clock: %.1f MHz!", (float)DBG_CLOCK_FREQ / 1000000);
    2be6:	4bab      	ldr	r3, [pc, #684]	; (2e94 <init+0x7c4>)
    2be8:	edd3 7a00 	vldr	s15, [r3]
    2bec:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2bf0:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    2bf4:	ee17 0a90 	vmov	r0, s15
    2bf8:	f7fd fc0e 	bl	418 <__aeabi_f2d>
    2bfc:	4602      	mov	r2, r0
    2bfe:	460b      	mov	r3, r1
    2c00:	48a5      	ldr	r0, [pc, #660]	; (2e98 <init+0x7c8>)
    2c02:	4997      	ldr	r1, [pc, #604]	; (2e60 <init+0x790>)
    2c04:	f001 fa5a 	bl	40bc <printf>
    DBGPRINTLN_CTX("CMU - AUX Clock: %.1f MHz!", (float)AUX_CLOCK_FREQ / 1000000);
    2c08:	4ba4      	ldr	r3, [pc, #656]	; (2e9c <init+0x7cc>)
    2c0a:	edd3 7a00 	vldr	s15, [r3]
    2c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2c12:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    2c16:	ee17 0a90 	vmov	r0, s15
    2c1a:	f7fd fbfd 	bl	418 <__aeabi_f2d>
    2c1e:	4602      	mov	r2, r0
    2c20:	460b      	mov	r3, r1
    2c22:	489f      	ldr	r0, [pc, #636]	; (2ea0 <init+0x7d0>)
    2c24:	498e      	ldr	r1, [pc, #568]	; (2e60 <init+0x790>)
    2c26:	f001 fa49 	bl	40bc <printf>
    DBGPRINTLN_CTX("CMU - LFA Clock: %.3f kHz!", (float)LFA_CLOCK_FREQ / 1000);
    2c2a:	4b9e      	ldr	r3, [pc, #632]	; (2ea4 <init+0x7d4>)
    2c2c:	edd3 7a00 	vldr	s15, [r3]
    2c30:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2c34:	eec7 7a88 	vdiv.f32	s15, s15, s16
    2c38:	ee17 0a90 	vmov	r0, s15
    2c3c:	f7fd fbec 	bl	418 <__aeabi_f2d>
    2c40:	4602      	mov	r2, r0
    2c42:	460b      	mov	r3, r1
    2c44:	4898      	ldr	r0, [pc, #608]	; (2ea8 <init+0x7d8>)
    2c46:	4986      	ldr	r1, [pc, #536]	; (2e60 <init+0x790>)
    2c48:	f001 fa38 	bl	40bc <printf>
    DBGPRINTLN_CTX("CMU - LESENSE Clock: %.3f kHz!", (float)LESENSE_CLOCK_FREQ / 1000);
    2c4c:	4b97      	ldr	r3, [pc, #604]	; (2eac <init+0x7dc>)
    2c4e:	edd3 7a00 	vldr	s15, [r3]
    2c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2c56:	eec7 7a88 	vdiv.f32	s15, s15, s16
    2c5a:	ee17 0a90 	vmov	r0, s15
    2c5e:	f7fd fbdb 	bl	418 <__aeabi_f2d>
    2c62:	4602      	mov	r2, r0
    2c64:	460b      	mov	r3, r1
    2c66:	4892      	ldr	r0, [pc, #584]	; (2eb0 <init+0x7e0>)
    2c68:	497d      	ldr	r1, [pc, #500]	; (2e60 <init+0x790>)
    2c6a:	f001 fa27 	bl	40bc <printf>
    DBGPRINTLN_CTX("CMU - RTC Clock: %.3f kHz!", (float)RTC_CLOCK_FREQ / 1000);
    2c6e:	4b91      	ldr	r3, [pc, #580]	; (2eb4 <init+0x7e4>)
    2c70:	edd3 7a00 	vldr	s15, [r3]
    2c74:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2c78:	eec7 7a88 	vdiv.f32	s15, s15, s16
    2c7c:	ee17 0a90 	vmov	r0, s15
    2c80:	f7fd fbca 	bl	418 <__aeabi_f2d>
    2c84:	4602      	mov	r2, r0
    2c86:	460b      	mov	r3, r1
    2c88:	488b      	ldr	r0, [pc, #556]	; (2eb8 <init+0x7e8>)
    2c8a:	4975      	ldr	r1, [pc, #468]	; (2e60 <init+0x790>)
    2c8c:	f001 fa16 	bl	40bc <printf>
    DBGPRINTLN_CTX("CMU - LCD Clock: %.3f kHz!", (float)LCD_CLOCK_FREQ / 1000);
    2c90:	4b8a      	ldr	r3, [pc, #552]	; (2ebc <init+0x7ec>)
    2c92:	edd3 7a00 	vldr	s15, [r3]
    2c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2c9a:	eec7 7a88 	vdiv.f32	s15, s15, s16
    2c9e:	ee17 0a90 	vmov	r0, s15
    2ca2:	f7fd fbb9 	bl	418 <__aeabi_f2d>
    2ca6:	4602      	mov	r2, r0
    2ca8:	460b      	mov	r3, r1
    2caa:	4885      	ldr	r0, [pc, #532]	; (2ec0 <init+0x7f0>)
    2cac:	496c      	ldr	r1, [pc, #432]	; (2e60 <init+0x790>)
    2cae:	f001 fa05 	bl	40bc <printf>
    DBGPRINTLN_CTX("CMU - LETIMER0 Clock: %.3f kHz!", (float)LETIMER0_CLOCK_FREQ / 1000);
    2cb2:	4b84      	ldr	r3, [pc, #528]	; (2ec4 <init+0x7f4>)
    2cb4:	edd3 7a00 	vldr	s15, [r3]
    2cb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2cbc:	eec7 7a88 	vdiv.f32	s15, s15, s16
    2cc0:	ee17 0a90 	vmov	r0, s15
    2cc4:	f7fd fba8 	bl	418 <__aeabi_f2d>
    2cc8:	4602      	mov	r2, r0
    2cca:	460b      	mov	r3, r1
    2ccc:	487e      	ldr	r0, [pc, #504]	; (2ec8 <init+0x7f8>)
    2cce:	4964      	ldr	r1, [pc, #400]	; (2e60 <init+0x790>)
    2cd0:	f001 f9f4 	bl	40bc <printf>
    DBGPRINTLN_CTX("CMU - LETIMER1 Clock: %.3f kHz!", (float)LETIMER1_CLOCK_FREQ / 1000);
    2cd4:	4b7d      	ldr	r3, [pc, #500]	; (2ecc <init+0x7fc>)
    2cd6:	edd3 7a00 	vldr	s15, [r3]
    2cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2cde:	eec7 7a88 	vdiv.f32	s15, s15, s16
    2ce2:	ee17 0a90 	vmov	r0, s15
    2ce6:	f7fd fb97 	bl	418 <__aeabi_f2d>
    2cea:	4602      	mov	r2, r0
    2cec:	460b      	mov	r3, r1
    2cee:	4878      	ldr	r0, [pc, #480]	; (2ed0 <init+0x800>)
    2cf0:	495b      	ldr	r1, [pc, #364]	; (2e60 <init+0x790>)
    2cf2:	f001 f9e3 	bl	40bc <printf>
    DBGPRINTLN_CTX("CMU - LFB Clock: %.3f kHz!", (float)LFB_CLOCK_FREQ / 1000);
    2cf6:	4b77      	ldr	r3, [pc, #476]	; (2ed4 <init+0x804>)
    2cf8:	edd3 7a00 	vldr	s15, [r3]
    2cfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2d00:	eec7 7a88 	vdiv.f32	s15, s15, s16
    2d04:	ee17 0a90 	vmov	r0, s15
    2d08:	f7fd fb86 	bl	418 <__aeabi_f2d>
    2d0c:	4602      	mov	r2, r0
    2d0e:	460b      	mov	r3, r1
    2d10:	4871      	ldr	r0, [pc, #452]	; (2ed8 <init+0x808>)
    2d12:	4953      	ldr	r1, [pc, #332]	; (2e60 <init+0x790>)
    2d14:	f001 f9d2 	bl	40bc <printf>
    DBGPRINTLN_CTX("CMU - LEUART0 Clock: %.3f kHz!", (float)LEUART0_CLOCK_FREQ / 1000);
    2d18:	4b70      	ldr	r3, [pc, #448]	; (2edc <init+0x80c>)
    2d1a:	edd3 7a00 	vldr	s15, [r3]
    2d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2d22:	eec7 7a88 	vdiv.f32	s15, s15, s16
    2d26:	ee17 0a90 	vmov	r0, s15
    2d2a:	f7fd fb75 	bl	418 <__aeabi_f2d>
    2d2e:	4602      	mov	r2, r0
    2d30:	460b      	mov	r3, r1
    2d32:	486b      	ldr	r0, [pc, #428]	; (2ee0 <init+0x810>)
    2d34:	494a      	ldr	r1, [pc, #296]	; (2e60 <init+0x790>)
    2d36:	f001 f9c1 	bl	40bc <printf>
    DBGPRINTLN_CTX("CMU - LEUART1 Clock: %.3f kHz!", (float)LEUART1_CLOCK_FREQ / 1000);
    2d3a:	4b6a      	ldr	r3, [pc, #424]	; (2ee4 <init+0x814>)
    2d3c:	edd3 7a00 	vldr	s15, [r3]
    2d40:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2d44:	eec7 7a88 	vdiv.f32	s15, s15, s16
    2d48:	ee17 0a90 	vmov	r0, s15
    2d4c:	f7fd fb64 	bl	418 <__aeabi_f2d>
    2d50:	4602      	mov	r2, r0
    2d52:	460b      	mov	r3, r1
    2d54:	4864      	ldr	r0, [pc, #400]	; (2ee8 <init+0x818>)
    2d56:	4942      	ldr	r1, [pc, #264]	; (2e60 <init+0x790>)
    2d58:	f001 f9b0 	bl	40bc <printf>
    DBGPRINTLN_CTX("CMU - SYSTICK Clock: %.3f kHz!", (float)SYSTICK_CLOCK_FREQ / 1000);
    2d5c:	4b63      	ldr	r3, [pc, #396]	; (2eec <init+0x81c>)
    2d5e:	edd3 7a00 	vldr	s15, [r3]
    2d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2d66:	eec7 7a88 	vdiv.f32	s15, s15, s16
    2d6a:	ee17 0a90 	vmov	r0, s15
    2d6e:	f7fd fb53 	bl	418 <__aeabi_f2d>
    2d72:	4602      	mov	r2, r0
    2d74:	460b      	mov	r3, r1
    2d76:	485e      	ldr	r0, [pc, #376]	; (2ef0 <init+0x820>)
    2d78:	4939      	ldr	r1, [pc, #228]	; (2e60 <init+0x790>)
    2d7a:	f001 f99f 	bl	40bc <printf>
    DBGPRINTLN_CTX("CMU - CSEN Clock: %.3f kHz!", (float)CSEN_CLOCK_FREQ / 1000);
    2d7e:	4b5d      	ldr	r3, [pc, #372]	; (2ef4 <init+0x824>)
    2d80:	edd3 7a00 	vldr	s15, [r3]
    2d84:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2d88:	eec7 7a88 	vdiv.f32	s15, s15, s16
    2d8c:	ee17 0a90 	vmov	r0, s15
    2d90:	f7fd fb42 	bl	418 <__aeabi_f2d>
    2d94:	4602      	mov	r2, r0
    2d96:	460b      	mov	r3, r1
    2d98:	4857      	ldr	r0, [pc, #348]	; (2ef8 <init+0x828>)
    2d9a:	4931      	ldr	r1, [pc, #196]	; (2e60 <init+0x790>)
    2d9c:	f001 f98e 	bl	40bc <printf>
    DBGPRINTLN_CTX("CMU - LFC Clock: %.3f kHz!", (float)LFC_CLOCK_FREQ / 1000);
    2da0:	4b56      	ldr	r3, [pc, #344]	; (2efc <init+0x82c>)
    2da2:	edd3 7a00 	vldr	s15, [r3]
    2da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2daa:	eec7 7a88 	vdiv.f32	s15, s15, s16
    2dae:	ee17 0a90 	vmov	r0, s15
    2db2:	f7fd fb31 	bl	418 <__aeabi_f2d>
    2db6:	4602      	mov	r2, r0
    2db8:	460b      	mov	r3, r1
    2dba:	4851      	ldr	r0, [pc, #324]	; (2f00 <init+0x830>)
    2dbc:	4928      	ldr	r1, [pc, #160]	; (2e60 <init+0x790>)
    2dbe:	f001 f97d 	bl	40bc <printf>
    DBGPRINTLN_CTX("CMU - LFE Clock: %.3f kHz!", (float)LFE_CLOCK_FREQ / 1000);
    2dc2:	4b50      	ldr	r3, [pc, #320]	; (2f04 <init+0x834>)
    2dc4:	edd3 7a00 	vldr	s15, [r3]
    2dc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2dcc:	eec7 7a88 	vdiv.f32	s15, s15, s16
    2dd0:	ee17 0a90 	vmov	r0, s15
    2dd4:	f7fd fb20 	bl	418 <__aeabi_f2d>
    2dd8:	4602      	mov	r2, r0
    2dda:	460b      	mov	r3, r1
    2ddc:	484a      	ldr	r0, [pc, #296]	; (2f08 <init+0x838>)
    2dde:	4920      	ldr	r1, [pc, #128]	; (2e60 <init+0x790>)
    2de0:	f001 f96c 	bl	40bc <printf>
    DBGPRINTLN_CTX("CMU - RTCC Clock: %.3f kHz!", (float)RTCC_CLOCK_FREQ / 1000);
    2de4:	4b49      	ldr	r3, [pc, #292]	; (2f0c <init+0x83c>)
    2de6:	edd3 7a00 	vldr	s15, [r3]
    2dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2dee:	eec7 7a88 	vdiv.f32	s15, s15, s16
    2df2:	ee17 0a90 	vmov	r0, s15
    2df6:	f7fd fb0f 	bl	418 <__aeabi_f2d>
    2dfa:	4602      	mov	r2, r0
    2dfc:	460b      	mov	r3, r1
    2dfe:	4844      	ldr	r0, [pc, #272]	; (2f10 <init+0x840>)
    2e00:	4917      	ldr	r1, [pc, #92]	; (2e60 <init+0x790>)
    2e02:	f001 f95b 	bl	40bc <printf>
    DBGPRINTLN_CTX("EMU - AVDD Fall Threshold: %.2f mV!", fAVDDLowThresh * 1000);
    2e06:	eddd 7a01 	vldr	s15, [sp, #4]
    2e0a:	ee67 7a88 	vmul.f32	s15, s15, s16
    2e0e:	ee17 0a90 	vmov	r0, s15
    2e12:	f7fd fb01 	bl	418 <__aeabi_f2d>
    2e16:	4602      	mov	r2, r0
    2e18:	460b      	mov	r3, r1
    2e1a:	483e      	ldr	r0, [pc, #248]	; (2f14 <init+0x844>)
    2e1c:	4910      	ldr	r1, [pc, #64]	; (2e60 <init+0x790>)
    2e1e:	f001 f94d 	bl	40bc <printf>
    DBGPRINTLN_CTX("EMU - AVDD Rise Threshold: %.2f mV!", fAVDDHighThresh * 1000);
    2e22:	eddd 7a00 	vldr	s15, [sp]
    2e26:	ee67 7a88 	vmul.f32	s15, s15, s16
    2e2a:	ee17 0a90 	vmov	r0, s15
    2e2e:	f7fd faf3 	bl	418 <__aeabi_f2d>
    2e32:	4602      	mov	r2, r0
    2e34:	460b      	mov	r3, r1
    2e36:	4838      	ldr	r0, [pc, #224]	; (2f18 <init+0x848>)
    2e38:	4909      	ldr	r1, [pc, #36]	; (2e60 <init+0x790>)
    2e3a:	f001 f93f 	bl	40bc <printf>
    DBGPRINTLN_CTX("EMU - AVDD Voltage: %.2f mV", adc_get_avdd());
    2e3e:	f000 fb25 	bl	348c <adc_get_avdd>
    2e42:	ee10 0a10 	vmov	r0, s0
    2e46:	f7fd fae7 	bl	418 <__aeabi_f2d>
    2e4a:	4602      	mov	r2, r0
    2e4c:	460b      	mov	r3, r1
    2e4e:	4833      	ldr	r0, [pc, #204]	; (2f1c <init+0x84c>)
    2e50:	4903      	ldr	r1, [pc, #12]	; (2e60 <init+0x790>)
    2e52:	f001 f933 	bl	40bc <printf>
    2e56:	e063      	b.n	2f20 <init+0x850>
    2e58:	200000d8 	.word	0x200000d8
    2e5c:	00004b14 	.word	0x00004b14
    2e60:	000045ec 	.word	0x000045ec
    2e64:	200000a4 	.word	0x200000a4
    2e68:	00004b3b 	.word	0x00004b3b
    2e6c:	200000d4 	.word	0x200000d4
    2e70:	00004b60 	.word	0x00004b60
    2e74:	200000f0 	.word	0x200000f0
    2e78:	00004b85 	.word	0x00004b85
    2e7c:	20000098 	.word	0x20000098
    2e80:	00004baa 	.word	0x00004baa
    2e84:	200000b0 	.word	0x200000b0
    2e88:	00004bce 	.word	0x00004bce
    2e8c:	200000bc 	.word	0x200000bc
    2e90:	00004bf3 	.word	0x00004bf3
    2e94:	20000108 	.word	0x20000108
    2e98:	00004c18 	.word	0x00004c18
    2e9c:	200000e8 	.word	0x200000e8
    2ea0:	00004c3c 	.word	0x00004c3c
    2ea4:	200000a0 	.word	0x200000a0
    2ea8:	00004c60 	.word	0x00004c60
    2eac:	200000f8 	.word	0x200000f8
    2eb0:	00004c84 	.word	0x00004c84
    2eb4:	200000fc 	.word	0x200000fc
    2eb8:	00004cac 	.word	0x00004cac
    2ebc:	20000100 	.word	0x20000100
    2ec0:	00004cd0 	.word	0x00004cd0
    2ec4:	20000094 	.word	0x20000094
    2ec8:	00004cf4 	.word	0x00004cf4
    2ecc:	200000ac 	.word	0x200000ac
    2ed0:	00004d1d 	.word	0x00004d1d
    2ed4:	200000b4 	.word	0x200000b4
    2ed8:	00004d46 	.word	0x00004d46
    2edc:	20000104 	.word	0x20000104
    2ee0:	00004d6a 	.word	0x00004d6a
    2ee4:	200000c4 	.word	0x200000c4
    2ee8:	00004d92 	.word	0x00004d92
    2eec:	200000a8 	.word	0x200000a8
    2ef0:	00004dba 	.word	0x00004dba
    2ef4:	2000009c 	.word	0x2000009c
    2ef8:	00004de2 	.word	0x00004de2
    2efc:	200000e4 	.word	0x200000e4
    2f00:	00004e07 	.word	0x00004e07
    2f04:	200000c8 	.word	0x200000c8
    2f08:	00004e2b 	.word	0x00004e2b
    2f0c:	200000c0 	.word	0x200000c0
    2f10:	00004e4f 	.word	0x00004e4f
    2f14:	00004e74 	.word	0x00004e74
    2f18:	00004ea1 	.word	0x00004ea1
    2f1c:	00004ece 	.word	0x00004ece
    DBGPRINTLN_CTX("EMU - AVDD Status: %s", g_ubAVDDLow ? "LOW" : "OK");
    2f20:	4b3f      	ldr	r3, [pc, #252]	; (3020 <init+0x950>)
    2f22:	4940      	ldr	r1, [pc, #256]	; (3024 <init+0x954>)
    2f24:	781a      	ldrb	r2, [r3, #0]
    2f26:	4840      	ldr	r0, [pc, #256]	; (3028 <init+0x958>)
    2f28:	42a2      	cmp	r2, r4
    2f2a:	bf14      	ite	ne
    2f2c:	4632      	movne	r2, r6
    2f2e:	462a      	moveq	r2, r5
    2f30:	f001 f8c4 	bl	40bc <printf>
    DBGPRINTLN_CTX("EMU - DVDD Fall Threshold: %.2f mV!", fDVDDLowThresh * 1000);
    2f34:	eddd 7a02 	vldr	s15, [sp, #8]
    2f38:	ee67 7a88 	vmul.f32	s15, s15, s16
    2f3c:	ee17 0a90 	vmov	r0, s15
    2f40:	f7fd fa6a 	bl	418 <__aeabi_f2d>
    2f44:	4602      	mov	r2, r0
    2f46:	460b      	mov	r3, r1
    2f48:	4838      	ldr	r0, [pc, #224]	; (302c <init+0x95c>)
    2f4a:	4936      	ldr	r1, [pc, #216]	; (3024 <init+0x954>)
    2f4c:	f001 f8b6 	bl	40bc <printf>
    DBGPRINTLN_CTX("EMU - DVDD Rise Threshold: %.2f mV!", fDVDDHighThresh * 1000);
    2f50:	ee69 7a88 	vmul.f32	s15, s19, s16
    2f54:	ee17 0a90 	vmov	r0, s15
    2f58:	f7fd fa5e 	bl	418 <__aeabi_f2d>
    2f5c:	4602      	mov	r2, r0
    2f5e:	460b      	mov	r3, r1
    2f60:	4833      	ldr	r0, [pc, #204]	; (3030 <init+0x960>)
    2f62:	4930      	ldr	r1, [pc, #192]	; (3024 <init+0x954>)
    2f64:	f001 f8aa 	bl	40bc <printf>
    DBGPRINTLN_CTX("EMU - DVDD Voltage: %.2f mV", adc_get_dvdd());
    2f68:	f000 fad4 	bl	3514 <adc_get_dvdd>
    2f6c:	ee10 0a10 	vmov	r0, s0
    2f70:	f7fd fa52 	bl	418 <__aeabi_f2d>
    2f74:	4602      	mov	r2, r0
    2f76:	460b      	mov	r3, r1
    2f78:	482e      	ldr	r0, [pc, #184]	; (3034 <init+0x964>)
    2f7a:	492a      	ldr	r1, [pc, #168]	; (3024 <init+0x954>)
    2f7c:	f001 f89e 	bl	40bc <printf>
    DBGPRINTLN_CTX("EMU - DVDD Status: %s", g_ubDVDDLow ? "LOW" : "OK");
    2f80:	4b2d      	ldr	r3, [pc, #180]	; (3038 <init+0x968>)
    2f82:	4928      	ldr	r1, [pc, #160]	; (3024 <init+0x954>)
    2f84:	781a      	ldrb	r2, [r3, #0]
    2f86:	482d      	ldr	r0, [pc, #180]	; (303c <init+0x96c>)
    2f88:	42a2      	cmp	r2, r4
    2f8a:	bf14      	ite	ne
    2f8c:	4632      	movne	r2, r6
    2f8e:	462a      	moveq	r2, r5
    2f90:	f001 f894 	bl	40bc <printf>
    DBGPRINTLN_CTX("EMU - IOVDD Fall Threshold: %.2f mV!", fIOVDDLowThresh * 1000);
    2f94:	eddd 7a03 	vldr	s15, [sp, #12]
    2f98:	ee67 7a88 	vmul.f32	s15, s15, s16
    2f9c:	ee17 0a90 	vmov	r0, s15
    2fa0:	f7fd fa3a 	bl	418 <__aeabi_f2d>
    2fa4:	4602      	mov	r2, r0
    2fa6:	460b      	mov	r3, r1
    2fa8:	4825      	ldr	r0, [pc, #148]	; (3040 <init+0x970>)
    2faa:	491e      	ldr	r1, [pc, #120]	; (3024 <init+0x954>)
    2fac:	f001 f886 	bl	40bc <printf>
    DBGPRINTLN_CTX("EMU - IOVDD Rise Threshold: %.2f mV!", fIOVDDHighThresh * 1000);
    2fb0:	ee69 7a08 	vmul.f32	s15, s18, s16
    2fb4:	ee17 0a90 	vmov	r0, s15
    2fb8:	f7fd fa2e 	bl	418 <__aeabi_f2d>
    2fbc:	4602      	mov	r2, r0
    2fbe:	460b      	mov	r3, r1
    2fc0:	4820      	ldr	r0, [pc, #128]	; (3044 <init+0x974>)
    2fc2:	4918      	ldr	r1, [pc, #96]	; (3024 <init+0x954>)
    2fc4:	f001 f87a 	bl	40bc <printf>
    DBGPRINTLN_CTX("EMU - IOVDD Status: %s", g_ubIOVDDLow ? "LOW" : "OK");
    2fc8:	4b1f      	ldr	r3, [pc, #124]	; (3048 <init+0x978>)
    2fca:	4916      	ldr	r1, [pc, #88]	; (3024 <init+0x954>)
    2fcc:	781a      	ldrb	r2, [r3, #0]
    2fce:	481f      	ldr	r0, [pc, #124]	; (304c <init+0x97c>)
    2fd0:	42a2      	cmp	r2, r4
    2fd2:	bf14      	ite	ne
    2fd4:	4632      	movne	r2, r6
    2fd6:	462a      	moveq	r2, r5
    2fd8:	f001 f870 	bl	40bc <printf>
    DBGPRINTLN_CTX("EMU - IOVDD Voltage: %.2f mV", adc_get_iovdd());
    2fdc:	f000 fade 	bl	359c <adc_get_iovdd>
    2fe0:	ee10 0a10 	vmov	r0, s0
    2fe4:	f7fd fa18 	bl	418 <__aeabi_f2d>
    2fe8:	4602      	mov	r2, r0
    2fea:	460b      	mov	r3, r1
    2fec:	4818      	ldr	r0, [pc, #96]	; (3050 <init+0x980>)
    2fee:	490d      	ldr	r1, [pc, #52]	; (3024 <init+0x954>)
    2ff0:	f001 f864 	bl	40bc <printf>
    DBGPRINTLN_CTX("EMU - Core Voltage: %.2f mV", adc_get_corevdd());
    2ff4:	f000 fb16 	bl	3624 <adc_get_corevdd>
    2ff8:	ee10 0a10 	vmov	r0, s0
    2ffc:	f7fd fa0c 	bl	418 <__aeabi_f2d>
    3000:	4602      	mov	r2, r0
    3002:	460b      	mov	r3, r1
    3004:	4813      	ldr	r0, [pc, #76]	; (3054 <init+0x984>)
    3006:	4907      	ldr	r1, [pc, #28]	; (3024 <init+0x954>)
    3008:	f001 f858 	bl	40bc <printf>

    DBGPRINTLN_CTX("Scanning I2C bus 1...");
    300c:	4905      	ldr	r1, [pc, #20]	; (3024 <init+0x954>)
    300e:	4812      	ldr	r0, [pc, #72]	; (3058 <init+0x988>)
    3010:	f001 f854 	bl	40bc <printf>
        //if(i2c1_write(a, 0, 0, I2C_STOP))
            //DBGPRINTLN_CTX("  Address 0x%02X ACKed!", a);
    }
    
    return 0;
}
    3014:	4620      	mov	r0, r4
    3016:	b00c      	add	sp, #48	; 0x30
    3018:	ecbd 8b04 	vpop	{d8-d9}
    301c:	bd70      	pop	{r4, r5, r6, pc}
    301e:	bf00      	nop
    3020:	20000078 	.word	0x20000078
    3024:	000045ec 	.word	0x000045ec
    3028:	00004ef3 	.word	0x00004ef3
    302c:	00004f12 	.word	0x00004f12
    3030:	00004f3f 	.word	0x00004f3f
    3034:	00004f6c 	.word	0x00004f6c
    3038:	2000007a 	.word	0x2000007a
    303c:	00004f91 	.word	0x00004f91
    3040:	00004fb0 	.word	0x00004fb0
    3044:	00004fde 	.word	0x00004fde
    3048:	2000007b 	.word	0x2000007b
    304c:	0000500c 	.word	0x0000500c
    3050:	0000502c 	.word	0x0000502c
    3054:	00005052 	.word	0x00005052
    3058:	00005077 	.word	0x00005077

0000305c <main>:
int main()
{
    305c:	b580      	push	{r7, lr}
    305e:	b088      	sub	sp, #32
    // QSPI
    DBGPRINTLN_CTX("Flash Part ID: %06X", qspi_flash_read_jedec_id());
    3060:	f7fe ff25 	bl	1eae <qspi_flash_read_jedec_id>
    3064:	4965      	ldr	r1, [pc, #404]	; (31fc <main+0x1a0>)
    //DBGPRINTLN_CTX("QSPI RD: %08X", *(volatile uint32_t *)0xC0000000);
    //DBGPRINTLN_CTX("QSPI RD: %08X", *(volatile uint32_t *)0xC0000004);

    while(1)
    {
        GPIO->P[0].DOUT ^= (1 << 0);
    3066:	4d66      	ldr	r5, [pc, #408]	; (3200 <main+0x1a4>)
        
        delay_ms(500);
        
        DBGPRINTLN_CTX("ADC Temp: %.2f", adc_get_temperature());
    3068:	4c64      	ldr	r4, [pc, #400]	; (31fc <main+0x1a0>)
    306a:	4f66      	ldr	r7, [pc, #408]	; (3204 <main+0x1a8>)
    DBGPRINTLN_CTX("Flash Part ID: %06X", qspi_flash_read_jedec_id());
    306c:	4602      	mov	r2, r0
    306e:	4866      	ldr	r0, [pc, #408]	; (3208 <main+0x1ac>)
    3070:	f001 f824 	bl	40bc <printf>
    qspi_flash_read_security(0x0000, ubFlashUID, 8);
    3074:	2208      	movs	r2, #8
    3076:	a906      	add	r1, sp, #24
    3078:	2000      	movs	r0, #0
    307a:	f7fe ff38 	bl	1eee <qspi_flash_read_security>
    DBGPRINTLN_CTX("Flash ID: %02X%02X%02X%02X%02X%02X%02X%02X", ubFlashUID[0], ubFlashUID[1], ubFlashUID[2], ubFlashUID[3], ubFlashUID[4], ubFlashUID[5], ubFlashUID[6], ubFlashUID[7]);
    307e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3082:	9305      	str	r3, [sp, #20]
    3084:	f89d 301e 	ldrb.w	r3, [sp, #30]
    3088:	9304      	str	r3, [sp, #16]
    308a:	f89d 301d 	ldrb.w	r3, [sp, #29]
    308e:	9303      	str	r3, [sp, #12]
    3090:	f89d 301c 	ldrb.w	r3, [sp, #28]
    3094:	9302      	str	r3, [sp, #8]
    3096:	f89d 301b 	ldrb.w	r3, [sp, #27]
    309a:	9301      	str	r3, [sp, #4]
    309c:	f89d 301a 	ldrb.w	r3, [sp, #26]
    30a0:	9300      	str	r3, [sp, #0]
    30a2:	f89d 2018 	ldrb.w	r2, [sp, #24]
    30a6:	f89d 3019 	ldrb.w	r3, [sp, #25]
    30aa:	4954      	ldr	r1, [pc, #336]	; (31fc <main+0x1a0>)
    30ac:	4857      	ldr	r0, [pc, #348]	; (320c <main+0x1b0>)
    30ae:	f001 f805 	bl	40bc <printf>
    DBGPRINTLN_CTX("QSPI RD: %02X", *(volatile uint8_t *)0xC0000000);
    30b2:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    30b6:	4951      	ldr	r1, [pc, #324]	; (31fc <main+0x1a0>)
    30b8:	781a      	ldrb	r2, [r3, #0]
    30ba:	4855      	ldr	r0, [pc, #340]	; (3210 <main+0x1b4>)
    30bc:	f000 fffe 	bl	40bc <printf>
    DBGPRINTLN_CTX("QSPI RD: %02X", *(volatile uint8_t *)0xC0000001);
    30c0:	4b54      	ldr	r3, [pc, #336]	; (3214 <main+0x1b8>)
    30c2:	494e      	ldr	r1, [pc, #312]	; (31fc <main+0x1a0>)
    30c4:	781a      	ldrb	r2, [r3, #0]
    30c6:	4852      	ldr	r0, [pc, #328]	; (3210 <main+0x1b4>)
    30c8:	f000 fff8 	bl	40bc <printf>
    DBGPRINTLN_CTX("QSPI RD: %02X", *(volatile uint8_t *)0xC0000002);
    30cc:	4b52      	ldr	r3, [pc, #328]	; (3218 <main+0x1bc>)
    30ce:	494b      	ldr	r1, [pc, #300]	; (31fc <main+0x1a0>)
    30d0:	781a      	ldrb	r2, [r3, #0]
    30d2:	484f      	ldr	r0, [pc, #316]	; (3210 <main+0x1b4>)
    30d4:	f000 fff2 	bl	40bc <printf>
    DBGPRINTLN_CTX("QSPI RD: %02X", *(volatile uint8_t *)0xC0000003);
    30d8:	4b50      	ldr	r3, [pc, #320]	; (321c <main+0x1c0>)
    30da:	4948      	ldr	r1, [pc, #288]	; (31fc <main+0x1a0>)
    30dc:	781a      	ldrb	r2, [r3, #0]
    30de:	484c      	ldr	r0, [pc, #304]	; (3210 <main+0x1b4>)
    30e0:	f000 ffec 	bl	40bc <printf>
    DBGPRINTLN_CTX("Boot RD: %02X", *(volatile uint8_t *)0x0FE10000);
    30e4:	4b4e      	ldr	r3, [pc, #312]	; (3220 <main+0x1c4>)
    30e6:	4945      	ldr	r1, [pc, #276]	; (31fc <main+0x1a0>)
    30e8:	781a      	ldrb	r2, [r3, #0]
    30ea:	484e      	ldr	r0, [pc, #312]	; (3224 <main+0x1c8>)
    30ec:	f000 ffe6 	bl	40bc <printf>
    DBGPRINTLN_CTX("Data RD: %02X", *(volatile uint8_t *)0x0FE00000);
    30f0:	f04f 637e 	mov.w	r3, #266338304	; 0xfe00000
    30f4:	4941      	ldr	r1, [pc, #260]	; (31fc <main+0x1a0>)
    30f6:	781a      	ldrb	r2, [r3, #0]
    30f8:	484b      	ldr	r0, [pc, #300]	; (3228 <main+0x1cc>)
    30fa:	f000 ffdf 	bl	40bc <printf>
        GPIO->P[0].DOUT ^= (1 << 0);
    30fe:	68eb      	ldr	r3, [r5, #12]
    3100:	f083 0301 	eor.w	r3, r3, #1
    3104:	60eb      	str	r3, [r5, #12]
        delay_ms(500);
    3106:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    310a:	2100      	movs	r1, #0
    310c:	f000 f8fc 	bl	3308 <delay_ms>
        DBGPRINTLN_CTX("ADC Temp: %.2f", adc_get_temperature());
    3110:	f000 facc 	bl	36ac <adc_get_temperature>
    3114:	ee10 0a10 	vmov	r0, s0
    3118:	f7fd f97e 	bl	418 <__aeabi_f2d>
    311c:	4602      	mov	r2, r0
    311e:	460b      	mov	r3, r1
    3120:	4638      	mov	r0, r7
    3122:	4621      	mov	r1, r4
    3124:	f000 ffca 	bl	40bc <printf>
        DBGPRINTLN_CTX("EMU Temp: %.2f", emu_get_temperature());
    3128:	f7ff f82a 	bl	2180 <emu_get_temperature>
    312c:	ee10 0a10 	vmov	r0, s0
    3130:	f7fd f972 	bl	418 <__aeabi_f2d>
    3134:	4602      	mov	r2, r0
    3136:	460b      	mov	r3, r1
    3138:	483c      	ldr	r0, [pc, #240]	; (322c <main+0x1d0>)
    313a:	4621      	mov	r1, r4
    313c:	f000 ffbe 	bl	40bc <printf>

        DBGPRINTLN_CTX("HFXO Startup: %.2f pF", cmu_hfxo_get_startup_cap());
    3140:	f7fe f9d2 	bl	14e8 <cmu_hfxo_get_startup_cap>
    3144:	ee10 0a10 	vmov	r0, s0
    3148:	f7fd f966 	bl	418 <__aeabi_f2d>
    314c:	4602      	mov	r2, r0
    314e:	460b      	mov	r3, r1
    3150:	4837      	ldr	r0, [pc, #220]	; (3230 <main+0x1d4>)
    3152:	4621      	mov	r1, r4
    3154:	f000 ffb2 	bl	40bc <printf>
        DBGPRINTLN_CTX("HFXO Startup: %.2f uA", cmu_hfxo_get_startup_current());
    3158:	f7fe f9b4 	bl	14c4 <cmu_hfxo_get_startup_current>
    315c:	ee10 0a10 	vmov	r0, s0
    3160:	f7fd f95a 	bl	418 <__aeabi_f2d>
    3164:	4602      	mov	r2, r0
    3166:	460b      	mov	r3, r1
    3168:	4832      	ldr	r0, [pc, #200]	; (3234 <main+0x1d8>)
    316a:	4621      	mov	r1, r4
    316c:	f000 ffa6 	bl	40bc <printf>
        DBGPRINTLN_CTX("HFXO Steady: %.2f pF", cmu_hfxo_get_steady_cap());
    3170:	f7fe f9f8 	bl	1564 <cmu_hfxo_get_steady_cap>
    3174:	ee10 0a10 	vmov	r0, s0
    3178:	f7fd f94e 	bl	418 <__aeabi_f2d>
    317c:	4602      	mov	r2, r0
    317e:	460b      	mov	r3, r1
    3180:	482d      	ldr	r0, [pc, #180]	; (3238 <main+0x1dc>)
    3182:	4621      	mov	r1, r4
    3184:	f000 ff9a 	bl	40bc <printf>
        DBGPRINTLN_CTX("HFXO Steady: %.2f uA", cmu_hfxo_get_steady_current());
    3188:	f7fe f9da 	bl	1540 <cmu_hfxo_get_steady_current>
    318c:	ee10 0a10 	vmov	r0, s0
    3190:	f7fd f942 	bl	418 <__aeabi_f2d>
    3194:	460b      	mov	r3, r1
    3196:	4602      	mov	r2, r0
    3198:	4621      	mov	r1, r4
    319a:	4828      	ldr	r0, [pc, #160]	; (323c <main+0x1e0>)
    319c:	f000 ff8e 	bl	40bc <printf>
        DBGPRINTLN_CTX("HFXO PMA [%03X]: %.2f uA", cmu_hfxo_get_pma_ibtrim(), cmu_hfxo_get_pma_current());
    31a0:	f7fe fa2e 	bl	1600 <cmu_hfxo_get_pma_ibtrim>
    31a4:	4606      	mov	r6, r0
    31a6:	f7fe fa39 	bl	161c <cmu_hfxo_get_pma_current>
    31aa:	ee10 0a10 	vmov	r0, s0
    31ae:	f7fd f933 	bl	418 <__aeabi_f2d>
    31b2:	4632      	mov	r2, r6
    31b4:	e9cd 0100 	strd	r0, r1, [sp]
    31b8:	4621      	mov	r1, r4
    31ba:	4821      	ldr	r0, [pc, #132]	; (3240 <main+0x1e4>)
    31bc:	f000 ff7e 	bl	40bc <printf>
        DBGPRINTLN_CTX("HFXO PDA [%03X]: %.2f uA", cmu_hfxo_get_pda_ibtrim(1), cmu_hfxo_get_pda_current(0));
    31c0:	2001      	movs	r0, #1
    31c2:	f7fe f9e5 	bl	1590 <cmu_hfxo_get_pda_ibtrim>
    31c6:	4606      	mov	r6, r0
    31c8:	2000      	movs	r0, #0
    31ca:	f7fe f9f7 	bl	15bc <cmu_hfxo_get_pda_current>
    31ce:	ee10 0a10 	vmov	r0, s0
    31d2:	f7fd f921 	bl	418 <__aeabi_f2d>
    31d6:	4632      	mov	r2, r6
    31d8:	e9cd 0100 	strd	r0, r1, [sp]
    31dc:	4621      	mov	r1, r4
    31de:	4819      	ldr	r0, [pc, #100]	; (3244 <main+0x1e8>)
    31e0:	f000 ff6c 	bl	40bc <printf>
       
        //sleep();

        DBGPRINTLN_CTX("RTCC Time: %lu", rtcc_get_time());
    31e4:	f000 f866 	bl	32b4 <rtcc_get_time>
    31e8:	4621      	mov	r1, r4
    31ea:	4602      	mov	r2, r0
    31ec:	4816      	ldr	r0, [pc, #88]	; (3248 <main+0x1ec>)
    31ee:	f000 ff65 	bl	40bc <printf>

        DBGPRINTLN_CTX("Big fag does not need debug uart anymore.");
    31f2:	4621      	mov	r1, r4
    31f4:	4815      	ldr	r0, [pc, #84]	; (324c <main+0x1f0>)
    31f6:	f000 ff61 	bl	40bc <printf>
    31fa:	e780      	b.n	30fe <main+0xa2>
    31fc:	000045f1 	.word	0x000045f1
    3200:	40088000 	.word	0x40088000
    3204:	0000512c 	.word	0x0000512c
    3208:	00005096 	.word	0x00005096
    320c:	000050b3 	.word	0x000050b3
    3210:	000050e7 	.word	0x000050e7
    3214:	c0000001 	.word	0xc0000001
    3218:	c0000002 	.word	0xc0000002
    321c:	c0000003 	.word	0xc0000003
    3220:	0fe10000 	.word	0x0fe10000
    3224:	000050fe 	.word	0x000050fe
    3228:	00005115 	.word	0x00005115
    322c:	00005144 	.word	0x00005144
    3230:	0000515c 	.word	0x0000515c
    3234:	0000517b 	.word	0x0000517b
    3238:	0000519a 	.word	0x0000519a
    323c:	000051b8 	.word	0x000051b8
    3240:	000051d6 	.word	0x000051d6
    3244:	000051f8 	.word	0x000051f8
    3248:	0000521a 	.word	0x0000521a
    324c:	00005232 	.word	0x00005232

00003250 <rtcc_init>:
#include "rtcc.h"

void rtcc_init()
{
    3250:	b508      	push	{r3, lr}
    CMU->HFBUSCLKEN0 |= CMU_HFBUSCLKEN0_LE;
    3252:	4b16      	ldr	r3, [pc, #88]	; (32ac <rtcc_init+0x5c>)
    3254:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
    3258:	f042 0201 	orr.w	r2, r2, #1
    325c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

    CMU->LFEPRESC0 = (CMU->LFEPRESC0 & ~_CMU_LFEPRESC0_RTCC_MASK) | CMU_LFEPRESC0_RTCC_DIV1;
    3260:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    3264:	f022 0203 	bic.w	r2, r2, #3
    3268:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    CMU->LFECLKEN0 |= CMU_LFECLKEN0_RTCC;
    326c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    3270:	f042 0201 	orr.w	r2, r2, #1
    3274:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

    cmu_update_clocks();
    3278:	f7fd fd8a 	bl	d90 <cmu_update_clocks>

    RTCC->CTRL = RTCC_CTRL_CNTMODE_NORMAL | RTCC_CTRL_OSCFDETEN | RTCC_CTRL_CNTTICK_CCV0MATCH | RTCC_CTRL_PRECCV0TOP | RTCC_CTRL_DEBUGRUN;
    327c:	4b0c      	ldr	r3, [pc, #48]	; (32b0 <rtcc_init+0x60>)
    327e:	f249 0214 	movw	r2, #36884	; 0x9014
    3282:	601a      	str	r2, [r3, #0]
    RTCC->PRECNT = 0;
    3284:	2200      	movs	r2, #0
    3286:	605a      	str	r2, [r3, #4]
    RTCC->CNT = 0;
    3288:	609a      	str	r2, [r3, #8]

    RTCC->CC[0].CCV = 999; // Prescaler RTCC_CLOCK_FREQ / (X + 1)
    328a:	f240 32e7 	movw	r2, #999	; 0x3e7
    328e:	645a      	str	r2, [r3, #68]	; 0x44

    RTCC->CC[1].CTRL = RTCC_CC_CTRL_COMPBASE_CNT | RTCC_CC_CTRL_MODE_OUTPUTCOMPARE;
    3290:	2202      	movs	r2, #2
    3292:	651a      	str	r2, [r3, #80]	; 0x50

    RTCC->IFC = _RTCC_IFC_MASK;
    3294:	f240 72ff 	movw	r2, #2047	; 0x7ff
    3298:	621a      	str	r2, [r3, #32]
    RTCC->IEN |= RTCC_IEN_CC1;
    329a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    329c:	f042 0204 	orr.w	r2, r2, #4
    32a0:	625a      	str	r2, [r3, #36]	; 0x24

    RTCC->CTRL |= RTCC_CTRL_ENABLE;
    32a2:	681a      	ldr	r2, [r3, #0]
    32a4:	f042 0201 	orr.w	r2, r2, #1
    32a8:	601a      	str	r2, [r3, #0]
}
    32aa:	bd08      	pop	{r3, pc}
    32ac:	400e4000 	.word	0x400e4000
    32b0:	40062000 	.word	0x40062000

000032b4 <rtcc_get_time>:
uint32_t rtcc_get_time()
{
    return RTCC->CNT;
    32b4:	4b01      	ldr	r3, [pc, #4]	; (32bc <rtcc_get_time+0x8>)
    32b6:	6898      	ldr	r0, [r3, #8]
}
    32b8:	4770      	bx	lr
    32ba:	bf00      	nop
    32bc:	40062000 	.word	0x40062000

000032c0 <_systick_isr>:

volatile uint64_t g_ullSystemTick = 0;

void _systick_isr()
{
    g_ullSystemTick++;
    32c0:	4904      	ldr	r1, [pc, #16]	; (32d4 <_systick_isr+0x14>)
{
    32c2:	b530      	push	{r4, r5, lr}
    g_ullSystemTick++;
    32c4:	e9d1 2300 	ldrd	r2, r3, [r1]
    32c8:	1c54      	adds	r4, r2, #1
    32ca:	f143 0500 	adc.w	r5, r3, #0
    32ce:	e9c1 4500 	strd	r4, r5, [r1]
}
    32d2:	bd30      	pop	{r4, r5, pc}
    32d4:	20000080 	.word	0x20000080

000032d8 <systick_init>:
void systick_init()
{
    SysTick->LOAD = (HFCORE_CLOCK_FREQ / 1000) - 1; // TODO: Change this
    32d8:	4b08      	ldr	r3, [pc, #32]	; (32fc <systick_init+0x24>)
    32da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    32de:	681b      	ldr	r3, [r3, #0]
    32e0:	fbb3 f3f2 	udiv	r3, r3, r2
    32e4:	4a06      	ldr	r2, [pc, #24]	; (3300 <systick_init+0x28>)
    32e6:	3b01      	subs	r3, #1
    32e8:	6053      	str	r3, [r2, #4]
    SysTick->VAL = 0;
    32ea:	2300      	movs	r3, #0
    32ec:	6093      	str	r3, [r2, #8]
    SysTick->CTRL = SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_CLKSOURCE_Msk;
    32ee:	2307      	movs	r3, #7
    32f0:	6013      	str	r3, [r2, #0]

    SCB->SHP[11] = 7 << (8 - __NVIC_PRIO_BITS); // Set priority 3,1 (min)
    32f2:	4b04      	ldr	r3, [pc, #16]	; (3304 <systick_init+0x2c>)
    32f4:	22e0      	movs	r2, #224	; 0xe0
    32f6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
}
    32fa:	4770      	bx	lr
    32fc:	200000b8 	.word	0x200000b8
    3300:	e000e010 	.word	0xe000e010
    3304:	e000ed00 	.word	0xe000ed00

00003308 <delay_ms>:
void delay_ms(uint64_t ullTicks)
{
    uint64_t ullStartTick = g_ullSystemTick;
    3308:	4b08      	ldr	r3, [pc, #32]	; (332c <delay_ms+0x24>)
{
    330a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    uint64_t ullStartTick = g_ullSystemTick;
    330e:	e9d3 4500 	ldrd	r4, r5, [r3]

    while(g_ullSystemTick - ullStartTick < ullTicks);
    3312:	e9d3 8900 	ldrd	r8, r9, [r3]
    3316:	ebb8 0604 	subs.w	r6, r8, r4
    331a:	eb69 0705 	sbc.w	r7, r9, r5
    331e:	428f      	cmp	r7, r1
    3320:	bf08      	it	eq
    3322:	4286      	cmpeq	r6, r0
    3324:	d3f5      	bcc.n	3312 <delay_ms+0xa>
}
    3326:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    332a:	bf00      	nop
    332c:	20000080 	.word	0x20000080

00003330 <i2c1_init>:
}


void i2c1_init(uint8_t ubMode, uint8_t ubSCLLocation, uint8_t ubSDALocation)
{
    if(ubSCLLocation > AFCHANLOC_MAX)
    3330:	2908      	cmp	r1, #8
{
    3332:	b510      	push	{r4, lr}
    if(ubSCLLocation > AFCHANLOC_MAX)
    3334:	d825      	bhi.n	3382 <i2c1_init+0x52>
        return;

    if(ubSDALocation > AFCHANLOC_MAX)
    3336:	2a08      	cmp	r2, #8
    3338:	d823      	bhi.n	3382 <i2c1_init+0x52>
        return;

	CMU->HFPERCLKEN0 |= CMU_HFPERCLKEN0_I2C1;
    333a:	4c17      	ldr	r4, [pc, #92]	; (3398 <i2c1_init+0x68>)
    333c:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
    3340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    3344:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0

    I2C1->CTRL = I2C_CTRL_CLHR_STANDARD | I2C_CTRL_TXBIL_EMPTY;
    3348:	4b14      	ldr	r3, [pc, #80]	; (339c <i2c1_init+0x6c>)
    334a:	2400      	movs	r4, #0
    334c:	601c      	str	r4, [r3, #0]
    I2C1->ROUTEPEN = I2C_ROUTEPEN_SCLPEN | I2C_ROUTEPEN_SDAPEN;
    I2C1->ROUTELOC0 = ((uint32_t)ubSCLLocation << _I2C_ROUTELOC0_SCLLOC_SHIFT) | ((uint32_t)ubSDALocation << _I2C_ROUTELOC0_SDALOC_SHIFT);
    334e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    I2C1->ROUTEPEN = I2C_ROUTEPEN_SCLPEN | I2C_ROUTEPEN_SDAPEN;
    3352:	2403      	movs	r4, #3
    3354:	645c      	str	r4, [r3, #68]	; 0x44
    I2C1->ROUTELOC0 = ((uint32_t)ubSCLLocation << _I2C_ROUTELOC0_SCLLOC_SHIFT) | ((uint32_t)ubSDALocation << _I2C_ROUTELOC0_SDALOC_SHIFT);
    3356:	649a      	str	r2, [r3, #72]	; 0x48

    if(ubMode == I2C_NORMAL)
    3358:	b9a0      	cbnz	r0, 3384 <i2c1_init+0x54>
        I2C1->CLKDIV = (((HFPERC_CLOCK_FREQ / 100000) - 8) / 8) - 1;
    335a:	4a11      	ldr	r2, [pc, #68]	; (33a0 <i2c1_init+0x70>)
    335c:	4911      	ldr	r1, [pc, #68]	; (33a4 <i2c1_init+0x74>)
    335e:	6812      	ldr	r2, [r2, #0]
    3360:	fbb2 f2f1 	udiv	r2, r2, r1
    3364:	3a08      	subs	r2, #8
    3366:	40e2      	lsrs	r2, r4
    else if(ubMode == I2C_FAST)
        I2C1->CLKDIV = (((HFPERC_CLOCK_FREQ / 400000) - 8) / 8) - 1;
    3368:	3a01      	subs	r2, #1
    336a:	611a      	str	r2, [r3, #16]

    I2C1->CTRL |= I2C_CTRL_EN;
    336c:	681a      	ldr	r2, [r3, #0]
    336e:	f042 0201 	orr.w	r2, r2, #1
    3372:	601a      	str	r2, [r3, #0]
    I2C1->CMD |= I2C_CMD_ABORT;
    3374:	685a      	ldr	r2, [r3, #4]
    3376:	f042 0220 	orr.w	r2, r2, #32
    337a:	605a      	str	r2, [r3, #4]

    while(I2C1->STATE & I2C_STATE_BUSY);
    337c:	689a      	ldr	r2, [r3, #8]
    337e:	07d2      	lsls	r2, r2, #31
    3380:	d4fc      	bmi.n	337c <i2c1_init+0x4c>
}
    3382:	bd10      	pop	{r4, pc}
    else if(ubMode == I2C_FAST)
    3384:	2801      	cmp	r0, #1
    3386:	d1f1      	bne.n	336c <i2c1_init+0x3c>
        I2C1->CLKDIV = (((HFPERC_CLOCK_FREQ / 400000) - 8) / 8) - 1;
    3388:	4a05      	ldr	r2, [pc, #20]	; (33a0 <i2c1_init+0x70>)
    338a:	4907      	ldr	r1, [pc, #28]	; (33a8 <i2c1_init+0x78>)
    338c:	6812      	ldr	r2, [r2, #0]
    338e:	fbb2 f2f1 	udiv	r2, r2, r1
    3392:	3a08      	subs	r2, #8
    3394:	08d2      	lsrs	r2, r2, #3
    3396:	e7e7      	b.n	3368 <i2c1_init+0x38>
    3398:	400e4000 	.word	0x400e4000
    339c:	40089400 	.word	0x40089400
    33a0:	200000d8 	.word	0x200000d8
    33a4:	000186a0 	.word	0x000186a0
    33a8:	00061a80 	.word	0x00061a80

000033ac <_default_isr>:
extern uint32_t _end;


void _default_isr()
{
    while(1);
    33ac:	e7fe      	b.n	33ac <_default_isr>

000033ae <__libc_init_array>:
}

void __attribute__ ((weak)) __libc_init_array()
{

}
    33ae:	4770      	bx	lr

000033b0 <_reset_isr>:
extern int main();

#define DEFAULT_ISR "_default_isr"

void _reset_isr()
{
    33b0:	b508      	push	{r3, lr}
    uint32_t *src, *dst;

    src = &_siiram0;
    33b2:	4a1d      	ldr	r2, [pc, #116]	; (3428 <_reset_isr+0x78>)
    33b4:	4b1d      	ldr	r3, [pc, #116]	; (342c <_reset_isr+0x7c>)
    dst = &_siram0;

    while (dst < &_eiram0) // Copy RAM code
    33b6:	491e      	ldr	r1, [pc, #120]	; (3430 <_reset_isr+0x80>)
    33b8:	428b      	cmp	r3, r1
    33ba:	d327      	bcc.n	340c <_reset_isr+0x5c>
    33bc:	4b1d      	ldr	r3, [pc, #116]	; (3434 <_reset_isr+0x84>)
        *(dst++) = *(src++);

    src = &_sidata;
    33be:	4a1e      	ldr	r2, [pc, #120]	; (3438 <_reset_isr+0x88>)
    dst = &_sdata;

    while (dst < &_edata) // Copy data
    33c0:	491e      	ldr	r1, [pc, #120]	; (343c <_reset_isr+0x8c>)
    33c2:	428b      	cmp	r3, r1
    33c4:	d327      	bcc.n	3416 <_reset_isr+0x66>
        *(dst++) = *(src++);

    src = 0;
    dst = &_sbss;
    33c6:	4b1e      	ldr	r3, [pc, #120]	; (3440 <_reset_isr+0x90>)

    while (dst < &_ebss) // Zero BSS
    33c8:	4a1e      	ldr	r2, [pc, #120]	; (3444 <_reset_isr+0x94>)
        *(dst++) = 0;
    33ca:	2100      	movs	r1, #0
    while (dst < &_ebss) // Zero BSS
    33cc:	4293      	cmp	r3, r2
    33ce:	d327      	bcc.n	3420 <_reset_isr+0x70>

    __libc_init_array();
    33d0:	f7ff ffed 	bl	33ae <__libc_init_array>

    SCB->VTOR = (uint32_t)&_svect; // ISR Vectors offset
    33d4:	4b1c      	ldr	r3, [pc, #112]	; (3448 <_reset_isr+0x98>)
    33d6:	4a1d      	ldr	r2, [pc, #116]	; (344c <_reset_isr+0x9c>)
    33d8:	609a      	str	r2, [r3, #8]
    SCB->AIRCR = 0x05FA0000 | (5 << 8); // Interrupt priority - 2 bits Group, 1 bit Sub-group
    33da:	4a1d      	ldr	r2, [pc, #116]	; (3450 <_reset_isr+0xa0>)
    33dc:	60da      	str	r2, [r3, #12]
    SCB->SHCSR = SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk; // Enable separate fault handlers
    33de:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
    33e2:	625a      	str	r2, [r3, #36]	; 0x24
    SCB->SCR |= SCB_SCR_SEVONPEND_Msk; // Pending disabled interrupt generates event
    33e4:	691a      	ldr	r2, [r3, #16]
    33e6:	f042 0210 	orr.w	r2, r2, #16
    33ea:	611a      	str	r2, [r3, #16]
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk; // Enable division by zero faults
    33ec:	695a      	ldr	r2, [r3, #20]
    33ee:	f042 0210 	orr.w	r2, r2, #16
    33f2:	615a      	str	r2, [r3, #20]
    SCB->CPACR |= 0xF << 20; // Enable CP10 & CP11 (FPU) in priv. and non priv. mode
    33f4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    33f8:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    33fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    init();
    3400:	f7ff f966 	bl	26d0 <init>
    main();
    3404:	f7ff fe2a 	bl	305c <main>
  __ASM volatile ("cpsid i" : : : "memory");
    3408:	b672      	cpsid	i

    __disable_irq();
    while(1);
    340a:	e7fe      	b.n	340a <_reset_isr+0x5a>
        *(dst++) = *(src++);
    340c:	f852 0b04 	ldr.w	r0, [r2], #4
    3410:	f843 0b04 	str.w	r0, [r3], #4
    3414:	e7d0      	b.n	33b8 <_reset_isr+0x8>
        *(dst++) = *(src++);
    3416:	f852 0b04 	ldr.w	r0, [r2], #4
    341a:	f843 0b04 	str.w	r0, [r3], #4
    341e:	e7d0      	b.n	33c2 <_reset_isr+0x12>
        *(dst++) = 0;
    3420:	f843 1b04 	str.w	r1, [r3], #4
    3424:	e7d2      	b.n	33cc <_reset_isr+0x1c>
    3426:	bf00      	nop
    3428:	000052c0 	.word	0x000052c0
    342c:	10000000 	.word	0x10000000
    3430:	10000000 	.word	0x10000000
    3434:	20000000 	.word	0x20000000
    3438:	000052c0 	.word	0x000052c0
    343c:	20000078 	.word	0x20000078
    3440:	20000078 	.word	0x20000078
    3444:	2000011c 	.word	0x2000011c
    3448:	e000ed00 	.word	0xe000ed00
    344c:	00000000 	.word	0x00000000
    3450:	05fa0500 	.word	0x05fa0500

00003454 <adc_init>:
#include "adc.h"

void adc_init()
{
    CMU->HFPERCLKEN0 |= CMU_HFPERCLKEN0_ADC0;
    3454:	4b0a      	ldr	r3, [pc, #40]	; (3480 <adc_init+0x2c>)
    3456:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    345a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    345e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    CMU->HFPERCLKEN0 |= CMU_HFPERCLKEN0_ADC1;
    3462:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    3466:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
    346a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    
    CMU->ADCCTRL = CMU_ADCCTRL_ADC0CLKINV | CMU_ADCCTRL_ADC0CLKSEL_HFXO | (7 << _CMU_ADCCTRL_ADC0CLKDIV_SHIFT) | CMU_ADCCTRL_ADC1CLKINV | CMU_ADCCTRL_ADC1CLKSEL_HFXO | (7 << _CMU_ADCCTRL_ADC1CLKDIV_SHIFT);
    346e:	4a05      	ldr	r2, [pc, #20]	; (3484 <adc_init+0x30>)
    3470:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    
    ADC0->CTRL = ADC_CTRL_CHCONREFWARMIDLE_KEEPPREV | ADC_CTRL_CHCONMODE_MAXSETTLE | ADC_CTRL_OVSRSEL_X16 | (0 << _ADC_CTRL_TIMEBASE_SHIFT) | (9 << _ADC_CTRL_PRESC_SHIFT) | ADC_CTRL_ASYNCCLKEN_ALWAYSON | ADC_CTRL_ADCCLKMODE_ASYNC | ADC_CTRL_WARMUPMODE_NORMAL;
    3474:	f5a3 23c4 	sub.w	r3, r3, #401408	; 0x62000
    3478:	4a03      	ldr	r2, [pc, #12]	; (3488 <adc_init+0x34>)
    347a:	601a      	str	r2, [r3, #0]

    cmu_update_clocks();
    347c:	f7fd bc88 	b.w	d90 <cmu_update_clocks>
    3480:	400e4000 	.word	0x400e4000
    3484:	01270127 	.word	0x01270127
    3488:	830009c0 	.word	0x830009c0

0000348c <adc_get_avdd>:
}
float adc_get_avdd()
{
    while(ADC0->STATUS & (ADC_STATUS_WARM | ADC_STATUS_SCANREFWARM | ADC_STATUS_SINGLEREFWARM)); // Wait for ADC to cool down
    348c:	4b1b      	ldr	r3, [pc, #108]	; (34fc <adc_get_avdd+0x70>)
    348e:	68da      	ldr	r2, [r3, #12]
    3490:	f412 5f98 	tst.w	r2, #4864	; 0x1300
    3494:	d1fb      	bne.n	348e <adc_get_avdd+0x2>

    ADC0->SINGLECTRL = ADC_SINGLECTRL_AT_64CYCLES | ADC_SINGLECTRL_NEGSEL_VSS | ADC_SINGLECTRL_POSSEL_AVDD | ADC_SINGLECTRL_REF_5V | ADC_SINGLECTRL_RES_OVS;
    3496:	4a1a      	ldr	r2, [pc, #104]	; (3500 <adc_get_avdd+0x74>)
    3498:	611a      	str	r2, [r3, #16]
    ADC0->SINGLECTRLX = ADC_SINGLECTRLX_FIFOOFACT_OVERWRITE | (0 << _ADC_SINGLECTRLX_DVL_SHIFT);
    349a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    349e:	615a      	str	r2, [r3, #20]
    ADC0->CAL &= ~(_ADC_CAL_SINGLEGAIN_MASK | _ADC_CAL_SINGLEOFFSET_MASK | _ADC_CAL_SINGLEOFFSETINV_MASK);
    34a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    34a2:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
    34a6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    34aa:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->CAL |= (DEVINFO->ADC0CAL1 & 0x7FFF0000) >> 16; // Calibration for 5V reference
    34ac:	4a15      	ldr	r2, [pc, #84]	; (3504 <adc_get_avdd+0x78>)
    34ae:	6e52      	ldr	r2, [r2, #100]	; 0x64
    34b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
    34b2:	f3c2 420e 	ubfx	r2, r2, #16, #15
    34b6:	430a      	orrs	r2, r1
    34b8:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    34ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    34bc:	4912      	ldr	r1, [pc, #72]	; (3508 <adc_get_avdd+0x7c>)
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    34be:	f022 020f 	bic.w	r2, r2, #15
    34c2:	631a      	str	r2, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    34c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    34c6:	f022 020f 	bic.w	r2, r2, #15
    34ca:	630a      	str	r2, [r1, #48]	; 0x30

    ADC0->CMD |= ADC_CMD_SINGLESTART;
    34cc:	689a      	ldr	r2, [r3, #8]
    34ce:	f042 0201 	orr.w	r2, r2, #1
    34d2:	609a      	str	r2, [r3, #8]

    while(!(ADC0->IF & ADC_IF_SINGLE));
    34d4:	4b09      	ldr	r3, [pc, #36]	; (34fc <adc_get_avdd+0x70>)
    34d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    34d8:	07d2      	lsls	r2, r2, #31
    34da:	d5fc      	bpl.n	34d6 <adc_get_avdd+0x4a>

    float fADCCode = ADC0->SINGLEDATA >> 4;
    34dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    float fAVDD = fADCCode * 5000.f / 4096.f;
    34de:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 350c <adc_get_avdd+0x80>
    float fADCCode = ADC0->SINGLEDATA >> 4;
    34e2:	091b      	lsrs	r3, r3, #4
    34e4:	ee07 3a90 	vmov	s15, r3
    34e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    float fAVDD = fADCCode * 5000.f / 4096.f;
    34ec:	ee67 7a80 	vmul.f32	s15, s15, s0

    return fAVDD;
}
    34f0:	ed9f 0a07 	vldr	s0, [pc, #28]	; 3510 <adc_get_avdd+0x84>
    34f4:	ee27 0a80 	vmul.f32	s0, s15, s0
    34f8:	4770      	bx	lr
    34fa:	bf00      	nop
    34fc:	40082000 	.word	0x40082000
    3500:	07ffe078 	.word	0x07ffe078
    3504:	0fe081b0 	.word	0x0fe081b0
    3508:	40082400 	.word	0x40082400
    350c:	459c4000 	.word	0x459c4000
    3510:	39800000 	.word	0x39800000

00003514 <adc_get_dvdd>:
float adc_get_dvdd()
{
    while(ADC0->STATUS & (ADC_STATUS_WARM | ADC_STATUS_SCANREFWARM | ADC_STATUS_SINGLEREFWARM)); // Wait for ADC to cool down
    3514:	4b1b      	ldr	r3, [pc, #108]	; (3584 <adc_get_dvdd+0x70>)
    3516:	68da      	ldr	r2, [r3, #12]
    3518:	f412 5f98 	tst.w	r2, #4864	; 0x1300
    351c:	d1fb      	bne.n	3516 <adc_get_dvdd+0x2>

    ADC0->SINGLECTRL = ADC_SINGLECTRL_AT_64CYCLES | ADC_SINGLECTRL_NEGSEL_VSS | ADC_SINGLECTRL_POSSEL_DVDD | ADC_SINGLECTRL_REF_5V | ADC_SINGLECTRL_RES_OVS;
    351e:	4a1a      	ldr	r2, [pc, #104]	; (3588 <adc_get_dvdd+0x74>)
    3520:	611a      	str	r2, [r3, #16]
    ADC0->SINGLECTRLX = ADC_SINGLECTRLX_FIFOOFACT_OVERWRITE | (0 << _ADC_SINGLECTRLX_DVL_SHIFT);
    3522:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    3526:	615a      	str	r2, [r3, #20]
    ADC0->CAL &= ~(_ADC_CAL_SINGLEGAIN_MASK | _ADC_CAL_SINGLEOFFSET_MASK | _ADC_CAL_SINGLEOFFSETINV_MASK);
    3528:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    352a:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
    352e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    3532:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->CAL |= (DEVINFO->ADC0CAL1 & 0x7FFF0000) >> 16; // Calibration for 5V reference
    3534:	4a15      	ldr	r2, [pc, #84]	; (358c <adc_get_dvdd+0x78>)
    3536:	6e52      	ldr	r2, [r2, #100]	; 0x64
    3538:	6b59      	ldr	r1, [r3, #52]	; 0x34
    353a:	f3c2 420e 	ubfx	r2, r2, #16, #15
    353e:	430a      	orrs	r2, r1
    3540:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    3542:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    3544:	4912      	ldr	r1, [pc, #72]	; (3590 <adc_get_dvdd+0x7c>)
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    3546:	f022 020f 	bic.w	r2, r2, #15
    354a:	631a      	str	r2, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    354c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    354e:	f022 020f 	bic.w	r2, r2, #15
    3552:	630a      	str	r2, [r1, #48]	; 0x30

    ADC0->CMD |= ADC_CMD_SINGLESTART;
    3554:	689a      	ldr	r2, [r3, #8]
    3556:	f042 0201 	orr.w	r2, r2, #1
    355a:	609a      	str	r2, [r3, #8]

    while(!(ADC0->IF & ADC_IF_SINGLE));
    355c:	4b09      	ldr	r3, [pc, #36]	; (3584 <adc_get_dvdd+0x70>)
    355e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    3560:	07d2      	lsls	r2, r2, #31
    3562:	d5fc      	bpl.n	355e <adc_get_dvdd+0x4a>

    float fADCCode = ADC0->SINGLEDATA >> 4;
    3564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    float fDVDD = fADCCode * 5000.f / 4096.f;
    3566:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 3594 <adc_get_dvdd+0x80>
    float fADCCode = ADC0->SINGLEDATA >> 4;
    356a:	091b      	lsrs	r3, r3, #4
    356c:	ee07 3a90 	vmov	s15, r3
    3570:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    float fDVDD = fADCCode * 5000.f / 4096.f;
    3574:	ee67 7a80 	vmul.f32	s15, s15, s0

    return fDVDD;
}
    3578:	ed9f 0a07 	vldr	s0, [pc, #28]	; 3598 <adc_get_dvdd+0x84>
    357c:	ee27 0a80 	vmul.f32	s0, s15, s0
    3580:	4770      	bx	lr
    3582:	bf00      	nop
    3584:	40082000 	.word	0x40082000
    3588:	07ffe278 	.word	0x07ffe278
    358c:	0fe081b0 	.word	0x0fe081b0
    3590:	40082400 	.word	0x40082400
    3594:	459c4000 	.word	0x459c4000
    3598:	39800000 	.word	0x39800000

0000359c <adc_get_iovdd>:
float adc_get_iovdd()
{
    while(ADC0->STATUS & (ADC_STATUS_WARM | ADC_STATUS_SCANREFWARM | ADC_STATUS_SINGLEREFWARM)); // Wait for ADC to cool down
    359c:	4b1b      	ldr	r3, [pc, #108]	; (360c <adc_get_iovdd+0x70>)
    359e:	68da      	ldr	r2, [r3, #12]
    35a0:	f412 5f98 	tst.w	r2, #4864	; 0x1300
    35a4:	d1fb      	bne.n	359e <adc_get_iovdd+0x2>

    ADC0->SINGLECTRL = ADC_SINGLECTRL_AT_64CYCLES | ADC_SINGLECTRL_NEGSEL_VSS | ADC_SINGLECTRL_POSSEL_IOVDD | ADC_SINGLECTRL_REF_5V | ADC_SINGLECTRL_RES_OVS;
    35a6:	4a1a      	ldr	r2, [pc, #104]	; (3610 <adc_get_iovdd+0x74>)
    35a8:	611a      	str	r2, [r3, #16]
    ADC0->SINGLECTRLX = ADC_SINGLECTRLX_FIFOOFACT_OVERWRITE | (0 << _ADC_SINGLECTRLX_DVL_SHIFT);
    35aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    35ae:	615a      	str	r2, [r3, #20]
    ADC0->CAL &= ~(_ADC_CAL_SINGLEGAIN_MASK | _ADC_CAL_SINGLEOFFSET_MASK | _ADC_CAL_SINGLEOFFSETINV_MASK);
    35b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    35b2:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
    35b6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    35ba:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->CAL |= (DEVINFO->ADC0CAL1 & 0x7FFF0000) >> 16; // Calibration for 5V reference
    35bc:	4a15      	ldr	r2, [pc, #84]	; (3614 <adc_get_iovdd+0x78>)
    35be:	6e52      	ldr	r2, [r2, #100]	; 0x64
    35c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
    35c2:	f3c2 420e 	ubfx	r2, r2, #16, #15
    35c6:	430a      	orrs	r2, r1
    35c8:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    35ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    35cc:	4912      	ldr	r1, [pc, #72]	; (3618 <adc_get_iovdd+0x7c>)
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    35ce:	f022 020f 	bic.w	r2, r2, #15
    35d2:	631a      	str	r2, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    35d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    35d6:	f022 020f 	bic.w	r2, r2, #15
    35da:	630a      	str	r2, [r1, #48]	; 0x30

    ADC0->CMD |= ADC_CMD_SINGLESTART;
    35dc:	689a      	ldr	r2, [r3, #8]
    35de:	f042 0201 	orr.w	r2, r2, #1
    35e2:	609a      	str	r2, [r3, #8]

    while(!(ADC0->IF & ADC_IF_SINGLE));
    35e4:	4b09      	ldr	r3, [pc, #36]	; (360c <adc_get_iovdd+0x70>)
    35e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    35e8:	07d2      	lsls	r2, r2, #31
    35ea:	d5fc      	bpl.n	35e6 <adc_get_iovdd+0x4a>

    float fADCCode = ADC0->SINGLEDATA >> 4;
    35ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    float fIOVDD = fADCCode * 5000.f / 4096.f;
    35ee:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 361c <adc_get_iovdd+0x80>
    float fADCCode = ADC0->SINGLEDATA >> 4;
    35f2:	091b      	lsrs	r3, r3, #4
    35f4:	ee07 3a90 	vmov	s15, r3
    35f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    float fIOVDD = fADCCode * 5000.f / 4096.f;
    35fc:	ee67 7a80 	vmul.f32	s15, s15, s0

    return fIOVDD;
}
    3600:	ed9f 0a07 	vldr	s0, [pc, #28]	; 3620 <adc_get_iovdd+0x84>
    3604:	ee27 0a80 	vmul.f32	s0, s15, s0
    3608:	4770      	bx	lr
    360a:	bf00      	nop
    360c:	40082000 	.word	0x40082000
    3610:	07ffe578 	.word	0x07ffe578
    3614:	0fe081b0 	.word	0x0fe081b0
    3618:	40082400 	.word	0x40082400
    361c:	459c4000 	.word	0x459c4000
    3620:	39800000 	.word	0x39800000

00003624 <adc_get_corevdd>:
float adc_get_corevdd()
{
    while(ADC0->STATUS & (ADC_STATUS_WARM | ADC_STATUS_SCANREFWARM | ADC_STATUS_SINGLEREFWARM)); // Wait for ADC to cool down
    3624:	4b1b      	ldr	r3, [pc, #108]	; (3694 <adc_get_corevdd+0x70>)
    3626:	68da      	ldr	r2, [r3, #12]
    3628:	f412 5f98 	tst.w	r2, #4864	; 0x1300
    362c:	d1fb      	bne.n	3626 <adc_get_corevdd+0x2>

    ADC0->SINGLECTRL = ADC_SINGLECTRL_AT_64CYCLES | ADC_SINGLECTRL_NEGSEL_VSS | ADC_SINGLECTRL_POSSEL_DECOUPLE | ADC_SINGLECTRL_REF_2V5 | ADC_SINGLECTRL_RES_OVS;
    362e:	4a1a      	ldr	r2, [pc, #104]	; (3698 <adc_get_corevdd+0x74>)
    3630:	611a      	str	r2, [r3, #16]
    ADC0->SINGLECTRLX = ADC_SINGLECTRLX_FIFOOFACT_OVERWRITE | (0 << _ADC_SINGLECTRLX_DVL_SHIFT);
    3632:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    3636:	615a      	str	r2, [r3, #20]
    ADC0->CAL &= ~(_ADC_CAL_SINGLEGAIN_MASK | _ADC_CAL_SINGLEOFFSET_MASK | _ADC_CAL_SINGLEOFFSETINV_MASK);
    3638:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    363a:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
    363e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    3642:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->CAL |= (DEVINFO->ADC0CAL0 & 0x7FFF0000) >> 16; // Calibration for 2V5 reference
    3644:	4a15      	ldr	r2, [pc, #84]	; (369c <adc_get_corevdd+0x78>)
    3646:	6e12      	ldr	r2, [r2, #96]	; 0x60
    3648:	6b59      	ldr	r1, [r3, #52]	; 0x34
    364a:	f3c2 420e 	ubfx	r2, r2, #16, #15
    364e:	430a      	orrs	r2, r1
    3650:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    3652:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    3654:	4912      	ldr	r1, [pc, #72]	; (36a0 <adc_get_corevdd+0x7c>)
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    3656:	f022 020f 	bic.w	r2, r2, #15
    365a:	631a      	str	r2, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    365c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    365e:	f022 020f 	bic.w	r2, r2, #15
    3662:	630a      	str	r2, [r1, #48]	; 0x30

    ADC0->CMD |= ADC_CMD_SINGLESTART;
    3664:	689a      	ldr	r2, [r3, #8]
    3666:	f042 0201 	orr.w	r2, r2, #1
    366a:	609a      	str	r2, [r3, #8]

    while(!(ADC0->IF & ADC_IF_SINGLE));
    366c:	4b09      	ldr	r3, [pc, #36]	; (3694 <adc_get_corevdd+0x70>)
    366e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    3670:	07d2      	lsls	r2, r2, #31
    3672:	d5fc      	bpl.n	366e <adc_get_corevdd+0x4a>

    float fADCCode = ADC0->SINGLEDATA >> 4;
    3674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    float fDECOUPLE = fADCCode * 2500.f / 4096.f;
    3676:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 36a4 <adc_get_corevdd+0x80>
    float fADCCode = ADC0->SINGLEDATA >> 4;
    367a:	091b      	lsrs	r3, r3, #4
    367c:	ee07 3a90 	vmov	s15, r3
    3680:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    float fDECOUPLE = fADCCode * 2500.f / 4096.f;
    3684:	ee67 7a80 	vmul.f32	s15, s15, s0

    return fDECOUPLE;
}
    3688:	ed9f 0a07 	vldr	s0, [pc, #28]	; 36a8 <adc_get_corevdd+0x84>
    368c:	ee27 0a80 	vmul.f32	s0, s15, s0
    3690:	4770      	bx	lr
    3692:	bf00      	nop
    3694:	40082000 	.word	0x40082000
    3698:	07ffe438 	.word	0x07ffe438
    369c:	0fe081b0 	.word	0x0fe081b0
    36a0:	40082400 	.word	0x40082400
    36a4:	451c4000 	.word	0x451c4000
    36a8:	39800000 	.word	0x39800000

000036ac <adc_get_temperature>:
float adc_get_temperature()
{
    36ac:	b510      	push	{r4, lr}
    while(ADC0->STATUS & (ADC_STATUS_WARM | ADC_STATUS_SCANREFWARM | ADC_STATUS_SINGLEREFWARM)); // Wait for ADC to cool down
    36ae:	4b26      	ldr	r3, [pc, #152]	; (3748 <adc_get_temperature+0x9c>)
    36b0:	68da      	ldr	r2, [r3, #12]
    36b2:	f412 5f98 	tst.w	r2, #4864	; 0x1300
    36b6:	d1fb      	bne.n	36b0 <adc_get_temperature+0x4>

    ADC0->SINGLECTRL = ADC_SINGLECTRL_AT_256CYCLES | ADC_SINGLECTRL_NEGSEL_VSS | ADC_SINGLECTRL_POSSEL_TEMP | ADC_SINGLECTRL_REF_1V25 | ADC_SINGLECTRL_RES_OVS;
    36b8:	4a24      	ldr	r2, [pc, #144]	; (374c <adc_get_temperature+0xa0>)
    36ba:	611a      	str	r2, [r3, #16]
    ADC0->SINGLECTRLX = ADC_SINGLECTRLX_FIFOOFACT_OVERWRITE | (0 << _ADC_SINGLECTRLX_DVL_SHIFT);
    36bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    36c0:	615a      	str	r2, [r3, #20]
    ADC0->CAL &= ~(_ADC_CAL_SINGLEGAIN_MASK | _ADC_CAL_SINGLEOFFSET_MASK | _ADC_CAL_SINGLEOFFSETINV_MASK);
    36c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    ADC0->CAL |= (DEVINFO->ADC0CAL0 & 0x00007FFF) >> 0; // Calibration for 1V25 reference
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_LOWACC;
    36c4:	4c22      	ldr	r4, [pc, #136]	; (3750 <adc_get_temperature+0xa4>)
    ADC0->CAL &= ~(_ADC_CAL_SINGLEGAIN_MASK | _ADC_CAL_SINGLEOFFSET_MASK | _ADC_CAL_SINGLEOFFSETINV_MASK);
    36c6:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
    36ca:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    36ce:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->CAL |= (DEVINFO->ADC0CAL0 & 0x00007FFF) >> 0; // Calibration for 1V25 reference
    36d0:	4a20      	ldr	r2, [pc, #128]	; (3754 <adc_get_temperature+0xa8>)
    36d2:	6e11      	ldr	r1, [r2, #96]	; 0x60
    36d4:	6b58      	ldr	r0, [r3, #52]	; 0x34
    36d6:	f3c1 010e 	ubfx	r1, r1, #0, #15
    36da:	4301      	orrs	r1, r0
    36dc:	6359      	str	r1, [r3, #52]	; 0x34
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_LOWACC;
    36de:	6b18      	ldr	r0, [r3, #48]	; 0x30
    36e0:	4020      	ands	r0, r4
    36e2:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
    36e6:	6318      	str	r0, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_LOWACC;
    36e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
    36ea:	481b      	ldr	r0, [pc, #108]	; (3758 <adc_get_temperature+0xac>)
    36ec:	4021      	ands	r1, r4
    36ee:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
    36f2:	6301      	str	r1, [r0, #48]	; 0x30

    ADC0->CMD |= ADC_CMD_SINGLESTART;
    36f4:	6899      	ldr	r1, [r3, #8]
    36f6:	f041 0101 	orr.w	r1, r1, #1
    36fa:	6099      	str	r1, [r3, #8]

    while(!(ADC0->IF & ADC_IF_SINGLE));
    36fc:	4613      	mov	r3, r2
    36fe:	4a12      	ldr	r2, [pc, #72]	; (3748 <adc_get_temperature+0x9c>)
    3700:	6b91      	ldr	r1, [r2, #56]	; 0x38
    3702:	07c9      	lsls	r1, r1, #31
    3704:	d5fc      	bpl.n	3700 <adc_get_temperature+0x54>

    float fADCCode = ADC0->SINGLEDATA >> 4;
    3706:	6c91      	ldr	r1, [r2, #72]	; 0x48
    float fCalibrationTemp = (DEVINFO->CAL & _DEVINFO_CAL_TEMP_MASK) >> _DEVINFO_CAL_TEMP_SHIFT;
    3708:	681a      	ldr	r2, [r3, #0]
    float fADCCalibrationTemp = (DEVINFO->ADC0CAL3 & _DEVINFO_ADC0CAL3_TEMPREAD1V25_MASK) >> _DEVINFO_ADC0CAL3_TEMPREAD1V25_SHIFT;
    370a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    float fADCTemp = fCalibrationTemp - (fADCCalibrationTemp - fADCCode) * 1250.f / (4096.f * -1.84f);
    370c:	eddf 6a13 	vldr	s13, [pc, #76]	; 375c <adc_get_temperature+0xb0>
    float fADCCalibrationTemp = (DEVINFO->ADC0CAL3 & _DEVINFO_ADC0CAL3_TEMPREAD1V25_MASK) >> _DEVINFO_ADC0CAL3_TEMPREAD1V25_SHIFT;
    3710:	f3c3 130b 	ubfx	r3, r3, #4, #12
    3714:	ee07 3a90 	vmov	s15, r3
    float fADCCode = ADC0->SINGLEDATA >> 4;
    3718:	090b      	lsrs	r3, r1, #4
    float fADCCalibrationTemp = (DEVINFO->ADC0CAL3 & _DEVINFO_ADC0CAL3_TEMPREAD1V25_MASK) >> _DEVINFO_ADC0CAL3_TEMPREAD1V25_SHIFT;
    371a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    float fADCCode = ADC0->SINGLEDATA >> 4;
    371e:	ee07 3a90 	vmov	s15, r3
    3722:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    float fCalibrationTemp = (DEVINFO->CAL & _DEVINFO_CAL_TEMP_MASK) >> _DEVINFO_CAL_TEMP_SHIFT;
    3726:	f3c2 4307 	ubfx	r3, r2, #16, #8
    float fADCTemp = fCalibrationTemp - (fADCCalibrationTemp - fADCCode) * 1250.f / (4096.f * -1.84f);
    372a:	ee77 7a67 	vsub.f32	s15, s14, s15
    372e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 3760 <adc_get_temperature+0xb4>
    3732:	ee67 7a87 	vmul.f32	s15, s15, s14
    float fCalibrationTemp = (DEVINFO->CAL & _DEVINFO_CAL_TEMP_MASK) >> _DEVINFO_CAL_TEMP_SHIFT;
    3736:	ee00 3a10 	vmov	s0, r3
    float fADCTemp = fCalibrationTemp - (fADCCalibrationTemp - fADCCode) * 1250.f / (4096.f * -1.84f);
    373a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    float fCalibrationTemp = (DEVINFO->CAL & _DEVINFO_CAL_TEMP_MASK) >> _DEVINFO_CAL_TEMP_SHIFT;
    373e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0

    return fADCTemp;
}
    3742:	ee37 0a00 	vadd.f32	s0, s14, s0
    3746:	bd10      	pop	{r4, pc}
    3748:	40082000 	.word	0x40082000
    374c:	09fff318 	.word	0x09fff318
    3750:	fffefff0 	.word	0xfffefff0
    3754:	0fe081b0 	.word	0x0fe081b0
    3758:	40082400 	.word	0x40082400
    375c:	45eb851f 	.word	0x45eb851f
    3760:	449c4000 	.word	0x449c4000

00003764 <_out_buffer>:


// internal buffer output
static inline void _out_buffer(char character, char* buffer, size_t idx, size_t maxlen)
{
  if (idx < maxlen) {
    3764:	429a      	cmp	r2, r3
    buffer[idx] = character;
    3766:	bf38      	it	cc
    3768:	5488      	strbcc	r0, [r1, r2]
  }
}
    376a:	4770      	bx	lr

0000376c <_out_null>:

// internal null output
static inline void _out_null(char character, char* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
    376c:	4770      	bx	lr

0000376e <_ntoa_format>:
}


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
    376e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3772:	469b      	mov	fp, r3
    3774:	e9dd 7311 	ldrd	r7, r3, [sp, #68]	; 0x44
    3778:	4681      	mov	r9, r0
  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    377a:	f013 0002 	ands.w	r0, r3, #2
{
    377e:	468a      	mov	sl, r1
    3780:	4616      	mov	r6, r2
    3782:	e9dd 540c 	ldrd	r5, r4, [sp, #48]	; 0x30
    3786:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    378a:	9001      	str	r0, [sp, #4]
{
    378c:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
    buf[len++] = '0';
    3790:	f04f 0e30 	mov.w	lr, #48	; 0x30
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3794:	d044      	beq.n	3820 <_ntoa_format+0xb2>
  }
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3796:	f003 0003 	and.w	r0, r3, #3
    379a:	2801      	cmp	r0, #1
    buf[len++] = '0';
    379c:	f04f 0e30 	mov.w	lr, #48	; 0x30
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    37a0:	d046      	beq.n	3830 <_ntoa_format+0xc2>
  }

  // handle hash
  if (flags & FLAGS_HASH) {
    37a2:	f013 0f10 	tst.w	r3, #16
    37a6:	d018      	beq.n	37da <_ntoa_format+0x6c>
    if (((len == prec) || (len == width)) && (len > 0U)) {
    37a8:	42a1      	cmp	r1, r4
    37aa:	d001      	beq.n	37b0 <_ntoa_format+0x42>
    37ac:	42a7      	cmp	r7, r4
    37ae:	d144      	bne.n	383a <_ntoa_format+0xcc>
    37b0:	2c00      	cmp	r4, #0
    37b2:	d079      	beq.n	38a8 <_ntoa_format+0x13a>
      len--;
      if ((base == 16U) && (len > 0U)) {
    37b4:	2a10      	cmp	r2, #16
      len--;
    37b6:	f104 31ff 	add.w	r1, r4, #4294967295	; 0xffffffff
      if ((base == 16U) && (len > 0U)) {
    37ba:	d147      	bne.n	384c <_ntoa_format+0xde>
    37bc:	2900      	cmp	r1, #0
    37be:	d041      	beq.n	3844 <_ntoa_format+0xd6>
        len--;
    37c0:	3c02      	subs	r4, #2
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    37c2:	0699      	lsls	r1, r3, #26
    37c4:	d473      	bmi.n	38ae <_ntoa_format+0x140>
    37c6:	2c1f      	cmp	r4, #31
    37c8:	d873      	bhi.n	38b2 <_ntoa_format+0x144>
      buf[len++] = 'x';
    37ca:	2278      	movs	r2, #120	; 0x78
    }
    if ((base == 16U) &&  (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = 'X';
    37cc:	552a      	strb	r2, [r5, r4]
    37ce:	3401      	adds	r4, #1
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    37d0:	2c1f      	cmp	r4, #31
    37d2:	d86e      	bhi.n	38b2 <_ntoa_format+0x144>
      buf[len++] = '0';
    37d4:	2230      	movs	r2, #48	; 0x30
    37d6:	552a      	strb	r2, [r5, r4]
    37d8:	3401      	adds	r4, #1
    }
  }

  // handle sign
  if ((len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    37da:	42bc      	cmp	r4, r7
    37dc:	d106      	bne.n	37ec <_ntoa_format+0x7e>
    37de:	f1bc 0f00 	cmp.w	ip, #0
    37e2:	d102      	bne.n	37ea <_ntoa_format+0x7c>
    37e4:	f013 0f0c 	tst.w	r3, #12
    37e8:	d057      	beq.n	389a <_ntoa_format+0x12c>
    len--;
    37ea:	1e7c      	subs	r4, r7, #1
  }
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    37ec:	2c1f      	cmp	r4, #31
    37ee:	d805      	bhi.n	37fc <_ntoa_format+0x8e>
    if (negative) {
    37f0:	f1bc 0f00 	cmp.w	ip, #0
    37f4:	d054      	beq.n	38a0 <_ntoa_format+0x132>
      buf[len++] = '-';
    37f6:	232d      	movs	r3, #45	; 0x2d
    }
    else if (flags & FLAGS_PLUS) {
      buf[len++] = '+';  // ignore the space if the '+' exists
    }
    else if (flags & FLAGS_SPACE) {
      buf[len++] = ' ';
    37f8:	552b      	strb	r3, [r5, r4]
    37fa:	3401      	adds	r4, #1
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    37fc:	b3c0      	cbz	r0, 3870 <_ntoa_format+0x102>
    37fe:	4425      	add	r5, r4
    3800:	f04f 0800 	mov.w	r8, #0
      out(' ', buffer, idx++, maxlen);
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
    3804:	4544      	cmp	r4, r8
    3806:	eb06 0208 	add.w	r2, r6, r8
    380a:	d135      	bne.n	3878 <_ntoa_format+0x10a>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    380c:	9b01      	ldr	r3, [sp, #4]
    380e:	2b00      	cmp	r3, #0
    3810:	d140      	bne.n	3894 <_ntoa_format+0x126>
      out(' ', buffer, idx++, maxlen);
    }
  }

  return idx;
}
    3812:	4610      	mov	r0, r2
    3814:	b003      	add	sp, #12
    3816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    buf[len++] = '0';
    381a:	f805 e004 	strb.w	lr, [r5, r4]
    381e:	3401      	adds	r4, #1
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3820:	42a1      	cmp	r1, r4
    3822:	d9b8      	bls.n	3796 <_ntoa_format+0x28>
    3824:	2c20      	cmp	r4, #32
    3826:	d1f8      	bne.n	381a <_ntoa_format+0xac>
    3828:	e7b5      	b.n	3796 <_ntoa_format+0x28>
    buf[len++] = '0';
    382a:	f805 e004 	strb.w	lr, [r5, r4]
    382e:	3401      	adds	r4, #1
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3830:	42a7      	cmp	r7, r4
    3832:	d9b6      	bls.n	37a2 <_ntoa_format+0x34>
    3834:	2c20      	cmp	r4, #32
    3836:	d1f8      	bne.n	382a <_ntoa_format+0xbc>
    3838:	e7b3      	b.n	37a2 <_ntoa_format+0x34>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    383a:	2a10      	cmp	r2, #16
    383c:	d0c1      	beq.n	37c2 <_ntoa_format+0x54>
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    383e:	2c1f      	cmp	r4, #31
    3840:	d8dc      	bhi.n	37fc <_ntoa_format+0x8e>
    3842:	e7c7      	b.n	37d4 <_ntoa_format+0x66>
    3844:	460c      	mov	r4, r1
    3846:	e7bc      	b.n	37c2 <_ntoa_format+0x54>
      buf[len++] = 'X';
    3848:	2258      	movs	r2, #88	; 0x58
    384a:	e7bf      	b.n	37cc <_ntoa_format+0x5e>
      len--;
    384c:	460c      	mov	r4, r1
    384e:	e7c1      	b.n	37d4 <_ntoa_format+0x66>
    else if (flags & FLAGS_SPACE) {
    3850:	071b      	lsls	r3, r3, #28
    3852:	d5d3      	bpl.n	37fc <_ntoa_format+0x8e>
      buf[len++] = ' ';
    3854:	2320      	movs	r3, #32
    3856:	e7cf      	b.n	37f8 <_ntoa_format+0x8a>
      out(' ', buffer, idx++, maxlen);
    3858:	1c56      	adds	r6, r2, #1
    385a:	465b      	mov	r3, fp
    385c:	4651      	mov	r1, sl
    385e:	2020      	movs	r0, #32
    3860:	47c8      	blx	r9
    3862:	4632      	mov	r2, r6
    for (size_t i = len; i < width; i++) {
    3864:	eb08 0302 	add.w	r3, r8, r2
    3868:	429f      	cmp	r7, r3
    386a:	d8f5      	bhi.n	3858 <_ntoa_format+0xea>
    386c:	4616      	mov	r6, r2
    386e:	e7c6      	b.n	37fe <_ntoa_format+0x90>
    3870:	4632      	mov	r2, r6
    3872:	eba4 0806 	sub.w	r8, r4, r6
    3876:	e7f5      	b.n	3864 <_ntoa_format+0xf6>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
    3878:	465b      	mov	r3, fp
    387a:	4651      	mov	r1, sl
    387c:	f815 0d01 	ldrb.w	r0, [r5, #-1]!
    3880:	47c8      	blx	r9
  for (size_t i = 0U; i < len; i++) {
    3882:	f108 0801 	add.w	r8, r8, #1
    3886:	e7bd      	b.n	3804 <_ntoa_format+0x96>
      out(' ', buffer, idx++, maxlen);
    3888:	1c54      	adds	r4, r2, #1
    388a:	465b      	mov	r3, fp
    388c:	4651      	mov	r1, sl
    388e:	2020      	movs	r0, #32
    3890:	47c8      	blx	r9
    3892:	4622      	mov	r2, r4
    while (idx < width) {
    3894:	42ba      	cmp	r2, r7
    3896:	d3f7      	bcc.n	3888 <_ntoa_format+0x11a>
    3898:	e7bb      	b.n	3812 <_ntoa_format+0xa4>
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    389a:	2f1f      	cmp	r7, #31
    389c:	463c      	mov	r4, r7
    389e:	d8ad      	bhi.n	37fc <_ntoa_format+0x8e>
    else if (flags & FLAGS_PLUS) {
    38a0:	075a      	lsls	r2, r3, #29
    38a2:	d5d5      	bpl.n	3850 <_ntoa_format+0xe2>
      buf[len++] = '+';  // ignore the space if the '+' exists
    38a4:	232b      	movs	r3, #43	; 0x2b
    38a6:	e7a7      	b.n	37f8 <_ntoa_format+0x8a>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    38a8:	2a10      	cmp	r2, #16
    38aa:	d193      	bne.n	37d4 <_ntoa_format+0x66>
    38ac:	e789      	b.n	37c2 <_ntoa_format+0x54>
    if ((base == 16U) &&  (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    38ae:	2c1f      	cmp	r4, #31
    38b0:	d9ca      	bls.n	3848 <_ntoa_format+0xda>
  if ((len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    38b2:	42bc      	cmp	r4, r7
    38b4:	d093      	beq.n	37de <_ntoa_format+0x70>
    38b6:	e7a1      	b.n	37fc <_ntoa_format+0x8e>

000038b8 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    38b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    38bc:	b091      	sub	sp, #68	; 0x44
    38be:	f8dd c074 	ldr.w	ip, [sp, #116]	; 0x74
    38c2:	9d18      	ldr	r5, [sp, #96]	; 0x60
    38c4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    38c6:	f41c 6f80 	tst.w	ip, #1024	; 0x400
    38ca:	d000      	beq.n	38ce <_ntoa_long+0x16>
    38cc:	b3a5      	cbz	r5, 3938 <_ntoa_long+0x80>
    38ce:	f01c 0f20 	tst.w	ip, #32
    38d2:	f10d 0e20 	add.w	lr, sp, #32
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    38d6:	f04f 0600 	mov.w	r6, #0
    38da:	bf14      	ite	ne
    38dc:	f04f 0837 	movne.w	r8, #55	; 0x37
    38e0:	f04f 0857 	moveq.w	r8, #87	; 0x57
      const char digit = (char)(value % base);
    38e4:	fbb5 f9f7 	udiv	r9, r5, r7
    38e8:	fb07 5919 	mls	r9, r7, r9, r5
    38ec:	fa5f f489 	uxtb.w	r4, r9
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    38f0:	f1b9 0f09 	cmp.w	r9, #9
    38f4:	bf94      	ite	ls
    38f6:	3430      	addls	r4, #48	; 0x30
    38f8:	4444      	addhi	r4, r8
    38fa:	b2e4      	uxtb	r4, r4
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    38fc:	42bd      	cmp	r5, r7
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    38fe:	f80e 4b01 	strb.w	r4, [lr], #1
      value /= base;
    3902:	fbb5 f4f7 	udiv	r4, r5, r7
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    3906:	f106 0601 	add.w	r6, r6, #1
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    390a:	d301      	bcc.n	3910 <_ntoa_long+0x58>
    390c:	2e20      	cmp	r6, #32
    390e:	d111      	bne.n	3934 <_ntoa_long+0x7c>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    3910:	9c1c      	ldr	r4, [sp, #112]	; 0x70
    3912:	9405      	str	r4, [sp, #20]
    3914:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    3916:	f8cd c018 	str.w	ip, [sp, #24]
    391a:	e9cd 7403 	strd	r7, r4, [sp, #12]
    391e:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
    3922:	e9cd 6401 	strd	r6, r4, [sp, #4]
    3926:	ac08      	add	r4, sp, #32
    3928:	9400      	str	r4, [sp, #0]
    392a:	f7ff ff20 	bl	376e <_ntoa_format>
}
    392e:	b011      	add	sp, #68	; 0x44
    3930:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      value /= base;
    3934:	4625      	mov	r5, r4
    3936:	e7d5      	b.n	38e4 <_ntoa_long+0x2c>
  size_t len = 0U;
    3938:	462e      	mov	r6, r5
    393a:	e7e9      	b.n	3910 <_ntoa_long+0x58>

0000393c <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    393c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3940:	b093      	sub	sp, #76	; 0x4c
    3942:	4691      	mov	r9, r2
    3944:	9d24      	ldr	r5, [sp, #144]	; 0x90
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    3946:	056a      	lsls	r2, r5, #21
{
    3948:	4607      	mov	r7, r0
    394a:	4688      	mov	r8, r1
    394c:	469a      	mov	sl, r3
  if (!(flags & FLAGS_PRECISION) || value) {
    394e:	d503      	bpl.n	3958 <_ntoa_long_long+0x1c>
    3950:	e9dd 341c 	ldrd	r3, r4, [sp, #112]	; 0x70
    3954:	4323      	orrs	r3, r4
    3956:	d03b      	beq.n	39d0 <_ntoa_long_long+0x94>
    3958:	f015 0f20 	tst.w	r5, #32
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    395c:	bf14      	ite	ne
    395e:	2337      	movne	r3, #55	; 0x37
    3960:	2357      	moveq	r3, #87	; 0x57
    3962:	ae0a      	add	r6, sp, #40	; 0x28
    3964:	2400      	movs	r4, #0
    3966:	9309      	str	r3, [sp, #36]	; 0x24
      const char digit = (char)(value % base);
    3968:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
    396c:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
    3970:	f7fd f88c 	bl	a8c <__aeabi_uldivmod>
    3974:	b2d2      	uxtb	r2, r2
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    3976:	2a09      	cmp	r2, #9
    3978:	bf8a      	itet	hi
    397a:	9b09      	ldrhi	r3, [sp, #36]	; 0x24
    397c:	3230      	addls	r2, #48	; 0x30
    397e:	18d2      	addhi	r2, r2, r3
    3980:	b2d2      	uxtb	r2, r2
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    3982:	e9dd bc20 	ldrd	fp, ip, [sp, #128]	; 0x80
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    3986:	f806 2b01 	strb.w	r2, [r6], #1
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    398a:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
    398e:	4563      	cmp	r3, ip
    3990:	bf08      	it	eq
    3992:	455a      	cmpeq	r2, fp
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    3994:	f104 0401 	add.w	r4, r4, #1
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    3998:	d301      	bcc.n	399e <_ntoa_long_long+0x62>
    399a:	2c20      	cmp	r4, #32
    399c:	d115      	bne.n	39ca <_ntoa_long_long+0x8e>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    399e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    39a0:	9305      	str	r3, [sp, #20]
    39a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
    39a4:	9304      	str	r3, [sp, #16]
    39a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
    39a8:	9303      	str	r3, [sp, #12]
    39aa:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
    39ae:	9506      	str	r5, [sp, #24]
    39b0:	e9cd 4301 	strd	r4, r3, [sp, #4]
    39b4:	ab0a      	add	r3, sp, #40	; 0x28
    39b6:	9300      	str	r3, [sp, #0]
    39b8:	464a      	mov	r2, r9
    39ba:	4653      	mov	r3, sl
    39bc:	4641      	mov	r1, r8
    39be:	4638      	mov	r0, r7
    39c0:	f7ff fed5 	bl	376e <_ntoa_format>
}
    39c4:	b013      	add	sp, #76	; 0x4c
    39c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      value /= base;
    39ca:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
    39ce:	e7cb      	b.n	3968 <_ntoa_long_long+0x2c>
  size_t len = 0U;
    39d0:	2400      	movs	r4, #0
    39d2:	e7e4      	b.n	399e <_ntoa_long_long+0x62>

000039d4 <_out_char>:
  if (character) {
    39d4:	b108      	cbz	r0, 39da <_out_char+0x6>
    _putchar(character);
    39d6:	f7fd bea0 	b.w	171a <_putchar>
}
    39da:	4770      	bx	lr
    39dc:	0000      	movs	r0, r0
	...

000039e0 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
    39e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    39e4:	b09f      	sub	sp, #124	; 0x7c
    39e6:	469a      	mov	sl, r3
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
    // use null output function
    out = _out_null;
    39e8:	1e0b      	subs	r3, r1, #0
    39ea:	930c      	str	r3, [sp, #48]	; 0x30
    39ec:	f8dd b0a0 	ldr.w	fp, [sp, #160]	; 0xa0
    39f0:	4bb5      	ldr	r3, [pc, #724]	; (3cc8 <_vsnprintf+0x2e8>)
    39f2:	bf18      	it	ne
    39f4:	4603      	movne	r3, r0
{
    39f6:	4691      	mov	r9, r2
    out = _out_null;
    39f8:	930b      	str	r3, [sp, #44]	; 0x2c
    return 0U;
    39fa:	2400      	movs	r4, #0
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
        format++;
        break;
    39fc:	e34a      	b.n	4094 <_vsnprintf+0x6b4>
    if (*format != '%') {
    39fe:	2825      	cmp	r0, #37	; 0x25
    3a00:	f10a 0a01 	add.w	sl, sl, #1
    3a04:	d007      	beq.n	3a16 <_vsnprintf+0x36>
        out('%', buffer, idx++, maxlen);
        format++;
        break;

      default :
        out(*format, buffer, idx++, maxlen);
    3a06:	1c65      	adds	r5, r4, #1
    3a08:	4622      	mov	r2, r4
    3a0a:	464b      	mov	r3, r9
    3a0c:	e9dd 410b 	ldrd	r4, r1, [sp, #44]	; 0x2c
    3a10:	47a0      	blx	r4
    3a12:	462c      	mov	r4, r5
        format++;
        break;
    3a14:	e33e      	b.n	4094 <_vsnprintf+0x6b4>
    flags = 0U;
    3a16:	2500      	movs	r5, #0
    3a18:	e006      	b.n	3a28 <_vsnprintf+0x48>
      switch (*format) {
    3a1a:	2b2d      	cmp	r3, #45	; 0x2d
    3a1c:	d016      	beq.n	3a4c <_vsnprintf+0x6c>
    3a1e:	2b30      	cmp	r3, #48	; 0x30
    3a20:	d10c      	bne.n	3a3c <_vsnprintf+0x5c>
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    3a22:	f045 0501 	orr.w	r5, r5, #1
{
    3a26:	4692      	mov	sl, r2
      switch (*format) {
    3a28:	4652      	mov	r2, sl
    3a2a:	f812 3b01 	ldrb.w	r3, [r2], #1
    3a2e:	2b2b      	cmp	r3, #43	; 0x2b
    3a30:	d00f      	beq.n	3a52 <_vsnprintf+0x72>
    3a32:	d8f2      	bhi.n	3a1a <_vsnprintf+0x3a>
    3a34:	2b20      	cmp	r3, #32
    3a36:	d00f      	beq.n	3a58 <_vsnprintf+0x78>
    3a38:	2b23      	cmp	r3, #35	; 0x23
    3a3a:	d010      	beq.n	3a5e <_vsnprintf+0x7e>
    if (_is_digit(*format)) {
    3a3c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    3a40:	2909      	cmp	r1, #9
    3a42:	d82e      	bhi.n	3aa2 <_vsnprintf+0xc2>
  unsigned int i = 0U;
    3a44:	2300      	movs	r3, #0
    3a46:	930d      	str	r3, [sp, #52]	; 0x34
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    3a48:	200a      	movs	r0, #10
    3a4a:	e011      	b.n	3a70 <_vsnprintf+0x90>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    3a4c:	f045 0502 	orr.w	r5, r5, #2
    3a50:	e7e9      	b.n	3a26 <_vsnprintf+0x46>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    3a52:	f045 0504 	orr.w	r5, r5, #4
    3a56:	e7e6      	b.n	3a26 <_vsnprintf+0x46>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    3a58:	f045 0508 	orr.w	r5, r5, #8
    3a5c:	e7e3      	b.n	3a26 <_vsnprintf+0x46>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    3a5e:	f045 0510 	orr.w	r5, r5, #16
    3a62:	e7e0      	b.n	3a26 <_vsnprintf+0x46>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    3a64:	990d      	ldr	r1, [sp, #52]	; 0x34
    3a66:	fb00 3301 	mla	r3, r0, r1, r3
    3a6a:	3b30      	subs	r3, #48	; 0x30
    3a6c:	930d      	str	r3, [sp, #52]	; 0x34
    3a6e:	4692      	mov	sl, r2
  while (_is_digit(**str)) {
    3a70:	4652      	mov	r2, sl
    3a72:	f812 3b01 	ldrb.w	r3, [r2], #1
    3a76:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    3a7a:	2909      	cmp	r1, #9
    3a7c:	d9f2      	bls.n	3a64 <_vsnprintf+0x84>
    if (*format == '.') {
    3a7e:	f89a 3000 	ldrb.w	r3, [sl]
    3a82:	2b2e      	cmp	r3, #46	; 0x2e
    3a84:	d148      	bne.n	3b18 <_vsnprintf+0x138>
      if (_is_digit(*format)) {
    3a86:	f89a 2001 	ldrb.w	r2, [sl, #1]
    3a8a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    3a8e:	2909      	cmp	r1, #9
    3a90:	f10a 0301 	add.w	r3, sl, #1
      flags |= FLAGS_PRECISION;
    3a94:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
      if (_is_digit(*format)) {
    3a98:	d836      	bhi.n	3b08 <_vsnprintf+0x128>
      format++;
    3a9a:	469a      	mov	sl, r3
  unsigned int i = 0U;
    3a9c:	2600      	movs	r6, #0
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    3a9e:	210a      	movs	r1, #10
    3aa0:	e013      	b.n	3aca <_vsnprintf+0xea>
    else if (*format == '*') {
    3aa2:	2b2a      	cmp	r3, #42	; 0x2a
    3aa4:	d109      	bne.n	3aba <_vsnprintf+0xda>
      const int w = va_arg(va, int);
    3aa6:	f85b 3b04 	ldr.w	r3, [fp], #4
      if (w < 0) {
    3aaa:	2b00      	cmp	r3, #0
        width = (unsigned int)-w;
    3aac:	bfbc      	itt	lt
    3aae:	425b      	neglt	r3, r3
        flags |= FLAGS_LEFT;    // reverse padding
    3ab0:	f045 0502 	orrlt.w	r5, r5, #2
        width = (unsigned int)w;
    3ab4:	930d      	str	r3, [sp, #52]	; 0x34
      const int w = va_arg(va, int);
    3ab6:	4692      	mov	sl, r2
    3ab8:	e7e1      	b.n	3a7e <_vsnprintf+0x9e>
    width = 0U;
    3aba:	2300      	movs	r3, #0
    3abc:	930d      	str	r3, [sp, #52]	; 0x34
    3abe:	e7de      	b.n	3a7e <_vsnprintf+0x9e>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    3ac0:	fb01 0206 	mla	r2, r1, r6, r0
    3ac4:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
    3ac8:	469a      	mov	sl, r3
  while (_is_digit(**str)) {
    3aca:	4653      	mov	r3, sl
    3acc:	f813 0b01 	ldrb.w	r0, [r3], #1
    3ad0:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    3ad4:	2a09      	cmp	r2, #9
    3ad6:	d9f3      	bls.n	3ac0 <_vsnprintf+0xe0>
    switch (*format) {
    3ad8:	4653      	mov	r3, sl
    3ada:	f813 2b01 	ldrb.w	r2, [r3], #1
    3ade:	2a6c      	cmp	r2, #108	; 0x6c
    3ae0:	d023      	beq.n	3b2a <_vsnprintf+0x14a>
    3ae2:	d81b      	bhi.n	3b1c <_vsnprintf+0x13c>
    3ae4:	2a68      	cmp	r2, #104	; 0x68
    3ae6:	d029      	beq.n	3b3c <_vsnprintf+0x15c>
    3ae8:	2a6a      	cmp	r2, #106	; 0x6a
    3aea:	d031      	beq.n	3b50 <_vsnprintf+0x170>
    3aec:	4653      	mov	r3, sl
    switch (*format) {
    3aee:	469a      	mov	sl, r3
    3af0:	f81a 0b01 	ldrb.w	r0, [sl], #1
    3af4:	2866      	cmp	r0, #102	; 0x66
    3af6:	d036      	beq.n	3b66 <_vsnprintf+0x186>
    3af8:	f200 80c4 	bhi.w	3c84 <_vsnprintf+0x2a4>
    3afc:	2858      	cmp	r0, #88	; 0x58
    3afe:	d12a      	bne.n	3b56 <_vsnprintf+0x176>
          flags |= FLAGS_UPPERCASE;
    3b00:	f045 0520 	orr.w	r5, r5, #32
          base = 16U;
    3b04:	2310      	movs	r3, #16
    3b06:	e0c7      	b.n	3c98 <_vsnprintf+0x2b8>
      else if (*format == '*') {
    3b08:	2a2a      	cmp	r2, #42	; 0x2a
    3b0a:	d104      	bne.n	3b16 <_vsnprintf+0x136>
        precision = (unsigned int)va_arg(va, int);
    3b0c:	f85b 6b04 	ldr.w	r6, [fp], #4
        format++;
    3b10:	f10a 0a02 	add.w	sl, sl, #2
    3b14:	e7e0      	b.n	3ad8 <_vsnprintf+0xf8>
      format++;
    3b16:	469a      	mov	sl, r3
    precision = 0U;
    3b18:	2600      	movs	r6, #0
    3b1a:	e7dd      	b.n	3ad8 <_vsnprintf+0xf8>
    switch (*format) {
    3b1c:	2a74      	cmp	r2, #116	; 0x74
    3b1e:	d001      	beq.n	3b24 <_vsnprintf+0x144>
    3b20:	2a7a      	cmp	r2, #122	; 0x7a
    3b22:	d1e3      	bne.n	3aec <_vsnprintf+0x10c>
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    3b24:	f445 7580 	orr.w	r5, r5, #256	; 0x100
        break;
    3b28:	e7e1      	b.n	3aee <_vsnprintf+0x10e>
        if (*format == 'l') {
    3b2a:	f89a 2001 	ldrb.w	r2, [sl, #1]
    3b2e:	2a6c      	cmp	r2, #108	; 0x6c
    3b30:	d1f8      	bne.n	3b24 <_vsnprintf+0x144>
          flags |= FLAGS_LONG_LONG;
    3b32:	f445 7540 	orr.w	r5, r5, #768	; 0x300
          format++;
    3b36:	f10a 0302 	add.w	r3, sl, #2
    3b3a:	e7d8      	b.n	3aee <_vsnprintf+0x10e>
        if (*format == 'h') {
    3b3c:	f89a 2001 	ldrb.w	r2, [sl, #1]
    3b40:	2a68      	cmp	r2, #104	; 0x68
    3b42:	d002      	beq.n	3b4a <_vsnprintf+0x16a>
        flags |= FLAGS_SHORT;
    3b44:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    3b48:	e7d1      	b.n	3aee <_vsnprintf+0x10e>
          flags |= FLAGS_CHAR;
    3b4a:	f045 05c0 	orr.w	r5, r5, #192	; 0xc0
    3b4e:	e7f2      	b.n	3b36 <_vsnprintf+0x156>
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    3b50:	f445 7500 	orr.w	r5, r5, #512	; 0x200
        break;
    3b54:	e7cb      	b.n	3aee <_vsnprintf+0x10e>
    switch (*format) {
    3b56:	f200 8086 	bhi.w	3c66 <_vsnprintf+0x286>
    3b5a:	2825      	cmp	r0, #37	; 0x25
    3b5c:	f43f af53 	beq.w	3a06 <_vsnprintf+0x26>
    3b60:	2846      	cmp	r0, #70	; 0x46
    3b62:	f47f af50 	bne.w	3a06 <_vsnprintf+0x26>
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    3b66:	f10b 0b07 	add.w	fp, fp, #7
    3b6a:	f02b 0b07 	bic.w	fp, fp, #7
    3b6e:	ecbb 7b02 	vldmia	fp!, {d7}
  if (value < 0) {
    3b72:	2200      	movs	r2, #0
    3b74:	2300      	movs	r3, #0
    3b76:	ec51 0b17 	vmov	r0, r1, d7
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    3b7a:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
  if (value < 0) {
    3b7e:	f7fc ff15 	bl	9ac <__aeabi_dcmplt>
    3b82:	2800      	cmp	r0, #0
    3b84:	f000 810b 	beq.w	3d9e <_vsnprintf+0x3be>
    value = 0 - value;
    3b88:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    3b8c:	2000      	movs	r0, #0
    3b8e:	2100      	movs	r1, #0
    3b90:	f7fc fae2 	bl	158 <__aeabi_dsub>
    3b94:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    negative = true;
    3b98:	2301      	movs	r3, #1
    3b9a:	9311      	str	r3, [sp, #68]	; 0x44
  if (!(flags & FLAGS_PRECISION)) {
    3b9c:	056a      	lsls	r2, r5, #21
    3b9e:	f140 8100 	bpl.w	3da2 <_vsnprintf+0x3c2>
  if (prec > 9U) {
    3ba2:	2e09      	cmp	r6, #9
    3ba4:	bf28      	it	cs
    3ba6:	2609      	movcs	r6, #9
    3ba8:	9610      	str	r6, [sp, #64]	; 0x40
  int whole = (int)value;
    3baa:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    3bae:	f7fc ff25 	bl	9fc <__aeabi_d2iz>
  double tmp = (value - whole) * pow10[prec];
    3bb2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    3bb4:	4b45      	ldr	r3, [pc, #276]	; (3ccc <_vsnprintf+0x2ec>)
    3bb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    3bba:	ed93 7b00 	vldr	d7, [r3]
  int whole = (int)value;
    3bbe:	4606      	mov	r6, r0
  double tmp = (value - whole) * pow10[prec];
    3bc0:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
    3bc4:	f7fc fc16 	bl	3f4 <__aeabi_i2d>
    3bc8:	4602      	mov	r2, r0
    3bca:	460b      	mov	r3, r1
    3bcc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    3bd0:	f7fc fac2 	bl	158 <__aeabi_dsub>
    3bd4:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    3bd8:	f7fc fc76 	bl	4c8 <__aeabi_dmul>
    3bdc:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
  unsigned long frac = (unsigned long)tmp;
    3be0:	f7fc ff34 	bl	a4c <__aeabi_d2uiz>
    3be4:	4607      	mov	r7, r0
  diff = tmp - frac;
    3be6:	f7fc fbf5 	bl	3d4 <__aeabi_ui2d>
    3bea:	4602      	mov	r2, r0
    3bec:	460b      	mov	r3, r1
    3bee:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    3bf2:	f7fc fab1 	bl	158 <__aeabi_dsub>
  if (diff > 0.5) {
    3bf6:	2200      	movs	r2, #0
    3bf8:	4b35      	ldr	r3, [pc, #212]	; (3cd0 <_vsnprintf+0x2f0>)
  diff = tmp - frac;
    3bfa:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
  if (diff > 0.5) {
    3bfe:	f7fc fef3 	bl	9e8 <__aeabi_dcmpgt>
    3c02:	2800      	cmp	r0, #0
    3c04:	f000 80d0 	beq.w	3da8 <_vsnprintf+0x3c8>
    ++frac;
    3c08:	3701      	adds	r7, #1
    if (frac >= pow10[prec]) {
    3c0a:	4638      	mov	r0, r7
    3c0c:	f7fc fbe2 	bl	3d4 <__aeabi_ui2d>
    3c10:	4602      	mov	r2, r0
    3c12:	460b      	mov	r3, r1
    3c14:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    3c18:	f7fc fed2 	bl	9c0 <__aeabi_dcmple>
    3c1c:	b108      	cbz	r0, 3c22 <_vsnprintf+0x242>
      ++whole;
    3c1e:	3601      	adds	r6, #1
      frac = 0;
    3c20:	2700      	movs	r7, #0
  if (value > thres_max) {
    3c22:	a327      	add	r3, pc, #156	; (adr r3, 3cc0 <_vsnprintf+0x2e0>)
    3c24:	e9d3 2300 	ldrd	r2, r3, [r3]
    3c28:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    3c2c:	f7fc fedc 	bl	9e8 <__aeabi_dcmpgt>
    3c30:	2800      	cmp	r0, #0
    3c32:	f47f aee2 	bne.w	39fa <_vsnprintf+0x1a>
  if (prec == 0U) {
    3c36:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3c38:	2b00      	cmp	r3, #0
    3c3a:	f040 80d4 	bne.w	3de6 <_vsnprintf+0x406>
    diff = value - (double)whole;
    3c3e:	4630      	mov	r0, r6
    3c40:	f7fc fbd8 	bl	3f4 <__aeabi_i2d>
    3c44:	4602      	mov	r2, r0
    3c46:	460b      	mov	r3, r1
    3c48:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    3c4c:	f7fc fa84 	bl	158 <__aeabi_dsub>
    if (diff > 0.5) {
    3c50:	2200      	movs	r2, #0
    3c52:	4b1f      	ldr	r3, [pc, #124]	; (3cd0 <_vsnprintf+0x2f0>)
    diff = value - (double)whole;
    3c54:	4607      	mov	r7, r0
    3c56:	4688      	mov	r8, r1
    if (diff > 0.5) {
    3c58:	f7fc fec6 	bl	9e8 <__aeabi_dcmpgt>
    3c5c:	2800      	cmp	r0, #0
    3c5e:	f000 80b2 	beq.w	3dc6 <_vsnprintf+0x3e6>
      ++whole;
    3c62:	3601      	adds	r6, #1
    3c64:	e0b9      	b.n	3dda <_vsnprintf+0x3fa>
    switch (*format) {
    3c66:	2863      	cmp	r0, #99	; 0x63
    3c68:	f000 8160 	beq.w	3f2c <_vsnprintf+0x54c>
    3c6c:	2864      	cmp	r0, #100	; 0x64
    3c6e:	d002      	beq.n	3c76 <_vsnprintf+0x296>
    3c70:	2862      	cmp	r0, #98	; 0x62
    3c72:	f47f aec8 	bne.w	3a06 <_vsnprintf+0x26>
        else if (*format == 'b') {
    3c76:	2862      	cmp	r0, #98	; 0x62
    3c78:	f025 0510 	bic.w	r5, r5, #16
    3c7c:	f040 81da 	bne.w	4034 <_vsnprintf+0x654>
          base =  2U;
    3c80:	2302      	movs	r3, #2
        if ((*format != 'i') && (*format != 'd')) {
    3c82:	e009      	b.n	3c98 <_vsnprintf+0x2b8>
    switch (*format) {
    3c84:	2870      	cmp	r0, #112	; 0x70
    3c86:	f000 81b2 	beq.w	3fee <_vsnprintf+0x60e>
    3c8a:	d823      	bhi.n	3cd4 <_vsnprintf+0x2f4>
    3c8c:	2869      	cmp	r0, #105	; 0x69
    3c8e:	d0f2      	beq.n	3c76 <_vsnprintf+0x296>
    3c90:	286f      	cmp	r0, #111	; 0x6f
    3c92:	f47f aeb8 	bne.w	3a06 <_vsnprintf+0x26>
          base =  8U;
    3c96:	2308      	movs	r3, #8
          if (flags & FLAGS_LONG_LONG) {
    3c98:	f415 7200 	ands.w	r2, r5, #512	; 0x200
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    3c9c:	f025 010c 	bic.w	r1, r5, #12
          if (flags & FLAGS_LONG_LONG) {
    3ca0:	d05d      	beq.n	3d5e <_vsnprintf+0x37e>
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
    3ca2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3ca4:	9108      	str	r1, [sp, #32]
    3ca6:	e9cd 6206 	strd	r6, r2, [sp, #24]
    3caa:	2200      	movs	r2, #0
    3cac:	e9cd 3204 	strd	r3, r2, [sp, #16]
    3cb0:	f10b 0b07 	add.w	fp, fp, #7
    3cb4:	f02b 0707 	bic.w	r7, fp, #7
    3cb8:	9202      	str	r2, [sp, #8]
    3cba:	e8f7 2302 	ldrd	r2, r3, [r7], #8
    3cbe:	e1df      	b.n	4080 <_vsnprintf+0x6a0>
    3cc0:	ffc00000 	.word	0xffc00000
    3cc4:	41dfffff 	.word	0x41dfffff
    3cc8:	0000376d 	.word	0x0000376d
    3ccc:	00005268 	.word	0x00005268
    3cd0:	3fe00000 	.word	0x3fe00000
    switch (*format) {
    3cd4:	2875      	cmp	r0, #117	; 0x75
    3cd6:	d0ce      	beq.n	3c76 <_vsnprintf+0x296>
    3cd8:	2878      	cmp	r0, #120	; 0x78
    3cda:	f43f af13 	beq.w	3b04 <_vsnprintf+0x124>
    3cde:	2873      	cmp	r0, #115	; 0x73
    3ce0:	f47f ae91 	bne.w	3a06 <_vsnprintf+0x26>
        char* p = va_arg(va, char*);
    3ce4:	f85b 7b04 	ldr.w	r7, [fp], #4
    3ce8:	463b      	mov	r3, r7
    3cea:	4698      	mov	r8, r3
    3cec:	3301      	adds	r3, #1
  for (s = str; *s; ++s);
    3cee:	f898 2000 	ldrb.w	r2, [r8]
    3cf2:	2a00      	cmp	r2, #0
    3cf4:	d1f9      	bne.n	3cea <_vsnprintf+0x30a>
        if (flags & FLAGS_PRECISION) {
    3cf6:	f415 6380 	ands.w	r3, r5, #1024	; 0x400
  return (unsigned int)(s - str);
    3cfa:	eba8 0807 	sub.w	r8, r8, r7
        if (flags & FLAGS_PRECISION) {
    3cfe:	9310      	str	r3, [sp, #64]	; 0x40
    3d00:	d002      	beq.n	3d08 <_vsnprintf+0x328>
          l = (l < precision ? l : precision);
    3d02:	45b0      	cmp	r8, r6
    3d04:	bf28      	it	cs
    3d06:	46b0      	movcs	r8, r6
        if (!(flags & FLAGS_LEFT)) {
    3d08:	f015 0302 	ands.w	r3, r5, #2
    3d0c:	930e      	str	r3, [sp, #56]	; 0x38
    3d0e:	f000 8147 	beq.w	3fa0 <_vsnprintf+0x5c0>
    3d12:	4622      	mov	r2, r4
    3d14:	1bd4      	subs	r4, r2, r7
    3d16:	e14b      	b.n	3fb0 <_vsnprintf+0x5d0>
          else if (flags & FLAGS_LONG) {
    3d18:	05e8      	lsls	r0, r5, #23
    3d1a:	f10b 0704 	add.w	r7, fp, #4
    3d1e:	d513      	bpl.n	3d48 <_vsnprintf+0x368>
            const long value = va_arg(va, long);
    3d20:	f8db 3000 	ldr.w	r3, [fp]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    3d24:	990d      	ldr	r1, [sp, #52]	; 0x34
    3d26:	9202      	str	r2, [sp, #8]
    3d28:	e9cd 6103 	strd	r6, r1, [sp, #12]
    3d2c:	0fda      	lsrs	r2, r3, #31
    3d2e:	2b00      	cmp	r3, #0
    3d30:	9505      	str	r5, [sp, #20]
    3d32:	9201      	str	r2, [sp, #4]
    3d34:	bfb8      	it	lt
    3d36:	425b      	neglt	r3, r3
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    3d38:	9300      	str	r3, [sp, #0]
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    3d3a:	464b      	mov	r3, r9
    3d3c:	4622      	mov	r2, r4
    3d3e:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	; 0x2c
    3d42:	f7ff fdb9 	bl	38b8 <_ntoa_long>
    3d46:	e1a3      	b.n	4090 <_vsnprintf+0x6b0>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    3d48:	f015 0f40 	tst.w	r5, #64	; 0x40
    3d4c:	f8db 3000 	ldr.w	r3, [fp]
    3d50:	d001      	beq.n	3d56 <_vsnprintf+0x376>
    3d52:	b2db      	uxtb	r3, r3
    3d54:	e7e6      	b.n	3d24 <_vsnprintf+0x344>
    3d56:	0629      	lsls	r1, r5, #24
    3d58:	bf48      	it	mi
    3d5a:	b21b      	sxthmi	r3, r3
    3d5c:	e7e2      	b.n	3d24 <_vsnprintf+0x344>
          else if (flags & FLAGS_LONG) {
    3d5e:	05e8      	lsls	r0, r5, #23
    3d60:	f10b 0704 	add.w	r7, fp, #4
    3d64:	d508      	bpl.n	3d78 <_vsnprintf+0x398>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    3d66:	9105      	str	r1, [sp, #20]
    3d68:	990d      	ldr	r1, [sp, #52]	; 0x34
    3d6a:	e9cd 2301 	strd	r2, r3, [sp, #4]
    3d6e:	e9cd 6103 	strd	r6, r1, [sp, #12]
    3d72:	f8db 3000 	ldr.w	r3, [fp]
    3d76:	e7df      	b.n	3d38 <_vsnprintf+0x358>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    3d78:	f015 0f40 	tst.w	r5, #64	; 0x40
    3d7c:	f8db 2000 	ldr.w	r2, [fp]
    3d80:	d009      	beq.n	3d96 <_vsnprintf+0x3b6>
    3d82:	b2d2      	uxtb	r2, r2
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    3d84:	9105      	str	r1, [sp, #20]
    3d86:	990d      	ldr	r1, [sp, #52]	; 0x34
    3d88:	9302      	str	r3, [sp, #8]
    3d8a:	2300      	movs	r3, #0
    3d8c:	e9cd 6103 	strd	r6, r1, [sp, #12]
    3d90:	e9cd 2300 	strd	r2, r3, [sp]
    3d94:	e7d1      	b.n	3d3a <_vsnprintf+0x35a>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    3d96:	0628      	lsls	r0, r5, #24
    3d98:	bf48      	it	mi
    3d9a:	b292      	uxthmi	r2, r2
    3d9c:	e7f2      	b.n	3d84 <_vsnprintf+0x3a4>
  bool negative = false;
    3d9e:	9011      	str	r0, [sp, #68]	; 0x44
    3da0:	e6fc      	b.n	3b9c <_vsnprintf+0x1bc>
    prec = 6U;  // by default, precesion is 6
    3da2:	2306      	movs	r3, #6
    3da4:	9310      	str	r3, [sp, #64]	; 0x40
    3da6:	e700      	b.n	3baa <_vsnprintf+0x1ca>
  else if ((diff == 0.5) && ((frac == 0U) || (frac & 1U))) {
    3da8:	2200      	movs	r2, #0
    3daa:	4ba1      	ldr	r3, [pc, #644]	; (4030 <_vsnprintf+0x650>)
    3dac:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    3db0:	f7fc fdf2 	bl	998 <__aeabi_dcmpeq>
    3db4:	2800      	cmp	r0, #0
    3db6:	f43f af34 	beq.w	3c22 <_vsnprintf+0x242>
    3dba:	b117      	cbz	r7, 3dc2 <_vsnprintf+0x3e2>
    3dbc:	07fb      	lsls	r3, r7, #31
    3dbe:	f57f af30 	bpl.w	3c22 <_vsnprintf+0x242>
    ++frac;
    3dc2:	3701      	adds	r7, #1
    3dc4:	e72d      	b.n	3c22 <_vsnprintf+0x242>
    else if ((diff == 0.5) && (whole & 1)) {
    3dc6:	2200      	movs	r2, #0
    3dc8:	4b99      	ldr	r3, [pc, #612]	; (4030 <_vsnprintf+0x650>)
    3dca:	4638      	mov	r0, r7
    3dcc:	4641      	mov	r1, r8
    3dce:	f7fc fde3 	bl	998 <__aeabi_dcmpeq>
    3dd2:	b110      	cbz	r0, 3dda <_vsnprintf+0x3fa>
    3dd4:	07f7      	lsls	r7, r6, #31
    3dd6:	f53f af44 	bmi.w	3c62 <_vsnprintf+0x282>
    3dda:	9a10      	ldr	r2, [sp, #64]	; 0x40
    3ddc:	ab16      	add	r3, sp, #88	; 0x58
    3dde:	4413      	add	r3, r2
      buf[len++] = '.';
    3de0:	4690      	mov	r8, r2
    buf[len++] = (char)(48 + (whole % 10));
    3de2:	220a      	movs	r2, #10
    3de4:	e05c      	b.n	3ea0 <_vsnprintf+0x4c0>
    3de6:	aa16      	add	r2, sp, #88	; 0x58
  if (prec == 0U) {
    3de8:	f04f 0801 	mov.w	r8, #1
      buf[len++] = (char)(48U + (frac % 10U));
    3dec:	200a      	movs	r0, #10
    3dee:	fbb7 f1f0 	udiv	r1, r7, r0
    3df2:	fb00 7311 	mls	r3, r0, r1, r7
    3df6:	3330      	adds	r3, #48	; 0x30
    } while ((len < PRINTF_FTOA_BUFFER_SIZE) && (frac /= 10U));
    3df8:	f1b8 0f20 	cmp.w	r8, #32
      buf[len++] = (char)(48U + (frac % 10U));
    3dfc:	f802 3b01 	strb.w	r3, [r2], #1
    } while ((len < PRINTF_FTOA_BUFFER_SIZE) && (frac /= 10U));
    3e00:	d01d      	beq.n	3e3e <_vsnprintf+0x45e>
    3e02:	2f09      	cmp	r7, #9
    3e04:	f108 0301 	add.w	r3, r8, #1
    3e08:	d811      	bhi.n	3e2e <_vsnprintf+0x44e>
    3e0a:	4643      	mov	r3, r8
      buf[len++] = '0';
    3e0c:	aa16      	add	r2, sp, #88	; 0x58
    3e0e:	2130      	movs	r1, #48	; 0x30
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    3e10:	9810      	ldr	r0, [sp, #64]	; 0x40
    3e12:	4283      	cmp	r3, r0
    3e14:	f108 0801 	add.w	r8, r8, #1
    3e18:	d10c      	bne.n	3e34 <_vsnprintf+0x454>
      buf[len++] = '.';
    3e1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3e1c:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
    3e20:	aa1e      	add	r2, sp, #120	; 0x78
    3e22:	4413      	add	r3, r2
    3e24:	461a      	mov	r2, r3
    3e26:	232e      	movs	r3, #46	; 0x2e
    3e28:	f802 3c20 	strb.w	r3, [r2, #-32]
    3e2c:	e7d5      	b.n	3dda <_vsnprintf+0x3fa>
    } while ((len < PRINTF_FTOA_BUFFER_SIZE) && (frac /= 10U));
    3e2e:	4698      	mov	r8, r3
    3e30:	460f      	mov	r7, r1
    3e32:	e7dc      	b.n	3dee <_vsnprintf+0x40e>
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    3e34:	f1b8 0f1f 	cmp.w	r8, #31
      buf[len++] = '0';
    3e38:	5499      	strb	r1, [r3, r2]
    3e3a:	4643      	mov	r3, r8
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    3e3c:	d9e8      	bls.n	3e10 <_vsnprintf+0x430>
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    3e3e:	f005 0303 	and.w	r3, r5, #3
    3e42:	2b01      	cmp	r3, #1
    buf[len++] = '0';
    3e44:	aa16      	add	r2, sp, #88	; 0x58
    3e46:	f04f 0130 	mov.w	r1, #48	; 0x30
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    3e4a:	d031      	beq.n	3eb0 <_vsnprintf+0x4d0>
  if ((len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    3e4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3e4e:	4590      	cmp	r8, r2
    3e50:	d107      	bne.n	3e62 <_vsnprintf+0x482>
    3e52:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3e54:	b91a      	cbnz	r2, 3e5e <_vsnprintf+0x47e>
    3e56:	f015 0f0c 	tst.w	r5, #12
    3e5a:	f000 80dd 	beq.w	4018 <_vsnprintf+0x638>
    len--;
    3e5e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
    3e62:	f1b8 0f1f 	cmp.w	r8, #31
    3e66:	d80a      	bhi.n	3e7e <_vsnprintf+0x49e>
    if (negative) {
    3e68:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3e6a:	2a00      	cmp	r2, #0
    3e6c:	f000 80d8 	beq.w	4020 <_vsnprintf+0x640>
      buf[len++] = '-';
    3e70:	aa1e      	add	r2, sp, #120	; 0x78
    3e72:	4442      	add	r2, r8
    3e74:	212d      	movs	r1, #45	; 0x2d
      buf[len++] = ' ';
    3e76:	f802 1c20 	strb.w	r1, [r2, #-32]
    3e7a:	f108 0801 	add.w	r8, r8, #1
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    3e7e:	b9eb      	cbnz	r3, 3ebc <_vsnprintf+0x4dc>
    3e80:	4622      	mov	r2, r4
    for (size_t i = len; i < width; i++) {
    3e82:	eba8 0604 	sub.w	r6, r8, r4
    3e86:	e02b      	b.n	3ee0 <_vsnprintf+0x500>
    buf[len++] = (char)(48 + (whole % 10));
    3e88:	fb96 f1f2 	sdiv	r1, r6, r2
    3e8c:	fb02 6611 	mls	r6, r2, r1, r6
    3e90:	3630      	adds	r6, #48	; 0x30
    3e92:	f803 6b01 	strb.w	r6, [r3], #1
    3e96:	f108 0801 	add.w	r8, r8, #1
    if (!(whole /= 10)) {
    3e9a:	460e      	mov	r6, r1
    3e9c:	2900      	cmp	r1, #0
    3e9e:	d0ce      	beq.n	3e3e <_vsnprintf+0x45e>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    3ea0:	f1b8 0f20 	cmp.w	r8, #32
    3ea4:	d1f0      	bne.n	3e88 <_vsnprintf+0x4a8>
    3ea6:	e7ca      	b.n	3e3e <_vsnprintf+0x45e>
    buf[len++] = '0';
    3ea8:	f808 1002 	strb.w	r1, [r8, r2]
    3eac:	f108 0801 	add.w	r8, r8, #1
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    3eb0:	980d      	ldr	r0, [sp, #52]	; 0x34
    3eb2:	4580      	cmp	r8, r0
    3eb4:	d2ca      	bcs.n	3e4c <_vsnprintf+0x46c>
    3eb6:	f1b8 0f1f 	cmp.w	r8, #31
    3eba:	d9f5      	bls.n	3ea8 <_vsnprintf+0x4c8>
    3ebc:	ab16      	add	r3, sp, #88	; 0x58
    3ebe:	4443      	add	r3, r8
    3ec0:	9310      	str	r3, [sp, #64]	; 0x40
    for (size_t i = len; i < width; i++) {
    3ec2:	2700      	movs	r7, #0
    3ec4:	e019      	b.n	3efa <_vsnprintf+0x51a>
    else if (flags & FLAGS_SPACE) {
    3ec6:	0728      	lsls	r0, r5, #28
    3ec8:	d5d9      	bpl.n	3e7e <_vsnprintf+0x49e>
      buf[len++] = ' ';
    3eca:	aa1e      	add	r2, sp, #120	; 0x78
    3ecc:	4442      	add	r2, r8
    3ece:	2120      	movs	r1, #32
    3ed0:	e7d1      	b.n	3e76 <_vsnprintf+0x496>
      out(' ', buffer, idx++, maxlen);
    3ed2:	1c57      	adds	r7, r2, #1
    3ed4:	464b      	mov	r3, r9
    3ed6:	990c      	ldr	r1, [sp, #48]	; 0x30
    3ed8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    3eda:	2020      	movs	r0, #32
    3edc:	47a0      	blx	r4
    3ede:	463a      	mov	r2, r7
    for (size_t i = len; i < width; i++) {
    3ee0:	990d      	ldr	r1, [sp, #52]	; 0x34
    3ee2:	18b3      	adds	r3, r6, r2
    3ee4:	4299      	cmp	r1, r3
    3ee6:	d8f4      	bhi.n	3ed2 <_vsnprintf+0x4f2>
    3ee8:	4614      	mov	r4, r2
    3eea:	e7e7      	b.n	3ebc <_vsnprintf+0x4dc>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
    3eec:	9810      	ldr	r0, [sp, #64]	; 0x40
    3eee:	990c      	ldr	r1, [sp, #48]	; 0x30
    3ef0:	7800      	ldrb	r0, [r0, #0]
    3ef2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    3ef4:	464b      	mov	r3, r9
    3ef6:	47b0      	blx	r6
  for (size_t i = 0U; i < len; i++) {
    3ef8:	3701      	adds	r7, #1
    3efa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3efc:	4547      	cmp	r7, r8
    3efe:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    3f02:	eb07 0204 	add.w	r2, r7, r4
    3f06:	9310      	str	r3, [sp, #64]	; 0x40
    3f08:	d1f0      	bne.n	3eec <_vsnprintf+0x50c>
  if (flags & FLAGS_LEFT) {
    3f0a:	07a9      	lsls	r1, r5, #30
    3f0c:	4614      	mov	r4, r2
    3f0e:	f140 80c1 	bpl.w	4094 <_vsnprintf+0x6b4>
    while (idx < width) {
    3f12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3f14:	42a3      	cmp	r3, r4
    3f16:	f240 80bd 	bls.w	4094 <_vsnprintf+0x6b4>
      out(' ', buffer, idx++, maxlen);
    3f1a:	1c65      	adds	r5, r4, #1
    3f1c:	4622      	mov	r2, r4
    3f1e:	464b      	mov	r3, r9
    3f20:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    3f22:	990c      	ldr	r1, [sp, #48]	; 0x30
    3f24:	2020      	movs	r0, #32
    3f26:	47a0      	blx	r4
    3f28:	462c      	mov	r4, r5
    3f2a:	e7f2      	b.n	3f12 <_vsnprintf+0x532>
        if (!(flags & FLAGS_LEFT)) {
    3f2c:	f015 0502 	ands.w	r5, r5, #2
    3f30:	d026      	beq.n	3f80 <_vsnprintf+0x5a0>
    3f32:	4622      	mov	r2, r4
        unsigned int l = 1U;
    3f34:	2701      	movs	r7, #1
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    3f36:	f85b 0b04 	ldr.w	r0, [fp], #4
    3f3a:	990c      	ldr	r1, [sp, #48]	; 0x30
    3f3c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    3f3e:	464b      	mov	r3, r9
    3f40:	b2c0      	uxtb	r0, r0
    3f42:	1c54      	adds	r4, r2, #1
    3f44:	47b0      	blx	r6
        if (flags & FLAGS_LEFT) {
    3f46:	2d00      	cmp	r5, #0
    3f48:	f000 80a4 	beq.w	4094 <_vsnprintf+0x6b4>
          while (l++ < width) {
    3f4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3f4e:	42bb      	cmp	r3, r7
    3f50:	f240 80a0 	bls.w	4094 <_vsnprintf+0x6b4>
            out(' ', buffer, idx++, maxlen);
    3f54:	1c65      	adds	r5, r4, #1
    3f56:	4622      	mov	r2, r4
    3f58:	464b      	mov	r3, r9
    3f5a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    3f5c:	990c      	ldr	r1, [sp, #48]	; 0x30
    3f5e:	2020      	movs	r0, #32
    3f60:	47a0      	blx	r4
    3f62:	3701      	adds	r7, #1
    3f64:	462c      	mov	r4, r5
    3f66:	e7f1      	b.n	3f4c <_vsnprintf+0x56c>
            out(' ', buffer, idx++, maxlen);
    3f68:	464b      	mov	r3, r9
    3f6a:	990c      	ldr	r1, [sp, #48]	; 0x30
    3f6c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3f6e:	2020      	movs	r0, #32
    3f70:	47b8      	blx	r7
          while (l++ < width) {
    3f72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3f74:	1932      	adds	r2, r6, r4
    3f76:	1cb7      	adds	r7, r6, #2
    3f78:	3601      	adds	r6, #1
    3f7a:	42b3      	cmp	r3, r6
    3f7c:	d8f4      	bhi.n	3f68 <_vsnprintf+0x588>
    3f7e:	e7da      	b.n	3f36 <_vsnprintf+0x556>
    3f80:	462e      	mov	r6, r5
    3f82:	e7f6      	b.n	3f72 <_vsnprintf+0x592>
            out(' ', buffer, idx++, maxlen);
    3f84:	464b      	mov	r3, r9
    3f86:	990c      	ldr	r1, [sp, #48]	; 0x30
    3f88:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3f8a:	2020      	movs	r0, #32
    3f8c:	47a8      	blx	r5
          while (l++ < width) {
    3f8e:	4643      	mov	r3, r8
    3f90:	990d      	ldr	r1, [sp, #52]	; 0x34
    3f92:	4299      	cmp	r1, r3
    3f94:	eb04 0203 	add.w	r2, r4, r3
    3f98:	f103 0801 	add.w	r8, r3, #1
    3f9c:	d8f2      	bhi.n	3f84 <_vsnprintf+0x5a4>
    3f9e:	e6b9      	b.n	3d14 <_vsnprintf+0x334>
    3fa0:	4643      	mov	r3, r8
    3fa2:	1ae4      	subs	r4, r4, r3
    3fa4:	e7f4      	b.n	3f90 <_vsnprintf+0x5b0>
    3fa6:	461e      	mov	r6, r3
          out(*(p++), buffer, idx++, maxlen);
    3fa8:	464b      	mov	r3, r9
    3faa:	e9dd 510b 	ldrd	r5, r1, [sp, #44]	; 0x2c
    3fae:	47a8      	blx	r5
    3fb0:	19e2      	adds	r2, r4, r7
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    3fb2:	f817 0b01 	ldrb.w	r0, [r7], #1
    3fb6:	b128      	cbz	r0, 3fc4 <_vsnprintf+0x5e4>
    3fb8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3fba:	2b00      	cmp	r3, #0
    3fbc:	d0f4      	beq.n	3fa8 <_vsnprintf+0x5c8>
    3fbe:	1e73      	subs	r3, r6, #1
    3fc0:	2e00      	cmp	r6, #0
    3fc2:	d1f0      	bne.n	3fa6 <_vsnprintf+0x5c6>
        if (flags & FLAGS_LEFT) {
    3fc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3fc6:	4614      	mov	r4, r2
    3fc8:	2b00      	cmp	r3, #0
    3fca:	d063      	beq.n	4094 <_vsnprintf+0x6b4>
    3fcc:	eba8 0802 	sub.w	r8, r8, r2
    3fd0:	e007      	b.n	3fe2 <_vsnprintf+0x602>
            out(' ', buffer, idx++, maxlen);
    3fd2:	1c65      	adds	r5, r4, #1
    3fd4:	4622      	mov	r2, r4
    3fd6:	464b      	mov	r3, r9
    3fd8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    3fda:	990c      	ldr	r1, [sp, #48]	; 0x30
    3fdc:	2020      	movs	r0, #32
    3fde:	47a0      	blx	r4
    3fe0:	462c      	mov	r4, r5
          while (l++ < width) {
    3fe2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3fe4:	eb08 0304 	add.w	r3, r8, r4
    3fe8:	4293      	cmp	r3, r2
    3fea:	d3f2      	bcc.n	3fd2 <_vsnprintf+0x5f2>
    3fec:	e052      	b.n	4094 <_vsnprintf+0x6b4>
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    3fee:	2308      	movs	r3, #8
    3ff0:	e9cd 6303 	strd	r6, r3, [sp, #12]
    3ff4:	2210      	movs	r2, #16
    3ff6:	2300      	movs	r3, #0
    3ff8:	e9cd 3201 	strd	r3, r2, [sp, #4]
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
    3ffc:	f045 0521 	orr.w	r5, r5, #33	; 0x21
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    4000:	9505      	str	r5, [sp, #20]
    4002:	f85b 3b04 	ldr.w	r3, [fp], #4
    4006:	9300      	str	r3, [sp, #0]
    4008:	4622      	mov	r2, r4
    400a:	464b      	mov	r3, r9
    400c:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	; 0x2c
    4010:	f7ff fc52 	bl	38b8 <_ntoa_long>
    4014:	4604      	mov	r4, r0
        break;
    4016:	e03d      	b.n	4094 <_vsnprintf+0x6b4>
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
    4018:	f1b8 0f1f 	cmp.w	r8, #31
    401c:	f63f af2f 	bhi.w	3e7e <_vsnprintf+0x49e>
    else if (flags & FLAGS_PLUS) {
    4020:	076e      	lsls	r6, r5, #29
    4022:	f57f af50 	bpl.w	3ec6 <_vsnprintf+0x4e6>
      buf[len++] = '+';  // ignore the space if the '+' exists
    4026:	aa1e      	add	r2, sp, #120	; 0x78
    4028:	4442      	add	r2, r8
    402a:	212b      	movs	r1, #43	; 0x2b
    402c:	e723      	b.n	3e76 <_vsnprintf+0x496>
    402e:	bf00      	nop
    4030:	3fe00000 	.word	0x3fe00000
        if ((*format != 'i') && (*format != 'd')) {
    4034:	2869      	cmp	r0, #105	; 0x69
    4036:	f04f 020a 	mov.w	r2, #10
    403a:	d003      	beq.n	4044 <_vsnprintf+0x664>
    403c:	2864      	cmp	r0, #100	; 0x64
          base = 10U;
    403e:	4613      	mov	r3, r2
        if ((*format != 'i') && (*format != 'd')) {
    4040:	f47f ae2a 	bne.w	3c98 <_vsnprintf+0x2b8>
          if (flags & FLAGS_LONG_LONG) {
    4044:	05af      	lsls	r7, r5, #22
    4046:	f57f ae67 	bpl.w	3d18 <_vsnprintf+0x338>
            const long long value = va_arg(va, long long);
    404a:	f10b 0b07 	add.w	fp, fp, #7
    404e:	f02b 0b07 	bic.w	fp, fp, #7
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    4052:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            const long long value = va_arg(va, long long);
    4054:	f8db 1004 	ldr.w	r1, [fp, #4]
    4058:	465f      	mov	r7, fp
    405a:	f857 0b08 	ldr.w	r0, [r7], #8
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    405e:	9204      	str	r2, [sp, #16]
    4060:	e9cd 6306 	strd	r6, r3, [sp, #24]
    4064:	2300      	movs	r3, #0
    4066:	9305      	str	r3, [sp, #20]
    4068:	0fcb      	lsrs	r3, r1, #31
    406a:	9302      	str	r3, [sp, #8]
    406c:	2800      	cmp	r0, #0
    406e:	460b      	mov	r3, r1
    4070:	f173 0100 	sbcs.w	r1, r3, #0
    4074:	9508      	str	r5, [sp, #32]
    4076:	4602      	mov	r2, r0
    4078:	da02      	bge.n	4080 <_vsnprintf+0x6a0>
    407a:	4242      	negs	r2, r0
    407c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
    4080:	e9cd 2300 	strd	r2, r3, [sp]
    4084:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	; 0x2c
    4088:	464b      	mov	r3, r9
    408a:	4622      	mov	r2, r4
    408c:	f7ff fc56 	bl	393c <_ntoa_long_long>
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    4090:	4604      	mov	r4, r0
        break;
    4092:	46bb      	mov	fp, r7
  while (*format)
    4094:	f89a 0000 	ldrb.w	r0, [sl]
    4098:	2800      	cmp	r0, #0
    409a:	f47f acb0 	bne.w	39fe <_vsnprintf+0x1e>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    409e:	454c      	cmp	r4, r9
    40a0:	bf2c      	ite	cs
    40a2:	f109 32ff 	addcs.w	r2, r9, #4294967295	; 0xffffffff
    40a6:	4622      	movcc	r2, r4
    40a8:	464b      	mov	r3, r9
    40aa:	990c      	ldr	r1, [sp, #48]	; 0x30
    40ac:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    40ae:	2000      	movs	r0, #0
    40b0:	47a8      	blx	r5

  // return written chars without terminating \0
  return (int)idx;
}
    40b2:	4620      	mov	r0, r4
    40b4:	b01f      	add	sp, #124	; 0x7c
    40b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    40ba:	bf00      	nop

000040bc <printf>:

///////////////////////////////////////////////////////////////////////////////


int printf(const char* format, ...)
{
    40bc:	b40f      	push	{r0, r1, r2, r3}
    40be:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    40c0:	aa06      	add	r2, sp, #24
  va_list va;
  va_start(va, format);
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    40c2:	a902      	add	r1, sp, #8
{
    40c4:	f852 3b04 	ldr.w	r3, [r2], #4
  va_start(va, format);
    40c8:	9203      	str	r2, [sp, #12]
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    40ca:	9200      	str	r2, [sp, #0]
    40cc:	4804      	ldr	r0, [pc, #16]	; (40e0 <printf+0x24>)
    40ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    40d2:	f7ff fc85 	bl	39e0 <_vsnprintf>
  va_end(va);
  return ret;
}
    40d6:	b005      	add	sp, #20
    40d8:	f85d eb04 	ldr.w	lr, [sp], #4
    40dc:	b004      	add	sp, #16
    40de:	4770      	bx	lr
    40e0:	000039d5 	.word	0x000039d5

000040e4 <snprintf>:
  return ret;
}


int snprintf(char* buffer, size_t count, const char* format, ...)
{
    40e4:	b40c      	push	{r2, r3}
    40e6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    40e8:	aa06      	add	r2, sp, #24
    40ea:	f852 3b04 	ldr.w	r3, [r2], #4
  va_list va;
  va_start(va, format);
    40ee:	9203      	str	r2, [sp, #12]
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
    40f0:	9200      	str	r2, [sp, #0]
    40f2:	460a      	mov	r2, r1
    40f4:	4601      	mov	r1, r0
    40f6:	4804      	ldr	r0, [pc, #16]	; (4108 <snprintf+0x24>)
    40f8:	f7ff fc72 	bl	39e0 <_vsnprintf>
  va_end(va);
  return ret;
}
    40fc:	b005      	add	sp, #20
    40fe:	f85d eb04 	ldr.w	lr, [sp], #4
    4102:	b002      	add	sp, #8
    4104:	4770      	bx	lr
    4106:	bf00      	nop
    4108:	00003765 	.word	0x00003765

0000410c <roundf>:
    410c:	b082      	sub	sp, #8
    410e:	ed8d 0a01 	vstr	s0, [sp, #4]
    4112:	9901      	ldr	r1, [sp, #4]
    4114:	f3c1 53c7 	ubfx	r3, r1, #23, #8
    4118:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
    411c:	2a16      	cmp	r2, #22
    411e:	dc16      	bgt.n	414e <roundf+0x42>
    4120:	2a00      	cmp	r2, #0
    4122:	db0d      	blt.n	4140 <roundf+0x34>
    4124:	4810      	ldr	r0, [pc, #64]	; (4168 <roundf+0x5c>)
    4126:	4110      	asrs	r0, r2
    4128:	4208      	tst	r0, r1
    412a:	d012      	beq.n	4152 <roundf+0x46>
    412c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    4130:	4113      	asrs	r3, r2
    4132:	440b      	add	r3, r1
    4134:	ea23 0300 	bic.w	r3, r3, r0
    4138:	ee00 3a10 	vmov	s0, r3
    413c:	b002      	add	sp, #8
    413e:	4770      	bx	lr
    4140:	3201      	adds	r2, #1
    4142:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
    4146:	d1f7      	bne.n	4138 <roundf+0x2c>
    4148:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
    414c:	e7f4      	b.n	4138 <roundf+0x2c>
    414e:	2a80      	cmp	r2, #128	; 0x80
    4150:	d003      	beq.n	415a <roundf+0x4e>
    4152:	ed9d 0a01 	vldr	s0, [sp, #4]
    4156:	b002      	add	sp, #8
    4158:	4770      	bx	lr
    415a:	eddd 7a01 	vldr	s15, [sp, #4]
    415e:	ee37 0aa7 	vadd.f32	s0, s15, s15
    4162:	b002      	add	sp, #8
    4164:	4770      	bx	lr
    4166:	bf00      	nop
    4168:	007fffff 	.word	0x007fffff

0000416c <malloc>:
    416c:	4b02      	ldr	r3, [pc, #8]	; (4178 <malloc+0xc>)
    416e:	4601      	mov	r1, r0
    4170:	6818      	ldr	r0, [r3, #0]
    4172:	f000 b859 	b.w	4228 <_malloc_r>
    4176:	bf00      	nop
    4178:	20000014 	.word	0x20000014

0000417c <free>:
    417c:	4b02      	ldr	r3, [pc, #8]	; (4188 <free+0xc>)
    417e:	4601      	mov	r1, r0
    4180:	6818      	ldr	r0, [r3, #0]
    4182:	f000 b803 	b.w	418c <_free_r>
    4186:	bf00      	nop
    4188:	20000014 	.word	0x20000014

0000418c <_free_r>:
    418c:	b538      	push	{r3, r4, r5, lr}
    418e:	4605      	mov	r5, r0
    4190:	2900      	cmp	r1, #0
    4192:	d045      	beq.n	4220 <_free_r+0x94>
    4194:	f851 3c04 	ldr.w	r3, [r1, #-4]
    4198:	1f0c      	subs	r4, r1, #4
    419a:	2b00      	cmp	r3, #0
    419c:	bfb8      	it	lt
    419e:	18e4      	addlt	r4, r4, r3
    41a0:	f000 f8ac 	bl	42fc <__malloc_lock>
    41a4:	4a1f      	ldr	r2, [pc, #124]	; (4224 <_free_r+0x98>)
    41a6:	6813      	ldr	r3, [r2, #0]
    41a8:	4610      	mov	r0, r2
    41aa:	b933      	cbnz	r3, 41ba <_free_r+0x2e>
    41ac:	6063      	str	r3, [r4, #4]
    41ae:	6014      	str	r4, [r2, #0]
    41b0:	4628      	mov	r0, r5
    41b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    41b6:	f000 b8a7 	b.w	4308 <__malloc_unlock>
    41ba:	42a3      	cmp	r3, r4
    41bc:	d90c      	bls.n	41d8 <_free_r+0x4c>
    41be:	6821      	ldr	r1, [r4, #0]
    41c0:	1862      	adds	r2, r4, r1
    41c2:	4293      	cmp	r3, r2
    41c4:	bf04      	itt	eq
    41c6:	681a      	ldreq	r2, [r3, #0]
    41c8:	685b      	ldreq	r3, [r3, #4]
    41ca:	6063      	str	r3, [r4, #4]
    41cc:	bf04      	itt	eq
    41ce:	1852      	addeq	r2, r2, r1
    41d0:	6022      	streq	r2, [r4, #0]
    41d2:	6004      	str	r4, [r0, #0]
    41d4:	e7ec      	b.n	41b0 <_free_r+0x24>
    41d6:	4613      	mov	r3, r2
    41d8:	685a      	ldr	r2, [r3, #4]
    41da:	b10a      	cbz	r2, 41e0 <_free_r+0x54>
    41dc:	42a2      	cmp	r2, r4
    41de:	d9fa      	bls.n	41d6 <_free_r+0x4a>
    41e0:	6819      	ldr	r1, [r3, #0]
    41e2:	1858      	adds	r0, r3, r1
    41e4:	42a0      	cmp	r0, r4
    41e6:	d10b      	bne.n	4200 <_free_r+0x74>
    41e8:	6820      	ldr	r0, [r4, #0]
    41ea:	4401      	add	r1, r0
    41ec:	1858      	adds	r0, r3, r1
    41ee:	4282      	cmp	r2, r0
    41f0:	6019      	str	r1, [r3, #0]
    41f2:	d1dd      	bne.n	41b0 <_free_r+0x24>
    41f4:	6810      	ldr	r0, [r2, #0]
    41f6:	6852      	ldr	r2, [r2, #4]
    41f8:	605a      	str	r2, [r3, #4]
    41fa:	4401      	add	r1, r0
    41fc:	6019      	str	r1, [r3, #0]
    41fe:	e7d7      	b.n	41b0 <_free_r+0x24>
    4200:	d902      	bls.n	4208 <_free_r+0x7c>
    4202:	230c      	movs	r3, #12
    4204:	602b      	str	r3, [r5, #0]
    4206:	e7d3      	b.n	41b0 <_free_r+0x24>
    4208:	6820      	ldr	r0, [r4, #0]
    420a:	1821      	adds	r1, r4, r0
    420c:	428a      	cmp	r2, r1
    420e:	bf04      	itt	eq
    4210:	6811      	ldreq	r1, [r2, #0]
    4212:	6852      	ldreq	r2, [r2, #4]
    4214:	6062      	str	r2, [r4, #4]
    4216:	bf04      	itt	eq
    4218:	1809      	addeq	r1, r1, r0
    421a:	6021      	streq	r1, [r4, #0]
    421c:	605c      	str	r4, [r3, #4]
    421e:	e7c7      	b.n	41b0 <_free_r+0x24>
    4220:	bd38      	pop	{r3, r4, r5, pc}
    4222:	bf00      	nop
    4224:	20000088 	.word	0x20000088

00004228 <_malloc_r>:
    4228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    422a:	1ccd      	adds	r5, r1, #3
    422c:	f025 0503 	bic.w	r5, r5, #3
    4230:	3508      	adds	r5, #8
    4232:	2d0c      	cmp	r5, #12
    4234:	bf38      	it	cc
    4236:	250c      	movcc	r5, #12
    4238:	2d00      	cmp	r5, #0
    423a:	4606      	mov	r6, r0
    423c:	db01      	blt.n	4242 <_malloc_r+0x1a>
    423e:	42a9      	cmp	r1, r5
    4240:	d903      	bls.n	424a <_malloc_r+0x22>
    4242:	230c      	movs	r3, #12
    4244:	6033      	str	r3, [r6, #0]
    4246:	2000      	movs	r0, #0
    4248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    424a:	f000 f857 	bl	42fc <__malloc_lock>
    424e:	4921      	ldr	r1, [pc, #132]	; (42d4 <_malloc_r+0xac>)
    4250:	680a      	ldr	r2, [r1, #0]
    4252:	4614      	mov	r4, r2
    4254:	b99c      	cbnz	r4, 427e <_malloc_r+0x56>
    4256:	4f20      	ldr	r7, [pc, #128]	; (42d8 <_malloc_r+0xb0>)
    4258:	683b      	ldr	r3, [r7, #0]
    425a:	b923      	cbnz	r3, 4266 <_malloc_r+0x3e>
    425c:	4621      	mov	r1, r4
    425e:	4630      	mov	r0, r6
    4260:	f000 f83c 	bl	42dc <_sbrk_r>
    4264:	6038      	str	r0, [r7, #0]
    4266:	4629      	mov	r1, r5
    4268:	4630      	mov	r0, r6
    426a:	f000 f837 	bl	42dc <_sbrk_r>
    426e:	1c43      	adds	r3, r0, #1
    4270:	d123      	bne.n	42ba <_malloc_r+0x92>
    4272:	230c      	movs	r3, #12
    4274:	6033      	str	r3, [r6, #0]
    4276:	4630      	mov	r0, r6
    4278:	f000 f846 	bl	4308 <__malloc_unlock>
    427c:	e7e3      	b.n	4246 <_malloc_r+0x1e>
    427e:	6823      	ldr	r3, [r4, #0]
    4280:	1b5b      	subs	r3, r3, r5
    4282:	d417      	bmi.n	42b4 <_malloc_r+0x8c>
    4284:	2b0b      	cmp	r3, #11
    4286:	d903      	bls.n	4290 <_malloc_r+0x68>
    4288:	6023      	str	r3, [r4, #0]
    428a:	441c      	add	r4, r3
    428c:	6025      	str	r5, [r4, #0]
    428e:	e004      	b.n	429a <_malloc_r+0x72>
    4290:	6863      	ldr	r3, [r4, #4]
    4292:	42a2      	cmp	r2, r4
    4294:	bf0c      	ite	eq
    4296:	600b      	streq	r3, [r1, #0]
    4298:	6053      	strne	r3, [r2, #4]
    429a:	4630      	mov	r0, r6
    429c:	f000 f834 	bl	4308 <__malloc_unlock>
    42a0:	f104 000b 	add.w	r0, r4, #11
    42a4:	1d23      	adds	r3, r4, #4
    42a6:	f020 0007 	bic.w	r0, r0, #7
    42aa:	1ac2      	subs	r2, r0, r3
    42ac:	d0cc      	beq.n	4248 <_malloc_r+0x20>
    42ae:	1a1b      	subs	r3, r3, r0
    42b0:	50a3      	str	r3, [r4, r2]
    42b2:	e7c9      	b.n	4248 <_malloc_r+0x20>
    42b4:	4622      	mov	r2, r4
    42b6:	6864      	ldr	r4, [r4, #4]
    42b8:	e7cc      	b.n	4254 <_malloc_r+0x2c>
    42ba:	1cc4      	adds	r4, r0, #3
    42bc:	f024 0403 	bic.w	r4, r4, #3
    42c0:	42a0      	cmp	r0, r4
    42c2:	d0e3      	beq.n	428c <_malloc_r+0x64>
    42c4:	1a21      	subs	r1, r4, r0
    42c6:	4630      	mov	r0, r6
    42c8:	f000 f808 	bl	42dc <_sbrk_r>
    42cc:	3001      	adds	r0, #1
    42ce:	d1dd      	bne.n	428c <_malloc_r+0x64>
    42d0:	e7cf      	b.n	4272 <_malloc_r+0x4a>
    42d2:	bf00      	nop
    42d4:	20000088 	.word	0x20000088
    42d8:	2000008c 	.word	0x2000008c

000042dc <_sbrk_r>:
    42dc:	b538      	push	{r3, r4, r5, lr}
    42de:	4c06      	ldr	r4, [pc, #24]	; (42f8 <_sbrk_r+0x1c>)
    42e0:	2300      	movs	r3, #0
    42e2:	4605      	mov	r5, r0
    42e4:	4608      	mov	r0, r1
    42e6:	6023      	str	r3, [r4, #0]
    42e8:	f000 f816 	bl	4318 <_sbrk>
    42ec:	1c43      	adds	r3, r0, #1
    42ee:	d102      	bne.n	42f6 <_sbrk_r+0x1a>
    42f0:	6823      	ldr	r3, [r4, #0]
    42f2:	b103      	cbz	r3, 42f6 <_sbrk_r+0x1a>
    42f4:	602b      	str	r3, [r5, #0]
    42f6:	bd38      	pop	{r3, r4, r5, pc}
    42f8:	2000010c 	.word	0x2000010c

000042fc <__malloc_lock>:
    42fc:	4801      	ldr	r0, [pc, #4]	; (4304 <__malloc_lock+0x8>)
    42fe:	f000 b809 	b.w	4314 <__retarget_lock_acquire_recursive>
    4302:	bf00      	nop
    4304:	20000114 	.word	0x20000114

00004308 <__malloc_unlock>:
    4308:	4801      	ldr	r0, [pc, #4]	; (4310 <__malloc_unlock+0x8>)
    430a:	f000 b804 	b.w	4316 <__retarget_lock_release_recursive>
    430e:	bf00      	nop
    4310:	20000114 	.word	0x20000114

00004314 <__retarget_lock_acquire_recursive>:
    4314:	4770      	bx	lr

00004316 <__retarget_lock_release_recursive>:
    4316:	4770      	bx	lr

00004318 <_sbrk>:
    4318:	4a04      	ldr	r2, [pc, #16]	; (432c <_sbrk+0x14>)
    431a:	4905      	ldr	r1, [pc, #20]	; (4330 <_sbrk+0x18>)
    431c:	6813      	ldr	r3, [r2, #0]
    431e:	2b00      	cmp	r3, #0
    4320:	bf08      	it	eq
    4322:	460b      	moveq	r3, r1
    4324:	4418      	add	r0, r3
    4326:	6010      	str	r0, [r2, #0]
    4328:	4618      	mov	r0, r3
    432a:	4770      	bx	lr
    432c:	20000090 	.word	0x20000090
    4330:	2000011c 	.word	0x2000011c

00004334 <__FUNCTION__.7587>:
    4334:	64726168 6c756166 72745f74 5f656361     hardfault_trace_
    4344:	63617473                                 stack.

0000434a <__FUNCTION__.7600>:
    434a:	6d6d656d 67616e61 72745f65 5f656361     memmanage_trace_
    435a:	63617473                                 stack.

00004360 <__FUNCTION__.7613>:
    4360:	66737562 746c7561 6172745f 735f6563     busfault_trace_s
    4370:	6b636174                                 tack.

00004375 <__FUNCTION__.7626>:
    4375:	67617375 75616665 745f746c 65636172     usagefault_trace
    4385:	6174735f 5b006b63 205d7325 7542202d     _stack.[%s] - Bu
    4395:	61662073 21746c75 61745320 74206b63     s fault! Stack t
    43a5:	65636172 000a0d3a 5d73255b 42202d20     race:...[%s] - B
    43b5:	20525346 2578305b 5d583230 5b000a0d     FSR [0x%02X]...[
    43c5:	205d7325 4642202d 5b205241 30257830     %s] - BFAR [0x%0
    43d5:	0d5d5838 255b000a 2d205d73 72614820     8X]...[%s] - Har
    43e5:	61662064 21746c75 61745320 74206b63     d fault! Stack t
    43f5:	65636172 000a0d3a 5d73255b 52202d20     race:...[%s] - R
    4405:	305b2030 38302578 0a0d5d58 73255b00     0 [0x%08X]...[%s
    4415:	202d205d 5b203152 30257830 0d5d5838     ] - R1 [0x%08X].
    4425:	255b000a 2d205d73 20325220 2578305b     ..[%s] - R2 [0x%
    4435:	5d583830 5b000a0d 205d7325 3352202d     08X]...[%s] - R3
    4445:	78305b20 58383025 000a0d5d 5d73255b      [0x%08X]...[%s]
    4455:	52202d20 5b203231 30257830 0d5d5838      - R12 [0x%08X].
    4465:	255b000a 2d205d73 20524c20 3431525b     ..[%s] - LR [R14
    4475:	305b205d 38302578 63205d58 206c6c61     ] [0x%08X] call 
    4485:	75746572 0a0d6e72 73255b00 202d205d     return...[%s] - 
    4495:	5b204350 5d353152 78305b20 58383025     PC [R15] [0x%08X
    44a5:	7270205d 6172676f 6f63206d 65746e75     ] program counte
    44b5:	000a0d72 5d73255b 50202d20 5b205253     r...[%s] - PSR [
    44c5:	30257830 205d5838 676f7270 206d6172     0x%08X] program 
    44d5:	74617473 72207375 73696765 0d726574     status register.
    44e5:	255b000a 2d205d73 2d2d2d20 2d2d2d2d     ..[%s] - -------
    44f5:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
    4505:	2d2d2d2d 0d2d2d2d 255b000a 2d205d73     -------...[%s] -
    4515:	53464820 305b2052 38302578 0a0d5d58      HFSR [0x%08X]..
    4525:	73255b00 202d205d 52534349 78305b20     .[%s] - ICSR [0x
    4535:	58383025 000a0d5d 5d73255b 4d202d20     %08X]...[%s] - M
    4545:	5b205053 30257830 0d5d5838 255b000a     SP [0x%08X]...[%
    4555:	2d205d73 6d654d20 2079726f 616e616d     s] - Memory mana
    4565:	656d6567 6620746e 746c7561 74532021     gement fault! St
    4575:	206b6361 63617274 0a0d3a65 73255b00     ack trace:...[%s
    4585:	202d205d 53464d4d 305b2052 32302578     ] - MMFSR [0x%02
    4595:	0a0d5d58 73255b00 202d205d 41464d4d     X]...[%s] - MMFA
    45a5:	305b2052 38302578 0a0d5d58 73255b00     R [0x%08X]...[%s
    45b5:	202d205d 67617355 61662065 21746c75     ] - Usage fault!
    45c5:	61745320 74206b63 65636172 000a0d3a      Stack trace:...
    45d5:	5d73255b 55202d20 20525346 2578305b     [%s] - UFSR [0x%
    45e5:	5d583430                                 04X]...

000045ec <__FUNCTION__.9048>:
    45ec:	74696e69                                 init.

000045f1 <__FUNCTION__.9055>:
    45f1:	6e69616d 4d464500 474a3233 3f004231     main.EFM32JG1B.?
    4601:	52464500 474d3233 45005031 32335246     .EFR32MG1P.EFR32
    4611:	4231474d 52464500 474d3233 45005631     MG1B.EFR32MG1V.E
    4621:	32335246 50314742 52464500 47423233     FR32BG1P.EFR32BG
    4631:	45004231 32335246 56314742 52464500     1B.EFR32BG1V.EFR
    4641:	47463233 45005031 32335246 42314746     32FG1P.EFR32FG1B
    4651:	52464500 47463233 45005631 32335246     .EFR32FG1V.EFR32
    4661:	3231474d 46450050 4d323352 42323147     MG12P.EFR32MG12B
    4671:	52464500 474d3233 00563231 33524645     .EFR32MG12V.EFR3
    4681:	31474232 45005032 32335246 32314742     2BG12P.EFR32BG12
    4691:	46450042 42323352 56323147 52464500     B.EFR32BG12V.EFR
    46a1:	47463233 00503231 33524645 31474632     32FG12P.EFR32FG1
    46b1:	45004232 32335246 32314746 46450056     2B.EFR32FG12V.EF
    46c1:	4d323352 50333147 52464500 474d3233     R32MG13P.EFR32MG
    46d1:	00423331 33524645 31474d32 45005633     13B.EFR32MG13V.E
    46e1:	32335246 33314742 46450050 42323352     FR32BG13P.EFR32B
    46f1:	42333147 52464500 47423233 00563331     G13B.EFR32BG13V.
    4701:	33524645 31475a32 45005033 32335246     EFR32ZG13P.EFR32
    4711:	33314746 46450050 46323352 42333147     FG13P.EFR32FG13B
    4721:	52464500 47463233 00563331 33524645     .EFR32FG13V.EFR3
    4731:	31474d32 45005034 32335246 3431474d     2MG14P.EFR32MG14
    4741:	46450042 4d323352 56343147 52464500     B.EFR32MG14V.EFR
    4751:	47423233 00503431 33524645 31474232     32BG14P.EFR32BG1
    4761:	45004234 32335246 34314742 46450056     4B.EFR32BG14V.EF
    4771:	5a323352 50343147 52464500 47463233     R32ZG14P.EFR32FG
    4781:	00503431 33524645 31474632 45004234     14P.EFR32FG14B.E
    4791:	3233525a 45004757 32335246 34314746     ZR32WG.EFR32FG14
    47a1:	5a450056 4c323352 46450047 4732334d     V.EZR32LG.EFM32G
    47b1:	4d464500 47473233 00423231 334d4645     .EFM32GG12B.EFM3
    47c1:	00474732 334d4645 31475432 54004231     2GG.EFM32TG11B.T
    47d1:	46450047 4732334d 42313147 4d464500     G.EFM32GG11B.EFM
    47e1:	474c3233 4d464500 474a3233 00423231     32LG.EFM32JG12B.
    47f1:	334d4645 00475732 334d4645 31475032     EFM32WG.EFM32PG1
    4801:	5a004232 46450047 5032334d 00423147     2B.ZG.EFM32PG1B.
    4811:	33525a45 00474832 68257325 68254675     EZR32HG.%s%huF%h
    4821:	25632575 68682563 4f4c0075 4b4f0057     u%c%c%hhu.LOW.OK
    4831:	73255b00 202d205d 69766544 203a6563     .[%s] - Device: 
    4841:	0a0d7325 73255b00 202d205d 69766544     %s...[%s] - Devi
    4851:	52206563 73697665 3a6e6f69 25783020     ce Revision: 0x%
    4861:	0d583430 255b000a 2d205d73 6c614320     04X...[%s] - Cal
    4871:	61726269 6e6f6974 6d657420 61726570     ibration tempera
    4881:	65727574 6825203a 43207568 5b000a0d     ture: %hhu C...[
    4891:	205d7325 6c46202d 20687361 657a6953     %s] - Flash Size
    48a1:	6825203a 426b2075 5b000a0d 205d7325     : %hu kB...[%s] 
    48b1:	4152202d 6953204d 203a657a 20756825     - RAM Size: %hu 
    48c1:	0a0d426b 73255b00 202d205d 65657246     kB...[%s] - Free
    48d1:	4d415220 6c25203a 0d422075 255b000a      RAM: %lu B...[%
    48e1:	2d205d73 696e5520 20657571 203a4449     s] - Unique ID: 
    48f1:	58383025 3830252d 000a0d58 5d73255b     %08X-%08X...[%s]
    4901:	43202d20 2d20554d 58464820 6c43204f      - CMU - HFXO Cl
    4911:	3a6b636f 312e2520 484d2066 0a0d217a     ock: %.1f MHz!..
    4921:	73255b00 202d205d 20554d43 4648202d     .[%s] - CMU - HF
    4931:	204f4352 636f6c43 25203a6b 2066312e     RCO Clock: %.1f 
    4941:	217a484d 5b000a0d 205d7325 4d43202d     MHz!...[%s] - CM
    4951:	202d2055 46485355 204f4352 636f6c43     U - USHFRCO Cloc
    4961:	25203a6b 2066312e 217a484d 5b000a0d     k: %.1f MHz!...[
    4971:	205d7325 4d43202d 202d2055 48585541     %s] - CMU - AUXH
    4981:	4f435246 6f6c4320 203a6b63 66312e25     FRCO Clock: %.1f
    4991:	7a484d20 000a0d21 5d73255b 43202d20      MHz!...[%s] - C
    49a1:	2d20554d 58464c20 6c43204f 3a6b636f     MU - LFXO Clock:
    49b1:	332e2520 486b2066 0a0d217a 73255b00      %.3f kHz!...[%s
    49c1:	202d205d 20554d43 464c202d 204f4352     ] - CMU - LFRCO 
    49d1:	636f6c43 25203a6b 2066332e 217a486b     Clock: %.3f kHz!
    49e1:	5b000a0d 205d7325 4d43202d 202d2055     ...[%s] - CMU - 
    49f1:	52464c55 43204f43 6b636f6c 2e25203a     ULFRCO Clock: %.
    4a01:	6b206633 0d217a48 255b000a 2d205d73     3f kHz!...[%s] -
    4a11:	554d4320 48202d20 43525346 6f6c4320      CMU - HFSRC Clo
    4a21:	203a6b63 66312e25 7a484d20 000a0d21     ck: %.1f MHz!...
    4a31:	5d73255b 43202d20 2d20554d 20464820     [%s] - CMU - HF 
    4a41:	636f6c43 25203a6b 2066312e 217a484d     Clock: %.1f MHz!
    4a51:	5b000a0d 205d7325 4d43202d 202d2055     ...[%s] - CMU - 
    4a61:	55424648 6c432053 3a6b636f 312e2520     HFBUS Clock: %.1
    4a71:	484d2066 0a0d217a 73255b00 202d205d     f MHz!...[%s] - 
    4a81:	20554d43 4648202d 45524f43 6f6c4320     CMU - HFCORE Clo
    4a91:	203a6b63 66312e25 7a484d20 000a0d21     ck: %.1f MHz!...
    4aa1:	5d73255b 43202d20 2d20554d 45464820     [%s] - CMU - HFE
    4ab1:	43205058 6b636f6c 2e25203a 4d206631     XP Clock: %.1f M
    4ac1:	0d217a48 255b000a 2d205d73 554d4320     Hz!...[%s] - CMU
    4ad1:	48202d20 52455046 6f6c4320 203a6b63      - HFPER Clock: 
    4ae1:	66312e25 7a484d20 000a0d21 5d73255b     %.1f MHz!...[%s]
    4af1:	43202d20 2d20554d 50464820 20425245      - CMU - HFPERB 
    4b01:	636f6c43 25203a6b 2066312e 217a484d     Clock: %.1f MHz!
    4b11:	5b000a0d 205d7325 4d43202d 202d2055     ...[%s] - CMU - 
    4b21:	45504648 43204352 6b636f6c 2e25203a     HFPERC Clock: %.
    4b31:	4d206631 0d217a48 255b000a 2d205d73     1f MHz!...[%s] -
    4b41:	554d4320 48202d20 20454c46 636f6c43      CMU - HFLE Cloc
    4b51:	25203a6b 2066312e 217a484d 5b000a0d     k: %.1f MHz!...[
    4b61:	205d7325 4d43202d 202d2055 49505351     %s] - CMU - QSPI
    4b71:	6f6c4320 203a6b63 66312e25 7a484d20      Clock: %.1f MHz
    4b81:	000a0d21 5d73255b 43202d20 2d20554d     !...[%s] - CMU -
    4b91:	49445320 6c43204f 3a6b636f 312e2520      SDIO Clock: %.1
    4ba1:	484d2066 0a0d217a 73255b00 202d205d     f MHz!...[%s] - 
    4bb1:	20554d43 5355202d 6c432042 3a6b636f     CMU - USB Clock:
    4bc1:	312e2520 484d2066 0a0d217a 73255b00      %.1f MHz!...[%s
    4bd1:	202d205d 20554d43 4441202d 43203043     ] - CMU - ADC0 C
    4be1:	6b636f6c 2e25203a 4d206631 0d217a48     lock: %.1f MHz!.
    4bf1:	255b000a 2d205d73 554d4320 41202d20     ..[%s] - CMU - A
    4c01:	20314344 636f6c43 25203a6b 2066312e     DC1 Clock: %.1f 
    4c11:	217a484d 5b000a0d 205d7325 4d43202d     MHz!...[%s] - CM
    4c21:	202d2055 20474244 636f6c43 25203a6b     U - DBG Clock: %
    4c31:	2066312e 217a484d 5b000a0d 205d7325     .1f MHz!...[%s] 
    4c41:	4d43202d 202d2055 20585541 636f6c43     - CMU - AUX Cloc
    4c51:	25203a6b 2066312e 217a484d 5b000a0d     k: %.1f MHz!...[
    4c61:	205d7325 4d43202d 202d2055 2041464c     %s] - CMU - LFA 
    4c71:	636f6c43 25203a6b 2066332e 217a486b     Clock: %.3f kHz!
    4c81:	5b000a0d 205d7325 4d43202d 202d2055     ...[%s] - CMU - 
    4c91:	4553454c 2045534e 636f6c43 25203a6b     LESENSE Clock: %
    4ca1:	2066332e 217a486b 5b000a0d 205d7325     .3f kHz!...[%s] 
    4cb1:	4d43202d 202d2055 20435452 636f6c43     - CMU - RTC Cloc
    4cc1:	25203a6b 2066332e 217a486b 5b000a0d     k: %.3f kHz!...[
    4cd1:	205d7325 4d43202d 202d2055 2044434c     %s] - CMU - LCD 
    4ce1:	636f6c43 25203a6b 2066332e 217a486b     Clock: %.3f kHz!
    4cf1:	5b000a0d 205d7325 4d43202d 202d2055     ...[%s] - CMU - 
    4d01:	4954454c 3052454d 6f6c4320 203a6b63     LETIMER0 Clock: 
    4d11:	66332e25 7a486b20 000a0d21 5d73255b     %.3f kHz!...[%s]
    4d21:	43202d20 2d20554d 54454c20 52454d49      - CMU - LETIMER
    4d31:	6c432031 3a6b636f 332e2520 486b2066     1 Clock: %.3f kH
    4d41:	0a0d217a 73255b00 202d205d 20554d43     z!...[%s] - CMU 
    4d51:	464c202d 6c432042 3a6b636f 332e2520     - LFB Clock: %.3
    4d61:	486b2066 0a0d217a 73255b00 202d205d     f kHz!...[%s] - 
    4d71:	20554d43 454c202d 54524155 6c432030     CMU - LEUART0 Cl
    4d81:	3a6b636f 332e2520 486b2066 0a0d217a     ock: %.3f kHz!..
    4d91:	73255b00 202d205d 20554d43 454c202d     .[%s] - CMU - LE
    4da1:	54524155 6c432031 3a6b636f 332e2520     UART1 Clock: %.3
    4db1:	486b2066 0a0d217a 73255b00 202d205d     f kHz!...[%s] - 
    4dc1:	20554d43 5953202d 43495453 6c43204b     CMU - SYSTICK Cl
    4dd1:	3a6b636f 332e2520 486b2066 0a0d217a     ock: %.3f kHz!..
    4de1:	73255b00 202d205d 20554d43 5343202d     .[%s] - CMU - CS
    4df1:	43204e45 6b636f6c 2e25203a 6b206633     EN Clock: %.3f k
    4e01:	0d217a48 255b000a 2d205d73 554d4320     Hz!...[%s] - CMU
    4e11:	4c202d20 43204346 6b636f6c 2e25203a      - LFC Clock: %.
    4e21:	6b206633 0d217a48 255b000a 2d205d73     3f kHz!...[%s] -
    4e31:	554d4320 4c202d20 43204546 6b636f6c      CMU - LFE Clock
    4e41:	2e25203a 6b206633 0d217a48 255b000a     : %.3f kHz!...[%
    4e51:	2d205d73 554d4320 52202d20 20434354     s] - CMU - RTCC 
    4e61:	636f6c43 25203a6b 2066332e 217a486b     Clock: %.3f kHz!
    4e71:	5b000a0d 205d7325 4d45202d 202d2055     ...[%s] - EMU - 
    4e81:	44445641 6c614620 6854206c 68736572     AVDD Fall Thresh
    4e91:	3a646c6f 322e2520 566d2066 000a0d21     old: %.2f mV!...
    4ea1:	5d73255b 45202d20 2d20554d 44564120     [%s] - EMU - AVD
    4eb1:	69522044 54206573 73657268 646c6f68     D Rise Threshold
    4ec1:	2e25203a 6d206632 0a0d2156 73255b00     : %.2f mV!...[%s
    4ed1:	202d205d 20554d45 5641202d 56204444     ] - EMU - AVDD V
    4ee1:	61746c6f 203a6567 66322e25 0d566d20     oltage: %.2f mV.
    4ef1:	255b000a 2d205d73 554d4520 41202d20     ..[%s] - EMU - A
    4f01:	20444456 74617453 203a7375 0a0d7325     VDD Status: %s..
    4f11:	73255b00 202d205d 20554d45 5644202d     .[%s] - EMU - DV
    4f21:	46204444 206c6c61 65726854 6c6f6873     DD Fall Threshol
    4f31:	25203a64 2066322e 0d21566d 255b000a     d: %.2f mV!...[%
    4f41:	2d205d73 554d4520 44202d20 20444456     s] - EMU - DVDD 
    4f51:	65736952 72685420 6f687365 203a646c     Rise Threshold: 
    4f61:	66322e25 21566d20 5b000a0d 205d7325     %.2f mV!...[%s] 
    4f71:	4d45202d 202d2055 44445644 6c6f5620     - EMU - DVDD Vol
    4f81:	65676174 2e25203a 6d206632 000a0d56     tage: %.2f mV...
    4f91:	5d73255b 45202d20 2d20554d 44564420     [%s] - EMU - DVD
    4fa1:	74532044 73757461 7325203a 5b000a0d     D Status: %s...[
    4fb1:	205d7325 4d45202d 202d2055 44564f49     %s] - EMU - IOVD
    4fc1:	61462044 54206c6c 73657268 646c6f68     D Fall Threshold
    4fd1:	2e25203a 6d206632 0a0d2156 73255b00     : %.2f mV!...[%s
    4fe1:	202d205d 20554d45 4f49202d 20444456     ] - EMU - IOVDD 
    4ff1:	65736952 72685420 6f687365 203a646c     Rise Threshold: 
    5001:	66322e25 21566d20 5b000a0d 205d7325     %.2f mV!...[%s] 
    5011:	4d45202d 202d2055 44564f49 74532044     - EMU - IOVDD St
    5021:	73757461 7325203a 5b000a0d 205d7325     atus: %s...[%s] 
    5031:	4d45202d 202d2055 44564f49 6f562044     - EMU - IOVDD Vo
    5041:	6761746c 25203a65 2066322e 0a0d566d     ltage: %.2f mV..
    5051:	73255b00 202d205d 20554d45 6f43202d     .[%s] - EMU - Co
    5061:	56206572 61746c6f 203a6567 66322e25     re Voltage: %.2f
    5071:	0d566d20 255b000a 2d205d73 61635320      mV...[%s] - Sca
    5081:	6e696e6e 32492067 75622043 2e312073     nning I2C bus 1.
    5091:	0a0d2e2e 73255b00 202d205d 73616c46     .....[%s] - Flas
    50a1:	61502068 49207472 25203a44 0d583630     h Part ID: %06X.
    50b1:	255b000a 2d205d73 616c4620 49206873     ..[%s] - Flash I
    50c1:	25203a44 25583230 25583230 25583230     D: %02X%02X%02X%
    50d1:	25583230 25583230 25583230 25583230     02X%02X%02X%02X%
    50e1:	0d583230 255b000a 2d205d73 50535120     02X...[%s] - QSP
    50f1:	44522049 3025203a 0a0d5832 73255b00     I RD: %02X...[%s
    5101:	202d205d 746f6f42 3a445220 32302520     ] - Boot RD: %02
    5111:	000a0d58 5d73255b 44202d20 20617461     X...[%s] - Data 
    5121:	203a4452 58323025 5b000a0d 205d7325     RD: %02X...[%s] 
    5131:	4441202d 65542043 203a706d 66322e25     - ADC Temp: %.2f
    5141:	5b000a0d 205d7325 4d45202d 65542055     ...[%s] - EMU Te
    5151:	203a706d 66322e25 5b000a0d 205d7325     mp: %.2f...[%s] 
    5161:	4648202d 53204f58 74726174 203a7075     - HFXO Startup: 
    5171:	66322e25 0d467020 255b000a 2d205d73     %.2f pF...[%s] -
    5181:	58464820 7453204f 75747261 25203a70      HFXO Startup: %
    5191:	2066322e 0a0d4175 73255b00 202d205d     .2f uA...[%s] - 
    51a1:	4f584648 65745320 3a796461 322e2520     HFXO Steady: %.2
    51b1:	46702066 5b000a0d 205d7325 4648202d     f pF...[%s] - HF
    51c1:	53204f58 64616574 25203a79 2066322e     XO Steady: %.2f 
    51d1:	0a0d4175 73255b00 202d205d 4f584648     uA...[%s] - HFXO
    51e1:	414d5020 30255b20 3a5d5833 322e2520      PMA [%03X]: %.2
    51f1:	41752066 5b000a0d 205d7325 4648202d     f uA...[%s] - HF
    5201:	50204f58 5b204144 58333025 25203a5d     XO PDA [%03X]: %
    5211:	2066322e 0a0d4175 73255b00 202d205d     .2f uA...[%s] - 
    5221:	43435452 6d695420 25203a65 0a0d756c     RTCC Time: %lu..
    5231:	73255b00 202d205d 20676942 20676166     .[%s] - Big fag 
    5241:	73656f64 746f6e20 65656e20 65642064     does not need de
    5251:	20677562 74726175 796e6120 65726f6d     bug uart anymore
    5261:	000a0d2e                                 .......

00005268 <pow10.5152>:
    5268:	00000000 3ff00000 00000000 40240000     .......?......$@
    5278:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    5288:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    5298:	00000000 412e8480 00000000 416312d0     .......A......cA
    52a8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
