
bin/v1.test.elf:     file format elf32-littlearm


Disassembly of section .text:

00000150 <__aeabi_drsub>:
     150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     154:	e002      	b.n	15c <__adddf3>
     156:	bf00      	nop

00000158 <__aeabi_dsub>:
     158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000015c <__adddf3>:
     15c:	b530      	push	{r4, r5, lr}
     15e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     162:	ea4f 0543 	mov.w	r5, r3, lsl #1
     166:	ea94 0f05 	teq	r4, r5
     16a:	bf08      	it	eq
     16c:	ea90 0f02 	teqeq	r0, r2
     170:	bf1f      	itttt	ne
     172:	ea54 0c00 	orrsne.w	ip, r4, r0
     176:	ea55 0c02 	orrsne.w	ip, r5, r2
     17a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     17e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     182:	f000 80e2 	beq.w	34a <__adddf3+0x1ee>
     186:	ea4f 5454 	mov.w	r4, r4, lsr #21
     18a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     18e:	bfb8      	it	lt
     190:	426d      	neglt	r5, r5
     192:	dd0c      	ble.n	1ae <__adddf3+0x52>
     194:	442c      	add	r4, r5
     196:	ea80 0202 	eor.w	r2, r0, r2
     19a:	ea81 0303 	eor.w	r3, r1, r3
     19e:	ea82 0000 	eor.w	r0, r2, r0
     1a2:	ea83 0101 	eor.w	r1, r3, r1
     1a6:	ea80 0202 	eor.w	r2, r0, r2
     1aa:	ea81 0303 	eor.w	r3, r1, r3
     1ae:	2d36      	cmp	r5, #54	; 0x36
     1b0:	bf88      	it	hi
     1b2:	bd30      	pophi	{r4, r5, pc}
     1b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     1b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     1bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     1c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     1c4:	d002      	beq.n	1cc <__adddf3+0x70>
     1c6:	4240      	negs	r0, r0
     1c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     1cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     1d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     1d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     1d8:	d002      	beq.n	1e0 <__adddf3+0x84>
     1da:	4252      	negs	r2, r2
     1dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     1e0:	ea94 0f05 	teq	r4, r5
     1e4:	f000 80a7 	beq.w	336 <__adddf3+0x1da>
     1e8:	f1a4 0401 	sub.w	r4, r4, #1
     1ec:	f1d5 0e20 	rsbs	lr, r5, #32
     1f0:	db0d      	blt.n	20e <__adddf3+0xb2>
     1f2:	fa02 fc0e 	lsl.w	ip, r2, lr
     1f6:	fa22 f205 	lsr.w	r2, r2, r5
     1fa:	1880      	adds	r0, r0, r2
     1fc:	f141 0100 	adc.w	r1, r1, #0
     200:	fa03 f20e 	lsl.w	r2, r3, lr
     204:	1880      	adds	r0, r0, r2
     206:	fa43 f305 	asr.w	r3, r3, r5
     20a:	4159      	adcs	r1, r3
     20c:	e00e      	b.n	22c <__adddf3+0xd0>
     20e:	f1a5 0520 	sub.w	r5, r5, #32
     212:	f10e 0e20 	add.w	lr, lr, #32
     216:	2a01      	cmp	r2, #1
     218:	fa03 fc0e 	lsl.w	ip, r3, lr
     21c:	bf28      	it	cs
     21e:	f04c 0c02 	orrcs.w	ip, ip, #2
     222:	fa43 f305 	asr.w	r3, r3, r5
     226:	18c0      	adds	r0, r0, r3
     228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     22c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     230:	d507      	bpl.n	242 <__adddf3+0xe6>
     232:	f04f 0e00 	mov.w	lr, #0
     236:	f1dc 0c00 	rsbs	ip, ip, #0
     23a:	eb7e 0000 	sbcs.w	r0, lr, r0
     23e:	eb6e 0101 	sbc.w	r1, lr, r1
     242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     246:	d31b      	bcc.n	280 <__adddf3+0x124>
     248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     24c:	d30c      	bcc.n	268 <__adddf3+0x10c>
     24e:	0849      	lsrs	r1, r1, #1
     250:	ea5f 0030 	movs.w	r0, r0, rrx
     254:	ea4f 0c3c 	mov.w	ip, ip, rrx
     258:	f104 0401 	add.w	r4, r4, #1
     25c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     264:	f080 809a 	bcs.w	39c <__adddf3+0x240>
     268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     26c:	bf08      	it	eq
     26e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     272:	f150 0000 	adcs.w	r0, r0, #0
     276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     27a:	ea41 0105 	orr.w	r1, r1, r5
     27e:	bd30      	pop	{r4, r5, pc}
     280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     284:	4140      	adcs	r0, r0
     286:	eb41 0101 	adc.w	r1, r1, r1
     28a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     28e:	f1a4 0401 	sub.w	r4, r4, #1
     292:	d1e9      	bne.n	268 <__adddf3+0x10c>
     294:	f091 0f00 	teq	r1, #0
     298:	bf04      	itt	eq
     29a:	4601      	moveq	r1, r0
     29c:	2000      	moveq	r0, #0
     29e:	fab1 f381 	clz	r3, r1
     2a2:	bf08      	it	eq
     2a4:	3320      	addeq	r3, #32
     2a6:	f1a3 030b 	sub.w	r3, r3, #11
     2aa:	f1b3 0220 	subs.w	r2, r3, #32
     2ae:	da0c      	bge.n	2ca <__adddf3+0x16e>
     2b0:	320c      	adds	r2, #12
     2b2:	dd08      	ble.n	2c6 <__adddf3+0x16a>
     2b4:	f102 0c14 	add.w	ip, r2, #20
     2b8:	f1c2 020c 	rsb	r2, r2, #12
     2bc:	fa01 f00c 	lsl.w	r0, r1, ip
     2c0:	fa21 f102 	lsr.w	r1, r1, r2
     2c4:	e00c      	b.n	2e0 <__adddf3+0x184>
     2c6:	f102 0214 	add.w	r2, r2, #20
     2ca:	bfd8      	it	le
     2cc:	f1c2 0c20 	rsble	ip, r2, #32
     2d0:	fa01 f102 	lsl.w	r1, r1, r2
     2d4:	fa20 fc0c 	lsr.w	ip, r0, ip
     2d8:	bfdc      	itt	le
     2da:	ea41 010c 	orrle.w	r1, r1, ip
     2de:	4090      	lslle	r0, r2
     2e0:	1ae4      	subs	r4, r4, r3
     2e2:	bfa2      	ittt	ge
     2e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     2e8:	4329      	orrge	r1, r5
     2ea:	bd30      	popge	{r4, r5, pc}
     2ec:	ea6f 0404 	mvn.w	r4, r4
     2f0:	3c1f      	subs	r4, #31
     2f2:	da1c      	bge.n	32e <__adddf3+0x1d2>
     2f4:	340c      	adds	r4, #12
     2f6:	dc0e      	bgt.n	316 <__adddf3+0x1ba>
     2f8:	f104 0414 	add.w	r4, r4, #20
     2fc:	f1c4 0220 	rsb	r2, r4, #32
     300:	fa20 f004 	lsr.w	r0, r0, r4
     304:	fa01 f302 	lsl.w	r3, r1, r2
     308:	ea40 0003 	orr.w	r0, r0, r3
     30c:	fa21 f304 	lsr.w	r3, r1, r4
     310:	ea45 0103 	orr.w	r1, r5, r3
     314:	bd30      	pop	{r4, r5, pc}
     316:	f1c4 040c 	rsb	r4, r4, #12
     31a:	f1c4 0220 	rsb	r2, r4, #32
     31e:	fa20 f002 	lsr.w	r0, r0, r2
     322:	fa01 f304 	lsl.w	r3, r1, r4
     326:	ea40 0003 	orr.w	r0, r0, r3
     32a:	4629      	mov	r1, r5
     32c:	bd30      	pop	{r4, r5, pc}
     32e:	fa21 f004 	lsr.w	r0, r1, r4
     332:	4629      	mov	r1, r5
     334:	bd30      	pop	{r4, r5, pc}
     336:	f094 0f00 	teq	r4, #0
     33a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     33e:	bf06      	itte	eq
     340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     344:	3401      	addeq	r4, #1
     346:	3d01      	subne	r5, #1
     348:	e74e      	b.n	1e8 <__adddf3+0x8c>
     34a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     34e:	bf18      	it	ne
     350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     354:	d029      	beq.n	3aa <__adddf3+0x24e>
     356:	ea94 0f05 	teq	r4, r5
     35a:	bf08      	it	eq
     35c:	ea90 0f02 	teqeq	r0, r2
     360:	d005      	beq.n	36e <__adddf3+0x212>
     362:	ea54 0c00 	orrs.w	ip, r4, r0
     366:	bf04      	itt	eq
     368:	4619      	moveq	r1, r3
     36a:	4610      	moveq	r0, r2
     36c:	bd30      	pop	{r4, r5, pc}
     36e:	ea91 0f03 	teq	r1, r3
     372:	bf1e      	ittt	ne
     374:	2100      	movne	r1, #0
     376:	2000      	movne	r0, #0
     378:	bd30      	popne	{r4, r5, pc}
     37a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     37e:	d105      	bne.n	38c <__adddf3+0x230>
     380:	0040      	lsls	r0, r0, #1
     382:	4149      	adcs	r1, r1
     384:	bf28      	it	cs
     386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     38a:	bd30      	pop	{r4, r5, pc}
     38c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     390:	bf3c      	itt	cc
     392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     396:	bd30      	popcc	{r4, r5, pc}
     398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     39c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     3a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     3a4:	f04f 0000 	mov.w	r0, #0
     3a8:	bd30      	pop	{r4, r5, pc}
     3aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     3ae:	bf1a      	itte	ne
     3b0:	4619      	movne	r1, r3
     3b2:	4610      	movne	r0, r2
     3b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     3b8:	bf1c      	itt	ne
     3ba:	460b      	movne	r3, r1
     3bc:	4602      	movne	r2, r0
     3be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     3c2:	bf06      	itte	eq
     3c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     3c8:	ea91 0f03 	teqeq	r1, r3
     3cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     3d0:	bd30      	pop	{r4, r5, pc}
     3d2:	bf00      	nop

000003d4 <__aeabi_ui2d>:
     3d4:	f090 0f00 	teq	r0, #0
     3d8:	bf04      	itt	eq
     3da:	2100      	moveq	r1, #0
     3dc:	4770      	bxeq	lr
     3de:	b530      	push	{r4, r5, lr}
     3e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3e8:	f04f 0500 	mov.w	r5, #0
     3ec:	f04f 0100 	mov.w	r1, #0
     3f0:	e750      	b.n	294 <__adddf3+0x138>
     3f2:	bf00      	nop

000003f4 <__aeabi_i2d>:
     3f4:	f090 0f00 	teq	r0, #0
     3f8:	bf04      	itt	eq
     3fa:	2100      	moveq	r1, #0
     3fc:	4770      	bxeq	lr
     3fe:	b530      	push	{r4, r5, lr}
     400:	f44f 6480 	mov.w	r4, #1024	; 0x400
     404:	f104 0432 	add.w	r4, r4, #50	; 0x32
     408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     40c:	bf48      	it	mi
     40e:	4240      	negmi	r0, r0
     410:	f04f 0100 	mov.w	r1, #0
     414:	e73e      	b.n	294 <__adddf3+0x138>
     416:	bf00      	nop

00000418 <__aeabi_f2d>:
     418:	0042      	lsls	r2, r0, #1
     41a:	ea4f 01e2 	mov.w	r1, r2, asr #3
     41e:	ea4f 0131 	mov.w	r1, r1, rrx
     422:	ea4f 7002 	mov.w	r0, r2, lsl #28
     426:	bf1f      	itttt	ne
     428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     42c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     434:	4770      	bxne	lr
     436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     43a:	bf08      	it	eq
     43c:	4770      	bxeq	lr
     43e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     442:	bf04      	itt	eq
     444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     448:	4770      	bxeq	lr
     44a:	b530      	push	{r4, r5, lr}
     44c:	f44f 7460 	mov.w	r4, #896	; 0x380
     450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     458:	e71c      	b.n	294 <__adddf3+0x138>
     45a:	bf00      	nop

0000045c <__aeabi_ul2d>:
     45c:	ea50 0201 	orrs.w	r2, r0, r1
     460:	bf08      	it	eq
     462:	4770      	bxeq	lr
     464:	b530      	push	{r4, r5, lr}
     466:	f04f 0500 	mov.w	r5, #0
     46a:	e00a      	b.n	482 <__aeabi_l2d+0x16>

0000046c <__aeabi_l2d>:
     46c:	ea50 0201 	orrs.w	r2, r0, r1
     470:	bf08      	it	eq
     472:	4770      	bxeq	lr
     474:	b530      	push	{r4, r5, lr}
     476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     47a:	d502      	bpl.n	482 <__aeabi_l2d+0x16>
     47c:	4240      	negs	r0, r0
     47e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     482:	f44f 6480 	mov.w	r4, #1024	; 0x400
     486:	f104 0432 	add.w	r4, r4, #50	; 0x32
     48a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     48e:	f43f aed8 	beq.w	242 <__adddf3+0xe6>
     492:	f04f 0203 	mov.w	r2, #3
     496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     49a:	bf18      	it	ne
     49c:	3203      	addne	r2, #3
     49e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4a2:	bf18      	it	ne
     4a4:	3203      	addne	r2, #3
     4a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     4aa:	f1c2 0320 	rsb	r3, r2, #32
     4ae:	fa00 fc03 	lsl.w	ip, r0, r3
     4b2:	fa20 f002 	lsr.w	r0, r0, r2
     4b6:	fa01 fe03 	lsl.w	lr, r1, r3
     4ba:	ea40 000e 	orr.w	r0, r0, lr
     4be:	fa21 f102 	lsr.w	r1, r1, r2
     4c2:	4414      	add	r4, r2
     4c4:	e6bd      	b.n	242 <__adddf3+0xe6>
     4c6:	bf00      	nop

000004c8 <__aeabi_dmul>:
     4c8:	b570      	push	{r4, r5, r6, lr}
     4ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
     4ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     4d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     4d6:	bf1d      	ittte	ne
     4d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     4dc:	ea94 0f0c 	teqne	r4, ip
     4e0:	ea95 0f0c 	teqne	r5, ip
     4e4:	f000 f8de 	bleq	6a4 <__aeabi_dmul+0x1dc>
     4e8:	442c      	add	r4, r5
     4ea:	ea81 0603 	eor.w	r6, r1, r3
     4ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     4fa:	bf18      	it	ne
     4fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     508:	d038      	beq.n	57c <__aeabi_dmul+0xb4>
     50a:	fba0 ce02 	umull	ip, lr, r0, r2
     50e:	f04f 0500 	mov.w	r5, #0
     512:	fbe1 e502 	umlal	lr, r5, r1, r2
     516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     51a:	fbe0 e503 	umlal	lr, r5, r0, r3
     51e:	f04f 0600 	mov.w	r6, #0
     522:	fbe1 5603 	umlal	r5, r6, r1, r3
     526:	f09c 0f00 	teq	ip, #0
     52a:	bf18      	it	ne
     52c:	f04e 0e01 	orrne.w	lr, lr, #1
     530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     53c:	d204      	bcs.n	548 <__aeabi_dmul+0x80>
     53e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     542:	416d      	adcs	r5, r5
     544:	eb46 0606 	adc.w	r6, r6, r6
     548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     54c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     55c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     560:	bf88      	it	hi
     562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     566:	d81e      	bhi.n	5a6 <__aeabi_dmul+0xde>
     568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     56c:	bf08      	it	eq
     56e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     572:	f150 0000 	adcs.w	r0, r0, #0
     576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     57a:	bd70      	pop	{r4, r5, r6, pc}
     57c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     580:	ea46 0101 	orr.w	r1, r6, r1
     584:	ea40 0002 	orr.w	r0, r0, r2
     588:	ea81 0103 	eor.w	r1, r1, r3
     58c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     590:	bfc2      	ittt	gt
     592:	ebd4 050c 	rsbsgt	r5, r4, ip
     596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     59a:	bd70      	popgt	{r4, r5, r6, pc}
     59c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     5a0:	f04f 0e00 	mov.w	lr, #0
     5a4:	3c01      	subs	r4, #1
     5a6:	f300 80ab 	bgt.w	700 <__aeabi_dmul+0x238>
     5aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
     5ae:	bfde      	ittt	le
     5b0:	2000      	movle	r0, #0
     5b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     5b6:	bd70      	pople	{r4, r5, r6, pc}
     5b8:	f1c4 0400 	rsb	r4, r4, #0
     5bc:	3c20      	subs	r4, #32
     5be:	da35      	bge.n	62c <__aeabi_dmul+0x164>
     5c0:	340c      	adds	r4, #12
     5c2:	dc1b      	bgt.n	5fc <__aeabi_dmul+0x134>
     5c4:	f104 0414 	add.w	r4, r4, #20
     5c8:	f1c4 0520 	rsb	r5, r4, #32
     5cc:	fa00 f305 	lsl.w	r3, r0, r5
     5d0:	fa20 f004 	lsr.w	r0, r0, r4
     5d4:	fa01 f205 	lsl.w	r2, r1, r5
     5d8:	ea40 0002 	orr.w	r0, r0, r2
     5dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     5e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     5e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5e8:	fa21 f604 	lsr.w	r6, r1, r4
     5ec:	eb42 0106 	adc.w	r1, r2, r6
     5f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5f4:	bf08      	it	eq
     5f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5fa:	bd70      	pop	{r4, r5, r6, pc}
     5fc:	f1c4 040c 	rsb	r4, r4, #12
     600:	f1c4 0520 	rsb	r5, r4, #32
     604:	fa00 f304 	lsl.w	r3, r0, r4
     608:	fa20 f005 	lsr.w	r0, r0, r5
     60c:	fa01 f204 	lsl.w	r2, r1, r4
     610:	ea40 0002 	orr.w	r0, r0, r2
     614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     61c:	f141 0100 	adc.w	r1, r1, #0
     620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     624:	bf08      	it	eq
     626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     62a:	bd70      	pop	{r4, r5, r6, pc}
     62c:	f1c4 0520 	rsb	r5, r4, #32
     630:	fa00 f205 	lsl.w	r2, r0, r5
     634:	ea4e 0e02 	orr.w	lr, lr, r2
     638:	fa20 f304 	lsr.w	r3, r0, r4
     63c:	fa01 f205 	lsl.w	r2, r1, r5
     640:	ea43 0302 	orr.w	r3, r3, r2
     644:	fa21 f004 	lsr.w	r0, r1, r4
     648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     64c:	fa21 f204 	lsr.w	r2, r1, r4
     650:	ea20 0002 	bic.w	r0, r0, r2
     654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     65c:	bf08      	it	eq
     65e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     662:	bd70      	pop	{r4, r5, r6, pc}
     664:	f094 0f00 	teq	r4, #0
     668:	d10f      	bne.n	68a <__aeabi_dmul+0x1c2>
     66a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     66e:	0040      	lsls	r0, r0, #1
     670:	eb41 0101 	adc.w	r1, r1, r1
     674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     678:	bf08      	it	eq
     67a:	3c01      	subeq	r4, #1
     67c:	d0f7      	beq.n	66e <__aeabi_dmul+0x1a6>
     67e:	ea41 0106 	orr.w	r1, r1, r6
     682:	f095 0f00 	teq	r5, #0
     686:	bf18      	it	ne
     688:	4770      	bxne	lr
     68a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     68e:	0052      	lsls	r2, r2, #1
     690:	eb43 0303 	adc.w	r3, r3, r3
     694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     698:	bf08      	it	eq
     69a:	3d01      	subeq	r5, #1
     69c:	d0f7      	beq.n	68e <__aeabi_dmul+0x1c6>
     69e:	ea43 0306 	orr.w	r3, r3, r6
     6a2:	4770      	bx	lr
     6a4:	ea94 0f0c 	teq	r4, ip
     6a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     6ac:	bf18      	it	ne
     6ae:	ea95 0f0c 	teqne	r5, ip
     6b2:	d00c      	beq.n	6ce <__aeabi_dmul+0x206>
     6b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     6b8:	bf18      	it	ne
     6ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     6be:	d1d1      	bne.n	664 <__aeabi_dmul+0x19c>
     6c0:	ea81 0103 	eor.w	r1, r1, r3
     6c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6c8:	f04f 0000 	mov.w	r0, #0
     6cc:	bd70      	pop	{r4, r5, r6, pc}
     6ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     6d2:	bf06      	itte	eq
     6d4:	4610      	moveq	r0, r2
     6d6:	4619      	moveq	r1, r3
     6d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     6dc:	d019      	beq.n	712 <__aeabi_dmul+0x24a>
     6de:	ea94 0f0c 	teq	r4, ip
     6e2:	d102      	bne.n	6ea <__aeabi_dmul+0x222>
     6e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     6e8:	d113      	bne.n	712 <__aeabi_dmul+0x24a>
     6ea:	ea95 0f0c 	teq	r5, ip
     6ee:	d105      	bne.n	6fc <__aeabi_dmul+0x234>
     6f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6f4:	bf1c      	itt	ne
     6f6:	4610      	movne	r0, r2
     6f8:	4619      	movne	r1, r3
     6fa:	d10a      	bne.n	712 <__aeabi_dmul+0x24a>
     6fc:	ea81 0103 	eor.w	r1, r1, r3
     700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     70c:	f04f 0000 	mov.w	r0, #0
     710:	bd70      	pop	{r4, r5, r6, pc}
     712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     71a:	bd70      	pop	{r4, r5, r6, pc}

0000071c <__aeabi_ddiv>:
     71c:	b570      	push	{r4, r5, r6, lr}
     71e:	f04f 0cff 	mov.w	ip, #255	; 0xff
     722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     72a:	bf1d      	ittte	ne
     72c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     730:	ea94 0f0c 	teqne	r4, ip
     734:	ea95 0f0c 	teqne	r5, ip
     738:	f000 f8a7 	bleq	88a <_min_heap_size+0x8a>
     73c:	eba4 0405 	sub.w	r4, r4, r5
     740:	ea81 0e03 	eor.w	lr, r1, r3
     744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     748:	ea4f 3101 	mov.w	r1, r1, lsl #12
     74c:	f000 8088 	beq.w	860 <_min_heap_size+0x60>
     750:	ea4f 3303 	mov.w	r3, r3, lsl #12
     754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     75c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     760:	ea4f 2202 	mov.w	r2, r2, lsl #8
     764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     76c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     774:	429d      	cmp	r5, r3
     776:	bf08      	it	eq
     778:	4296      	cmpeq	r6, r2
     77a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     77e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     782:	d202      	bcs.n	78a <__aeabi_ddiv+0x6e>
     784:	085b      	lsrs	r3, r3, #1
     786:	ea4f 0232 	mov.w	r2, r2, rrx
     78a:	1ab6      	subs	r6, r6, r2
     78c:	eb65 0503 	sbc.w	r5, r5, r3
     790:	085b      	lsrs	r3, r3, #1
     792:	ea4f 0232 	mov.w	r2, r2, rrx
     796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     79a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     79e:	ebb6 0e02 	subs.w	lr, r6, r2
     7a2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7a6:	bf22      	ittt	cs
     7a8:	1ab6      	subcs	r6, r6, r2
     7aa:	4675      	movcs	r5, lr
     7ac:	ea40 000c 	orrcs.w	r0, r0, ip
     7b0:	085b      	lsrs	r3, r3, #1
     7b2:	ea4f 0232 	mov.w	r2, r2, rrx
     7b6:	ebb6 0e02 	subs.w	lr, r6, r2
     7ba:	eb75 0e03 	sbcs.w	lr, r5, r3
     7be:	bf22      	ittt	cs
     7c0:	1ab6      	subcs	r6, r6, r2
     7c2:	4675      	movcs	r5, lr
     7c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     7c8:	085b      	lsrs	r3, r3, #1
     7ca:	ea4f 0232 	mov.w	r2, r2, rrx
     7ce:	ebb6 0e02 	subs.w	lr, r6, r2
     7d2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7d6:	bf22      	ittt	cs
     7d8:	1ab6      	subcs	r6, r6, r2
     7da:	4675      	movcs	r5, lr
     7dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     7e0:	085b      	lsrs	r3, r3, #1
     7e2:	ea4f 0232 	mov.w	r2, r2, rrx
     7e6:	ebb6 0e02 	subs.w	lr, r6, r2
     7ea:	eb75 0e03 	sbcs.w	lr, r5, r3
     7ee:	bf22      	ittt	cs
     7f0:	1ab6      	subcs	r6, r6, r2
     7f2:	4675      	movcs	r5, lr
     7f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     7f8:	ea55 0e06 	orrs.w	lr, r5, r6
     7fc:	d018      	beq.n	830 <_min_heap_size+0x30>
     7fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
     802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     806:	ea4f 1606 	mov.w	r6, r6, lsl #4
     80a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     80e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     81a:	d1c0      	bne.n	79e <__aeabi_ddiv+0x82>
     81c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     820:	d10b      	bne.n	83a <_min_heap_size+0x3a>
     822:	ea41 0100 	orr.w	r1, r1, r0
     826:	f04f 0000 	mov.w	r0, #0
     82a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     82e:	e7b6      	b.n	79e <__aeabi_ddiv+0x82>
     830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     834:	bf04      	itt	eq
     836:	4301      	orreq	r1, r0
     838:	2000      	moveq	r0, #0
     83a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     83e:	bf88      	it	hi
     840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     844:	f63f aeaf 	bhi.w	5a6 <__aeabi_dmul+0xde>
     848:	ebb5 0c03 	subs.w	ip, r5, r3
     84c:	bf04      	itt	eq
     84e:	ebb6 0c02 	subseq.w	ip, r6, r2
     852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     856:	f150 0000 	adcs.w	r0, r0, #0
     85a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     85e:	bd70      	pop	{r4, r5, r6, pc}
     860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     86c:	bfc2      	ittt	gt
     86e:	ebd4 050c 	rsbsgt	r5, r4, ip
     872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     876:	bd70      	popgt	{r4, r5, r6, pc}
     878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     87c:	f04f 0e00 	mov.w	lr, #0
     880:	3c01      	subs	r4, #1
     882:	e690      	b.n	5a6 <__aeabi_dmul+0xde>
     884:	ea45 0e06 	orr.w	lr, r5, r6
     888:	e68d      	b.n	5a6 <__aeabi_dmul+0xde>
     88a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     88e:	ea94 0f0c 	teq	r4, ip
     892:	bf08      	it	eq
     894:	ea95 0f0c 	teqeq	r5, ip
     898:	f43f af3b 	beq.w	712 <__aeabi_dmul+0x24a>
     89c:	ea94 0f0c 	teq	r4, ip
     8a0:	d10a      	bne.n	8b8 <_min_heap_size+0xb8>
     8a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     8a6:	f47f af34 	bne.w	712 <__aeabi_dmul+0x24a>
     8aa:	ea95 0f0c 	teq	r5, ip
     8ae:	f47f af25 	bne.w	6fc <__aeabi_dmul+0x234>
     8b2:	4610      	mov	r0, r2
     8b4:	4619      	mov	r1, r3
     8b6:	e72c      	b.n	712 <__aeabi_dmul+0x24a>
     8b8:	ea95 0f0c 	teq	r5, ip
     8bc:	d106      	bne.n	8cc <_min_heap_size+0xcc>
     8be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     8c2:	f43f aefd 	beq.w	6c0 <__aeabi_dmul+0x1f8>
     8c6:	4610      	mov	r0, r2
     8c8:	4619      	mov	r1, r3
     8ca:	e722      	b.n	712 <__aeabi_dmul+0x24a>
     8cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     8d0:	bf18      	it	ne
     8d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     8d6:	f47f aec5 	bne.w	664 <__aeabi_dmul+0x19c>
     8da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     8de:	f47f af0d 	bne.w	6fc <__aeabi_dmul+0x234>
     8e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     8e6:	f47f aeeb 	bne.w	6c0 <__aeabi_dmul+0x1f8>
     8ea:	e712      	b.n	712 <__aeabi_dmul+0x24a>

000008ec <__gedf2>:
     8ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
     8f0:	e006      	b.n	900 <__cmpdf2+0x4>
     8f2:	bf00      	nop

000008f4 <__ledf2>:
     8f4:	f04f 0c01 	mov.w	ip, #1
     8f8:	e002      	b.n	900 <__cmpdf2+0x4>
     8fa:	bf00      	nop

000008fc <__cmpdf2>:
     8fc:	f04f 0c01 	mov.w	ip, #1
     900:	f84d cd04 	str.w	ip, [sp, #-4]!
     904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     90c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     910:	bf18      	it	ne
     912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     916:	d01b      	beq.n	950 <__cmpdf2+0x54>
     918:	b001      	add	sp, #4
     91a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     91e:	bf0c      	ite	eq
     920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     924:	ea91 0f03 	teqne	r1, r3
     928:	bf02      	ittt	eq
     92a:	ea90 0f02 	teqeq	r0, r2
     92e:	2000      	moveq	r0, #0
     930:	4770      	bxeq	lr
     932:	f110 0f00 	cmn.w	r0, #0
     936:	ea91 0f03 	teq	r1, r3
     93a:	bf58      	it	pl
     93c:	4299      	cmppl	r1, r3
     93e:	bf08      	it	eq
     940:	4290      	cmpeq	r0, r2
     942:	bf2c      	ite	cs
     944:	17d8      	asrcs	r0, r3, #31
     946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     94a:	f040 0001 	orr.w	r0, r0, #1
     94e:	4770      	bx	lr
     950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     958:	d102      	bne.n	960 <__cmpdf2+0x64>
     95a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     95e:	d107      	bne.n	970 <__cmpdf2+0x74>
     960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     968:	d1d6      	bne.n	918 <__cmpdf2+0x1c>
     96a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     96e:	d0d3      	beq.n	918 <__cmpdf2+0x1c>
     970:	f85d 0b04 	ldr.w	r0, [sp], #4
     974:	4770      	bx	lr
     976:	bf00      	nop

00000978 <__aeabi_cdrcmple>:
     978:	4684      	mov	ip, r0
     97a:	4610      	mov	r0, r2
     97c:	4662      	mov	r2, ip
     97e:	468c      	mov	ip, r1
     980:	4619      	mov	r1, r3
     982:	4663      	mov	r3, ip
     984:	e000      	b.n	988 <__aeabi_cdcmpeq>
     986:	bf00      	nop

00000988 <__aeabi_cdcmpeq>:
     988:	b501      	push	{r0, lr}
     98a:	f7ff ffb7 	bl	8fc <__cmpdf2>
     98e:	2800      	cmp	r0, #0
     990:	bf48      	it	mi
     992:	f110 0f00 	cmnmi.w	r0, #0
     996:	bd01      	pop	{r0, pc}

00000998 <__aeabi_dcmpeq>:
     998:	f84d ed08 	str.w	lr, [sp, #-8]!
     99c:	f7ff fff4 	bl	988 <__aeabi_cdcmpeq>
     9a0:	bf0c      	ite	eq
     9a2:	2001      	moveq	r0, #1
     9a4:	2000      	movne	r0, #0
     9a6:	f85d fb08 	ldr.w	pc, [sp], #8
     9aa:	bf00      	nop

000009ac <__aeabi_dcmplt>:
     9ac:	f84d ed08 	str.w	lr, [sp, #-8]!
     9b0:	f7ff ffea 	bl	988 <__aeabi_cdcmpeq>
     9b4:	bf34      	ite	cc
     9b6:	2001      	movcc	r0, #1
     9b8:	2000      	movcs	r0, #0
     9ba:	f85d fb08 	ldr.w	pc, [sp], #8
     9be:	bf00      	nop

000009c0 <__aeabi_dcmple>:
     9c0:	f84d ed08 	str.w	lr, [sp, #-8]!
     9c4:	f7ff ffe0 	bl	988 <__aeabi_cdcmpeq>
     9c8:	bf94      	ite	ls
     9ca:	2001      	movls	r0, #1
     9cc:	2000      	movhi	r0, #0
     9ce:	f85d fb08 	ldr.w	pc, [sp], #8
     9d2:	bf00      	nop

000009d4 <__aeabi_dcmpge>:
     9d4:	f84d ed08 	str.w	lr, [sp, #-8]!
     9d8:	f7ff ffce 	bl	978 <__aeabi_cdrcmple>
     9dc:	bf94      	ite	ls
     9de:	2001      	movls	r0, #1
     9e0:	2000      	movhi	r0, #0
     9e2:	f85d fb08 	ldr.w	pc, [sp], #8
     9e6:	bf00      	nop

000009e8 <__aeabi_dcmpgt>:
     9e8:	f84d ed08 	str.w	lr, [sp, #-8]!
     9ec:	f7ff ffc4 	bl	978 <__aeabi_cdrcmple>
     9f0:	bf34      	ite	cc
     9f2:	2001      	movcc	r0, #1
     9f4:	2000      	movcs	r0, #0
     9f6:	f85d fb08 	ldr.w	pc, [sp], #8
     9fa:	bf00      	nop

000009fc <__aeabi_d2iz>:
     9fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
     a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     a04:	d215      	bcs.n	a32 <__aeabi_d2iz+0x36>
     a06:	d511      	bpl.n	a2c <__aeabi_d2iz+0x30>
     a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     a10:	d912      	bls.n	a38 <__aeabi_d2iz+0x3c>
     a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     a22:	fa23 f002 	lsr.w	r0, r3, r2
     a26:	bf18      	it	ne
     a28:	4240      	negne	r0, r0
     a2a:	4770      	bx	lr
     a2c:	f04f 0000 	mov.w	r0, #0
     a30:	4770      	bx	lr
     a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     a36:	d105      	bne.n	a44 <__aeabi_d2iz+0x48>
     a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     a3c:	bf08      	it	eq
     a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     a42:	4770      	bx	lr
     a44:	f04f 0000 	mov.w	r0, #0
     a48:	4770      	bx	lr
     a4a:	bf00      	nop

00000a4c <__aeabi_d2uiz>:
     a4c:	004a      	lsls	r2, r1, #1
     a4e:	d211      	bcs.n	a74 <__aeabi_d2uiz+0x28>
     a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     a54:	d211      	bcs.n	a7a <__aeabi_d2uiz+0x2e>
     a56:	d50d      	bpl.n	a74 <__aeabi_d2uiz+0x28>
     a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     a60:	d40e      	bmi.n	a80 <__aeabi_d2uiz+0x34>
     a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     a6e:	fa23 f002 	lsr.w	r0, r3, r2
     a72:	4770      	bx	lr
     a74:	f04f 0000 	mov.w	r0, #0
     a78:	4770      	bx	lr
     a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     a7e:	d102      	bne.n	a86 <__aeabi_d2uiz+0x3a>
     a80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     a84:	4770      	bx	lr
     a86:	f04f 0000 	mov.w	r0, #0
     a8a:	4770      	bx	lr

00000a8c <__aeabi_uldivmod>:
     a8c:	b953      	cbnz	r3, aa4 <__aeabi_uldivmod+0x18>
     a8e:	b94a      	cbnz	r2, aa4 <__aeabi_uldivmod+0x18>
     a90:	2900      	cmp	r1, #0
     a92:	bf08      	it	eq
     a94:	2800      	cmpeq	r0, #0
     a96:	bf1c      	itt	ne
     a98:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     a9c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     aa0:	f000 b974 	b.w	d8c <__aeabi_idiv0>
     aa4:	f1ad 0c08 	sub.w	ip, sp, #8
     aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     aac:	f000 f806 	bl	abc <__udivmoddi4>
     ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
     ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     ab8:	b004      	add	sp, #16
     aba:	4770      	bx	lr

00000abc <__udivmoddi4>:
     abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     ac0:	9e08      	ldr	r6, [sp, #32]
     ac2:	4604      	mov	r4, r0
     ac4:	4688      	mov	r8, r1
     ac6:	2b00      	cmp	r3, #0
     ac8:	f040 8085 	bne.w	bd6 <__udivmoddi4+0x11a>
     acc:	428a      	cmp	r2, r1
     ace:	4615      	mov	r5, r2
     ad0:	d948      	bls.n	b64 <__udivmoddi4+0xa8>
     ad2:	fab2 f282 	clz	r2, r2
     ad6:	b14a      	cbz	r2, aec <__udivmoddi4+0x30>
     ad8:	f1c2 0720 	rsb	r7, r2, #32
     adc:	fa01 f302 	lsl.w	r3, r1, r2
     ae0:	fa20 f707 	lsr.w	r7, r0, r7
     ae4:	4095      	lsls	r5, r2
     ae6:	ea47 0803 	orr.w	r8, r7, r3
     aea:	4094      	lsls	r4, r2
     aec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     af0:	0c23      	lsrs	r3, r4, #16
     af2:	fbb8 f7fe 	udiv	r7, r8, lr
     af6:	fa1f fc85 	uxth.w	ip, r5
     afa:	fb0e 8817 	mls	r8, lr, r7, r8
     afe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
     b02:	fb07 f10c 	mul.w	r1, r7, ip
     b06:	4299      	cmp	r1, r3
     b08:	d909      	bls.n	b1e <__udivmoddi4+0x62>
     b0a:	18eb      	adds	r3, r5, r3
     b0c:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
     b10:	f080 80e3 	bcs.w	cda <__udivmoddi4+0x21e>
     b14:	4299      	cmp	r1, r3
     b16:	f240 80e0 	bls.w	cda <__udivmoddi4+0x21e>
     b1a:	3f02      	subs	r7, #2
     b1c:	442b      	add	r3, r5
     b1e:	1a5b      	subs	r3, r3, r1
     b20:	b2a4      	uxth	r4, r4
     b22:	fbb3 f0fe 	udiv	r0, r3, lr
     b26:	fb0e 3310 	mls	r3, lr, r0, r3
     b2a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     b2e:	fb00 fc0c 	mul.w	ip, r0, ip
     b32:	45a4      	cmp	ip, r4
     b34:	d909      	bls.n	b4a <__udivmoddi4+0x8e>
     b36:	192c      	adds	r4, r5, r4
     b38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     b3c:	f080 80cb 	bcs.w	cd6 <__udivmoddi4+0x21a>
     b40:	45a4      	cmp	ip, r4
     b42:	f240 80c8 	bls.w	cd6 <__udivmoddi4+0x21a>
     b46:	3802      	subs	r0, #2
     b48:	442c      	add	r4, r5
     b4a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
     b4e:	eba4 040c 	sub.w	r4, r4, ip
     b52:	2700      	movs	r7, #0
     b54:	b11e      	cbz	r6, b5e <__udivmoddi4+0xa2>
     b56:	40d4      	lsrs	r4, r2
     b58:	2300      	movs	r3, #0
     b5a:	e9c6 4300 	strd	r4, r3, [r6]
     b5e:	4639      	mov	r1, r7
     b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     b64:	2a00      	cmp	r2, #0
     b66:	d053      	beq.n	c10 <__udivmoddi4+0x154>
     b68:	fab2 f282 	clz	r2, r2
     b6c:	2a00      	cmp	r2, #0
     b6e:	f040 80b6 	bne.w	cde <__udivmoddi4+0x222>
     b72:	1b49      	subs	r1, r1, r5
     b74:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     b78:	fa1f f885 	uxth.w	r8, r5
     b7c:	2701      	movs	r7, #1
     b7e:	fbb1 fcfe 	udiv	ip, r1, lr
     b82:	0c23      	lsrs	r3, r4, #16
     b84:	fb0e 111c 	mls	r1, lr, ip, r1
     b88:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     b8c:	fb08 f10c 	mul.w	r1, r8, ip
     b90:	4299      	cmp	r1, r3
     b92:	d907      	bls.n	ba4 <__udivmoddi4+0xe8>
     b94:	18eb      	adds	r3, r5, r3
     b96:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     b9a:	d202      	bcs.n	ba2 <__udivmoddi4+0xe6>
     b9c:	4299      	cmp	r1, r3
     b9e:	f200 80ec 	bhi.w	d7a <__udivmoddi4+0x2be>
     ba2:	4684      	mov	ip, r0
     ba4:	1a59      	subs	r1, r3, r1
     ba6:	b2a3      	uxth	r3, r4
     ba8:	fbb1 f0fe 	udiv	r0, r1, lr
     bac:	fb0e 1410 	mls	r4, lr, r0, r1
     bb0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
     bb4:	fb08 f800 	mul.w	r8, r8, r0
     bb8:	45a0      	cmp	r8, r4
     bba:	d907      	bls.n	bcc <__udivmoddi4+0x110>
     bbc:	192c      	adds	r4, r5, r4
     bbe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     bc2:	d202      	bcs.n	bca <__udivmoddi4+0x10e>
     bc4:	45a0      	cmp	r8, r4
     bc6:	f200 80dc 	bhi.w	d82 <__udivmoddi4+0x2c6>
     bca:	4618      	mov	r0, r3
     bcc:	eba4 0408 	sub.w	r4, r4, r8
     bd0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     bd4:	e7be      	b.n	b54 <__udivmoddi4+0x98>
     bd6:	428b      	cmp	r3, r1
     bd8:	d908      	bls.n	bec <__udivmoddi4+0x130>
     bda:	2e00      	cmp	r6, #0
     bdc:	d078      	beq.n	cd0 <__udivmoddi4+0x214>
     bde:	2700      	movs	r7, #0
     be0:	e9c6 0100 	strd	r0, r1, [r6]
     be4:	4638      	mov	r0, r7
     be6:	4639      	mov	r1, r7
     be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     bec:	fab3 f783 	clz	r7, r3
     bf0:	b97f      	cbnz	r7, c12 <__udivmoddi4+0x156>
     bf2:	428b      	cmp	r3, r1
     bf4:	d302      	bcc.n	bfc <__udivmoddi4+0x140>
     bf6:	4282      	cmp	r2, r0
     bf8:	f200 80bd 	bhi.w	d76 <__udivmoddi4+0x2ba>
     bfc:	1a84      	subs	r4, r0, r2
     bfe:	eb61 0303 	sbc.w	r3, r1, r3
     c02:	2001      	movs	r0, #1
     c04:	4698      	mov	r8, r3
     c06:	2e00      	cmp	r6, #0
     c08:	d0a9      	beq.n	b5e <__udivmoddi4+0xa2>
     c0a:	e9c6 4800 	strd	r4, r8, [r6]
     c0e:	e7a6      	b.n	b5e <__udivmoddi4+0xa2>
     c10:	deff      	udf	#255	; 0xff
     c12:	f1c7 0520 	rsb	r5, r7, #32
     c16:	40bb      	lsls	r3, r7
     c18:	fa22 fc05 	lsr.w	ip, r2, r5
     c1c:	ea4c 0c03 	orr.w	ip, ip, r3
     c20:	fa01 f407 	lsl.w	r4, r1, r7
     c24:	fa20 f805 	lsr.w	r8, r0, r5
     c28:	fa21 f305 	lsr.w	r3, r1, r5
     c2c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
     c30:	ea48 0404 	orr.w	r4, r8, r4
     c34:	fbb3 f9fe 	udiv	r9, r3, lr
     c38:	0c21      	lsrs	r1, r4, #16
     c3a:	fb0e 3319 	mls	r3, lr, r9, r3
     c3e:	fa1f f88c 	uxth.w	r8, ip
     c42:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     c46:	fb09 fa08 	mul.w	sl, r9, r8
     c4a:	459a      	cmp	sl, r3
     c4c:	fa02 f207 	lsl.w	r2, r2, r7
     c50:	fa00 f107 	lsl.w	r1, r0, r7
     c54:	d90b      	bls.n	c6e <__udivmoddi4+0x1b2>
     c56:	eb1c 0303 	adds.w	r3, ip, r3
     c5a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     c5e:	f080 8088 	bcs.w	d72 <__udivmoddi4+0x2b6>
     c62:	459a      	cmp	sl, r3
     c64:	f240 8085 	bls.w	d72 <__udivmoddi4+0x2b6>
     c68:	f1a9 0902 	sub.w	r9, r9, #2
     c6c:	4463      	add	r3, ip
     c6e:	eba3 030a 	sub.w	r3, r3, sl
     c72:	b2a4      	uxth	r4, r4
     c74:	fbb3 f0fe 	udiv	r0, r3, lr
     c78:	fb0e 3310 	mls	r3, lr, r0, r3
     c7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     c80:	fb00 f808 	mul.w	r8, r0, r8
     c84:	45a0      	cmp	r8, r4
     c86:	d908      	bls.n	c9a <__udivmoddi4+0x1de>
     c88:	eb1c 0404 	adds.w	r4, ip, r4
     c8c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     c90:	d26b      	bcs.n	d6a <__udivmoddi4+0x2ae>
     c92:	45a0      	cmp	r8, r4
     c94:	d969      	bls.n	d6a <__udivmoddi4+0x2ae>
     c96:	3802      	subs	r0, #2
     c98:	4464      	add	r4, ip
     c9a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     c9e:	eba4 0408 	sub.w	r4, r4, r8
     ca2:	fba0 8902 	umull	r8, r9, r0, r2
     ca6:	454c      	cmp	r4, r9
     ca8:	46c6      	mov	lr, r8
     caa:	464b      	mov	r3, r9
     cac:	d354      	bcc.n	d58 <__udivmoddi4+0x29c>
     cae:	d051      	beq.n	d54 <__udivmoddi4+0x298>
     cb0:	2e00      	cmp	r6, #0
     cb2:	d069      	beq.n	d88 <__udivmoddi4+0x2cc>
     cb4:	ebb1 020e 	subs.w	r2, r1, lr
     cb8:	eb64 0403 	sbc.w	r4, r4, r3
     cbc:	fa04 f505 	lsl.w	r5, r4, r5
     cc0:	fa22 f307 	lsr.w	r3, r2, r7
     cc4:	40fc      	lsrs	r4, r7
     cc6:	431d      	orrs	r5, r3
     cc8:	e9c6 5400 	strd	r5, r4, [r6]
     ccc:	2700      	movs	r7, #0
     cce:	e746      	b.n	b5e <__udivmoddi4+0xa2>
     cd0:	4637      	mov	r7, r6
     cd2:	4630      	mov	r0, r6
     cd4:	e743      	b.n	b5e <__udivmoddi4+0xa2>
     cd6:	4618      	mov	r0, r3
     cd8:	e737      	b.n	b4a <__udivmoddi4+0x8e>
     cda:	4607      	mov	r7, r0
     cdc:	e71f      	b.n	b1e <__udivmoddi4+0x62>
     cde:	f1c2 0320 	rsb	r3, r2, #32
     ce2:	fa20 f703 	lsr.w	r7, r0, r3
     ce6:	4095      	lsls	r5, r2
     ce8:	fa01 f002 	lsl.w	r0, r1, r2
     cec:	fa21 f303 	lsr.w	r3, r1, r3
     cf0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     cf4:	4338      	orrs	r0, r7
     cf6:	0c01      	lsrs	r1, r0, #16
     cf8:	fbb3 f7fe 	udiv	r7, r3, lr
     cfc:	fa1f f885 	uxth.w	r8, r5
     d00:	fb0e 3317 	mls	r3, lr, r7, r3
     d04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     d08:	fb07 f308 	mul.w	r3, r7, r8
     d0c:	428b      	cmp	r3, r1
     d0e:	fa04 f402 	lsl.w	r4, r4, r2
     d12:	d907      	bls.n	d24 <__udivmoddi4+0x268>
     d14:	1869      	adds	r1, r5, r1
     d16:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
     d1a:	d228      	bcs.n	d6e <__udivmoddi4+0x2b2>
     d1c:	428b      	cmp	r3, r1
     d1e:	d926      	bls.n	d6e <__udivmoddi4+0x2b2>
     d20:	3f02      	subs	r7, #2
     d22:	4429      	add	r1, r5
     d24:	1acb      	subs	r3, r1, r3
     d26:	b281      	uxth	r1, r0
     d28:	fbb3 f0fe 	udiv	r0, r3, lr
     d2c:	fb0e 3310 	mls	r3, lr, r0, r3
     d30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     d34:	fb00 f308 	mul.w	r3, r0, r8
     d38:	428b      	cmp	r3, r1
     d3a:	d907      	bls.n	d4c <__udivmoddi4+0x290>
     d3c:	1869      	adds	r1, r5, r1
     d3e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     d42:	d210      	bcs.n	d66 <__udivmoddi4+0x2aa>
     d44:	428b      	cmp	r3, r1
     d46:	d90e      	bls.n	d66 <__udivmoddi4+0x2aa>
     d48:	3802      	subs	r0, #2
     d4a:	4429      	add	r1, r5
     d4c:	1ac9      	subs	r1, r1, r3
     d4e:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
     d52:	e714      	b.n	b7e <__udivmoddi4+0xc2>
     d54:	4541      	cmp	r1, r8
     d56:	d2ab      	bcs.n	cb0 <__udivmoddi4+0x1f4>
     d58:	ebb8 0e02 	subs.w	lr, r8, r2
     d5c:	eb69 020c 	sbc.w	r2, r9, ip
     d60:	3801      	subs	r0, #1
     d62:	4613      	mov	r3, r2
     d64:	e7a4      	b.n	cb0 <__udivmoddi4+0x1f4>
     d66:	4660      	mov	r0, ip
     d68:	e7f0      	b.n	d4c <__udivmoddi4+0x290>
     d6a:	4618      	mov	r0, r3
     d6c:	e795      	b.n	c9a <__udivmoddi4+0x1de>
     d6e:	4667      	mov	r7, ip
     d70:	e7d8      	b.n	d24 <__udivmoddi4+0x268>
     d72:	4681      	mov	r9, r0
     d74:	e77b      	b.n	c6e <__udivmoddi4+0x1b2>
     d76:	4638      	mov	r0, r7
     d78:	e745      	b.n	c06 <__udivmoddi4+0x14a>
     d7a:	f1ac 0c02 	sub.w	ip, ip, #2
     d7e:	442b      	add	r3, r5
     d80:	e710      	b.n	ba4 <__udivmoddi4+0xe8>
     d82:	3802      	subs	r0, #2
     d84:	442c      	add	r4, r5
     d86:	e721      	b.n	bcc <__udivmoddi4+0x110>
     d88:	4637      	mov	r7, r6
     d8a:	e6e8      	b.n	b5e <__udivmoddi4+0xa2>

00000d8c <__aeabi_idiv0>:
     d8c:	4770      	bx	lr
     d8e:	bf00      	nop

00000d90 <cmu_update_clocks>:
    // LFE Clock
    CMU->LFECLKSEL = CMU_LFECLKSEL_LFE_ULFRCO;
}
void cmu_update_clocks()
{
    if((CMU->STATUS & CMU_STATUS_DPLLRDY) == CMU_STATUS_DPLLRDY)
     d90:	499d      	ldr	r1, [pc, #628]	; (1008 <cmu_update_clocks+0x278>)
     d92:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
     d96:	049b      	lsls	r3, r3, #18
{
     d98:	b530      	push	{r4, r5, lr}
    if((CMU->STATUS & CMU_STATUS_DPLLRDY) == CMU_STATUS_DPLLRDY)
     d9a:	d510      	bpl.n	dbe <cmu_update_clocks+0x2e>
    {
        uint32_t ulPLLMul = (((CMU->DPLLCTRL1 & _CMU_DPLLCTRL1_N_MASK) >> _CMU_DPLLCTRL1_N_SHIFT) + 1) / (((CMU->DPLLCTRL1 & _CMU_DPLLCTRL1_M_MASK) >> _CMU_DPLLCTRL1_M_SHIFT) + 1);
     d9c:	6c4b      	ldr	r3, [r1, #68]	; 0x44
     d9e:	6c4a      	ldr	r2, [r1, #68]	; 0x44
     da0:	f3c3 430b 	ubfx	r3, r3, #16, #12
     da4:	f3c2 020b 	ubfx	r2, r2, #0, #12
     da8:	3201      	adds	r2, #1
     daa:	3301      	adds	r3, #1
     dac:	fbb3 f3f2 	udiv	r3, r3, r2
    
        switch(CMU->DPLLCTRL & _CMU_DPLLCTRL_REFSEL_MASK)
     db0:	6c0a      	ldr	r2, [r1, #64]	; 0x40
     db2:	f002 0218 	and.w	r2, r2, #24
     db6:	2a08      	cmp	r2, #8
     db8:	d01f      	beq.n	dfa <cmu_update_clocks+0x6a>
     dba:	d813      	bhi.n	de4 <cmu_update_clocks+0x54>
     dbc:	b1d2      	cbz	r2, df4 <cmu_update_clocks+0x64>
                HFRCO_VALUE = 0 * ulPLLMul; // TODO: Support external clock
            break;
        }
    }

    AUX_CLOCK_FREQ = AUXHFRCO_VALUE;
     dbe:	4b93      	ldr	r3, [pc, #588]	; (100c <cmu_update_clocks+0x27c>)

    switch(CMU->HFCLKSTATUS & _CMU_HFCLKSTATUS_SELECTED_MASK)
     dc0:	4991      	ldr	r1, [pc, #580]	; (1008 <cmu_update_clocks+0x278>)
    AUX_CLOCK_FREQ = AUXHFRCO_VALUE;
     dc2:	6818      	ldr	r0, [r3, #0]
     dc4:	4b92      	ldr	r3, [pc, #584]	; (1010 <cmu_update_clocks+0x280>)
     dc6:	6018      	str	r0, [r3, #0]
    switch(CMU->HFCLKSTATUS & _CMU_HFCLKSTATUS_SELECTED_MASK)
     dc8:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
     dcc:	4b91      	ldr	r3, [pc, #580]	; (1014 <cmu_update_clocks+0x284>)
     dce:	f002 0207 	and.w	r2, r2, #7
     dd2:	3a01      	subs	r2, #1
     dd4:	2a06      	cmp	r2, #6
     dd6:	d81c      	bhi.n	e12 <cmu_update_clocks+0x82>
     dd8:	e8df f002 	tbb	[pc, r2]
     ddc:	7a781916 	.word	0x7a781916
     de0:	817d      	.short	0x817d
     de2:	83          	.byte	0x83
     de3:	00          	.byte	0x00
        switch(CMU->DPLLCTRL & _CMU_DPLLCTRL_REFSEL_MASK)
     de4:	2a10      	cmp	r2, #16
     de6:	d00c      	beq.n	e02 <cmu_update_clocks+0x72>
     de8:	2a18      	cmp	r2, #24
     dea:	d1e8      	bne.n	dbe <cmu_update_clocks+0x2e>
                HFRCO_VALUE = 0 * ulPLLMul; // TODO: Support external clock
     dec:	4b8a      	ldr	r3, [pc, #552]	; (1018 <cmu_update_clocks+0x288>)
     dee:	2200      	movs	r2, #0
     df0:	601a      	str	r2, [r3, #0]
            break;
     df2:	e7e4      	b.n	dbe <cmu_update_clocks+0x2e>
                HFRCO_VALUE = HFXO_VALUE * ulPLLMul;
     df4:	4a89      	ldr	r2, [pc, #548]	; (101c <cmu_update_clocks+0x28c>)
                HFRCO_VALUE = USHFRCO_VALUE * ulPLLMul;
     df6:	4353      	muls	r3, r2
     df8:	e000      	b.n	dfc <cmu_update_clocks+0x6c>
                HFRCO_VALUE = LFXO_VALUE * ulPLLMul;
     dfa:	03db      	lsls	r3, r3, #15
     dfc:	4a86      	ldr	r2, [pc, #536]	; (1018 <cmu_update_clocks+0x288>)
     dfe:	6013      	str	r3, [r2, #0]
            break;
     e00:	e7dd      	b.n	dbe <cmu_update_clocks+0x2e>
                HFRCO_VALUE = USHFRCO_VALUE * ulPLLMul;
     e02:	4a87      	ldr	r2, [pc, #540]	; (1020 <cmu_update_clocks+0x290>)
     e04:	6812      	ldr	r2, [r2, #0]
     e06:	e7f6      	b.n	df6 <cmu_update_clocks+0x66>
    {
        case CMU_HFCLKSTATUS_SELECTED_HFRCO:
            HFSRC_CLOCK_FREQ = HFRCO_VALUE;
     e08:	4a83      	ldr	r2, [pc, #524]	; (1018 <cmu_update_clocks+0x288>)
        break;
        case CMU_HFCLKSTATUS_SELECTED_HFRCODIV2:
            HFSRC_CLOCK_FREQ = HFRCO_VALUE >> 1;
        break;
        case CMU_HFCLKSTATUS_SELECTED_USHFRCO:
            HFSRC_CLOCK_FREQ = USHFRCO_VALUE;
     e0a:	6812      	ldr	r2, [r2, #0]
     e0c:	e000      	b.n	e10 <cmu_update_clocks+0x80>
            HFSRC_CLOCK_FREQ = HFXO_VALUE;
     e0e:	4a83      	ldr	r2, [pc, #524]	; (101c <cmu_update_clocks+0x28c>)
        break;
        case CMU_HFCLKSTATUS_SELECTED_CLKIN0:
            HFSRC_CLOCK_FREQ = 0; // TODO: Support external clock
     e10:	601a      	str	r2, [r3, #0]
        break;
    }

    HF_CLOCK_FREQ = HFSRC_CLOCK_FREQ / (((CMU->HFPRESC & _CMU_HFPRESC_PRESC_MASK) >> _CMU_HFPRESC_PRESC_SHIFT) + 1);
     e12:	681c      	ldr	r4, [r3, #0]
     e14:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
     e18:	4a82      	ldr	r2, [pc, #520]	; (1024 <cmu_update_clocks+0x294>)
     e1a:	f3c3 2304 	ubfx	r3, r3, #8, #5
     e1e:	3301      	adds	r3, #1
     e20:	fbb4 f3f3 	udiv	r3, r4, r3
     e24:	6013      	str	r3, [r2, #0]

    switch(CMU->HFPRESC & _CMU_HFPRESC_HFCLKLEPRESC_MASK)
     e26:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
     e2a:	f002 7240 	and.w	r2, r2, #50331648	; 0x3000000
     e2e:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
     e32:	d058      	beq.n	ee6 <cmu_update_clocks+0x156>
     e34:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
     e38:	d057      	beq.n	eea <cmu_update_clocks+0x15a>
     e3a:	b912      	cbnz	r2, e42 <cmu_update_clocks+0xb2>
    {
        case CMU_HFPRESC_HFCLKLEPRESC_DIV2:
            HFLE_CLOCK_FREQ = HF_CLOCK_FREQ >> 1;
     e3c:	085a      	lsrs	r2, r3, #1
        break;
        case CMU_HFPRESC_HFCLKLEPRESC_DIV4:
            HFLE_CLOCK_FREQ = HF_CLOCK_FREQ >> 2;
        break;
        case CMU_HFPRESC_HFCLKLEPRESC_DIV8:
            HFLE_CLOCK_FREQ = HF_CLOCK_FREQ >> 3;
     e3e:	497a      	ldr	r1, [pc, #488]	; (1028 <cmu_update_clocks+0x298>)
     e40:	600a      	str	r2, [r1, #0]
        break;
    }

    HFBUS_CLOCK_FREQ = HF_CLOCK_FREQ / (((CMU->HFBUSPRESC & _CMU_HFBUSPRESC_PRESC_MASK) >> _CMU_HFBUSPRESC_PRESC_SHIFT) + 1);
     e42:	4a71      	ldr	r2, [pc, #452]	; (1008 <cmu_update_clocks+0x278>)
     e44:	4d79      	ldr	r5, [pc, #484]	; (102c <cmu_update_clocks+0x29c>)
     e46:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
     e4a:	f3c1 2108 	ubfx	r1, r1, #8, #9
     e4e:	3101      	adds	r1, #1
     e50:	fbb3 f1f1 	udiv	r1, r3, r1
     e54:	6029      	str	r1, [r5, #0]
    HFCORE_CLOCK_FREQ = HF_CLOCK_FREQ / (((CMU->HFCOREPRESC & _CMU_HFCOREPRESC_PRESC_MASK) >> _CMU_HFCOREPRESC_PRESC_SHIFT) + 1);
     e56:	f8d2 1108 	ldr.w	r1, [r2, #264]	; 0x108
     e5a:	4d75      	ldr	r5, [pc, #468]	; (1030 <cmu_update_clocks+0x2a0>)
     e5c:	f3c1 2108 	ubfx	r1, r1, #8, #9
     e60:	3101      	adds	r1, #1
     e62:	fbb3 f1f1 	udiv	r1, r3, r1
     e66:	6029      	str	r1, [r5, #0]
    HFEXP_CLOCK_FREQ = HF_CLOCK_FREQ / (((CMU->HFEXPPRESC & _CMU_HFEXPPRESC_PRESC_MASK) >> _CMU_HFEXPPRESC_PRESC_SHIFT) + 1);
     e68:	f8d2 1114 	ldr.w	r1, [r2, #276]	; 0x114
     e6c:	4d71      	ldr	r5, [pc, #452]	; (1034 <cmu_update_clocks+0x2a4>)
     e6e:	f3c1 2104 	ubfx	r1, r1, #8, #5
     e72:	3101      	adds	r1, #1
     e74:	fbb3 f1f1 	udiv	r1, r3, r1
     e78:	6029      	str	r1, [r5, #0]
    HFPER_CLOCK_FREQ = HF_CLOCK_FREQ / (((CMU->HFPERPRESC & _CMU_HFPERPRESC_PRESC_MASK) >> _CMU_HFPERPRESC_PRESC_SHIFT) + 1);
     e7a:	f8d2 110c 	ldr.w	r1, [r2, #268]	; 0x10c
     e7e:	4d6e      	ldr	r5, [pc, #440]	; (1038 <cmu_update_clocks+0x2a8>)
     e80:	f3c1 2108 	ubfx	r1, r1, #8, #9
     e84:	3101      	adds	r1, #1
     e86:	fbb3 f1f1 	udiv	r1, r3, r1
     e8a:	6029      	str	r1, [r5, #0]
    HFPERB_CLOCK_FREQ = HF_CLOCK_FREQ / (((CMU->HFPERPRESCB & _CMU_HFPERPRESCB_PRESC_MASK) >> _CMU_HFPERPRESCB_PRESC_SHIFT) + 1);
     e8c:	f8d2 1118 	ldr.w	r1, [r2, #280]	; 0x118
     e90:	4d6a      	ldr	r5, [pc, #424]	; (103c <cmu_update_clocks+0x2ac>)
     e92:	f3c1 2108 	ubfx	r1, r1, #8, #9
     e96:	3101      	adds	r1, #1
     e98:	fbb3 f1f1 	udiv	r1, r3, r1
     e9c:	6029      	str	r1, [r5, #0]
    HFPERC_CLOCK_FREQ = HF_CLOCK_FREQ / (((CMU->HFPERPRESCC & _CMU_HFPERPRESCC_PRESC_MASK) >> _CMU_HFPERPRESCC_PRESC_SHIFT) + 1);
     e9e:	f8d2 111c 	ldr.w	r1, [r2, #284]	; 0x11c
     ea2:	4d67      	ldr	r5, [pc, #412]	; (1040 <cmu_update_clocks+0x2b0>)
     ea4:	f3c1 2108 	ubfx	r1, r1, #8, #9
     ea8:	3101      	adds	r1, #1
     eaa:	fbb3 f1f1 	udiv	r1, r3, r1
     eae:	6029      	str	r1, [r5, #0]

    switch(CMU->SDIOCTRL & _CMU_SDIOCTRL_SDIOCLKSEL_MASK)
     eb0:	f8d2 1160 	ldr.w	r1, [r2, #352]	; 0x160
     eb4:	4d63      	ldr	r5, [pc, #396]	; (1044 <cmu_update_clocks+0x2b4>)
     eb6:	f001 0103 	and.w	r1, r1, #3
     eba:	2902      	cmp	r1, #2
     ebc:	d01a      	beq.n	ef4 <cmu_update_clocks+0x164>
     ebe:	2903      	cmp	r1, #3
     ec0:	d027      	beq.n	f12 <cmu_update_clocks+0x182>
     ec2:	2901      	cmp	r1, #1
     ec4:	d013      	beq.n	eee <cmu_update_clocks+0x15e>
    {
        case CMU_SDIOCTRL_SDIOCLKSEL_HFRCO:
            SDIO_CLOCK_FREQ = HFRCO_VALUE;
     ec6:	4954      	ldr	r1, [pc, #336]	; (1018 <cmu_update_clocks+0x288>)
        break;
        case CMU_SDIOCTRL_SDIOCLKSEL_AUXHFRCO:
            SDIO_CLOCK_FREQ = AUX_CLOCK_FREQ;
        break;
        case CMU_SDIOCTRL_SDIOCLKSEL_USHFRCO:
            SDIO_CLOCK_FREQ = USHFRCO_VALUE;
     ec8:	6809      	ldr	r1, [r1, #0]
     eca:	e011      	b.n	ef0 <cmu_update_clocks+0x160>
            HFSRC_CLOCK_FREQ = LFRCO_VALUE;
     ecc:	4a5e      	ldr	r2, [pc, #376]	; (1048 <cmu_update_clocks+0x2b8>)
     ece:	e79c      	b.n	e0a <cmu_update_clocks+0x7a>
            HFSRC_CLOCK_FREQ = LFXO_VALUE;
     ed0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
     ed4:	e79c      	b.n	e10 <cmu_update_clocks+0x80>
            HFSRC_CLOCK_FREQ = HFRCO_VALUE >> 1;
     ed6:	4a50      	ldr	r2, [pc, #320]	; (1018 <cmu_update_clocks+0x288>)
     ed8:	6812      	ldr	r2, [r2, #0]
     eda:	0852      	lsrs	r2, r2, #1
     edc:	e798      	b.n	e10 <cmu_update_clocks+0x80>
            HFSRC_CLOCK_FREQ = USHFRCO_VALUE;
     ede:	4a50      	ldr	r2, [pc, #320]	; (1020 <cmu_update_clocks+0x290>)
     ee0:	e793      	b.n	e0a <cmu_update_clocks+0x7a>
            HFSRC_CLOCK_FREQ = 0; // TODO: Support external clock
     ee2:	2200      	movs	r2, #0
     ee4:	e794      	b.n	e10 <cmu_update_clocks+0x80>
            HFLE_CLOCK_FREQ = HF_CLOCK_FREQ >> 2;
     ee6:	089a      	lsrs	r2, r3, #2
     ee8:	e7a9      	b.n	e3e <cmu_update_clocks+0xae>
            HFLE_CLOCK_FREQ = HF_CLOCK_FREQ >> 3;
     eea:	08da      	lsrs	r2, r3, #3
     eec:	e7a7      	b.n	e3e <cmu_update_clocks+0xae>
            SDIO_CLOCK_FREQ = HFXO_VALUE;
     eee:	494b      	ldr	r1, [pc, #300]	; (101c <cmu_update_clocks+0x28c>)
            SDIO_CLOCK_FREQ = USHFRCO_VALUE;
     ef0:	6029      	str	r1, [r5, #0]
        break;
     ef2:	e000      	b.n	ef6 <cmu_update_clocks+0x166>
            SDIO_CLOCK_FREQ = AUX_CLOCK_FREQ;
     ef4:	6028      	str	r0, [r5, #0]
    }

    switch(CMU->QSPICTRL & _CMU_QSPICTRL_QSPI0CLKSEL_MASK)
     ef6:	f8d2 2164 	ldr.w	r2, [r2, #356]	; 0x164
     efa:	4954      	ldr	r1, [pc, #336]	; (104c <cmu_update_clocks+0x2bc>)
     efc:	f002 0203 	and.w	r2, r2, #3
     f00:	2a02      	cmp	r2, #2
     f02:	d00b      	beq.n	f1c <cmu_update_clocks+0x18c>
     f04:	2a03      	cmp	r2, #3
     f06:	d016      	beq.n	f36 <cmu_update_clocks+0x1a6>
     f08:	2a01      	cmp	r2, #1
     f0a:	d004      	beq.n	f16 <cmu_update_clocks+0x186>
    {
        case CMU_QSPICTRL_QSPI0CLKSEL_HFRCO:
            QSPI_CLOCK_FREQ = HFRCO_VALUE;
     f0c:	4a42      	ldr	r2, [pc, #264]	; (1018 <cmu_update_clocks+0x288>)
        break;
        case CMU_QSPICTRL_QSPI0CLKSEL_AUXHFRCO:
            QSPI_CLOCK_FREQ = AUX_CLOCK_FREQ;
        break;
        case CMU_QSPICTRL_QSPI0CLKSEL_USHFRCO:
            QSPI_CLOCK_FREQ = USHFRCO_VALUE;
     f0e:	6812      	ldr	r2, [r2, #0]
     f10:	e002      	b.n	f18 <cmu_update_clocks+0x188>
            SDIO_CLOCK_FREQ = USHFRCO_VALUE;
     f12:	4943      	ldr	r1, [pc, #268]	; (1020 <cmu_update_clocks+0x290>)
     f14:	e7d8      	b.n	ec8 <cmu_update_clocks+0x138>
            QSPI_CLOCK_FREQ = HFXO_VALUE;
     f16:	4a41      	ldr	r2, [pc, #260]	; (101c <cmu_update_clocks+0x28c>)
            QSPI_CLOCK_FREQ = USHFRCO_VALUE;
     f18:	600a      	str	r2, [r1, #0]
        break;
     f1a:	e000      	b.n	f1e <cmu_update_clocks+0x18e>
            QSPI_CLOCK_FREQ = AUX_CLOCK_FREQ;
     f1c:	6008      	str	r0, [r1, #0]
    }

    switch(CMU->USBCTRL & _CMU_USBCTRL_USBCLKSEL_MASK)
     f1e:	4a3a      	ldr	r2, [pc, #232]	; (1008 <cmu_update_clocks+0x278>)
     f20:	f8d2 11f0 	ldr.w	r1, [r2, #496]	; 0x1f0
     f24:	f001 0107 	and.w	r1, r1, #7
     f28:	2905      	cmp	r1, #5
     f2a:	d814      	bhi.n	f56 <cmu_update_clocks+0x1c6>
     f2c:	e8df f001 	tbb	[pc, r1]
     f30:	520c0905 	.word	0x520c0905
     f34:	5854      	.short	0x5854
            QSPI_CLOCK_FREQ = USHFRCO_VALUE;
     f36:	4a3a      	ldr	r2, [pc, #232]	; (1020 <cmu_update_clocks+0x290>)
     f38:	e7e9      	b.n	f0e <cmu_update_clocks+0x17e>
    {
        case CMU_USBCTRL_USBCLKSEL_USHFRCO:
            USB_CLOCK_FREQ = USHFRCO_VALUE;
     f3a:	4a39      	ldr	r2, [pc, #228]	; (1020 <cmu_update_clocks+0x290>)
        break;
        case CMU_USBCTRL_USBCLKSEL_LFXO:
            USB_CLOCK_FREQ = LFXO_VALUE;
        break;
        case CMU_USBCTRL_USBCLKSEL_LFRCO:
            USB_CLOCK_FREQ = LFRCO_VALUE;
     f3c:	6811      	ldr	r1, [r2, #0]
     f3e:	4a44      	ldr	r2, [pc, #272]	; (1050 <cmu_update_clocks+0x2c0>)
     f40:	e008      	b.n	f54 <cmu_update_clocks+0x1c4>
            USB_CLOCK_FREQ = HFXO_VALUE;
     f42:	4a43      	ldr	r2, [pc, #268]	; (1050 <cmu_update_clocks+0x2c0>)
                USB_CLOCK_FREQ = HFXO_VALUE;
     f44:	4935      	ldr	r1, [pc, #212]	; (101c <cmu_update_clocks+0x28c>)
     f46:	e005      	b.n	f54 <cmu_update_clocks+0x1c4>
            if(CMU->HFXOCTRL & CMU_HFXOCTRL_HFXOX2EN)
     f48:	6a52      	ldr	r2, [r2, #36]	; 0x24
     f4a:	f012 0f08 	tst.w	r2, #8
     f4e:	4a40      	ldr	r2, [pc, #256]	; (1050 <cmu_update_clocks+0x2c0>)
     f50:	d0f8      	beq.n	f44 <cmu_update_clocks+0x1b4>
                USB_CLOCK_FREQ = HFXO_VALUE << 1;
     f52:	4940      	ldr	r1, [pc, #256]	; (1054 <cmu_update_clocks+0x2c4>)
            USB_CLOCK_FREQ = LFRCO_VALUE;
     f54:	6011      	str	r1, [r2, #0]
        break;
    }

    switch(CMU->DBGCLKSEL & _CMU_DBGCLKSEL_DBG_MASK)
     f56:	4a2c      	ldr	r2, [pc, #176]	; (1008 <cmu_update_clocks+0x278>)
     f58:	6f12      	ldr	r2, [r2, #112]	; 0x70
     f5a:	f002 0203 	and.w	r2, r2, #3
     f5e:	2a01      	cmp	r2, #1
     f60:	d046      	beq.n	ff0 <cmu_update_clocks+0x260>
     f62:	2a00      	cmp	r2, #0
     f64:	d03e      	beq.n	fe4 <cmu_update_clocks+0x254>
     f66:	2a02      	cmp	r2, #2
     f68:	d03f      	beq.n	fea <cmu_update_clocks+0x25a>
        case CMU_DBGCLKSEL_DBG_HFRCODIV2:
            DBG_CLOCK_FREQ = HFRCO_VALUE >> 1;
        break;
    }

    switch(CMU->ADCCTRL & _CMU_ADCCTRL_ADC0CLKSEL_MASK)
     f6a:	4927      	ldr	r1, [pc, #156]	; (1008 <cmu_update_clocks+0x278>)
     f6c:	4a3a      	ldr	r2, [pc, #232]	; (1058 <cmu_update_clocks+0x2c8>)
     f6e:	f8d1 315c 	ldr.w	r3, [r1, #348]	; 0x15c
     f72:	f003 0330 	and.w	r3, r3, #48	; 0x30
     f76:	2b10      	cmp	r3, #16
     f78:	d043      	beq.n	1002 <cmu_update_clocks+0x272>
     f7a:	d83c      	bhi.n	ff6 <cmu_update_clocks+0x266>
     f7c:	2b00      	cmp	r3, #0
     f7e:	d074      	beq.n	106a <cmu_update_clocks+0x2da>
        case CMU_ADCCTRL_ADC0CLKSEL_HFSRCCLK:
            ADC0_CLOCK_FREQ = HFSRC_CLOCK_FREQ;
        break;
    }

    ADC0_CLOCK_FREQ /= (((CMU->ADCCTRL & _CMU_ADCCTRL_ADC0CLKDIV_MASK) >> _CMU_ADCCTRL_ADC0CLKDIV_SHIFT) + 1);
     f80:	f8d1 315c 	ldr.w	r3, [r1, #348]	; 0x15c
     f84:	6815      	ldr	r5, [r2, #0]
     f86:	f003 0303 	and.w	r3, r3, #3
     f8a:	3301      	adds	r3, #1
     f8c:	fbb5 f3f3 	udiv	r3, r5, r3
     f90:	6013      	str	r3, [r2, #0]

    switch(CMU->ADCCTRL & _CMU_ADCCTRL_ADC1CLKSEL_MASK)
     f92:	f8d1 315c 	ldr.w	r3, [r1, #348]	; 0x15c
     f96:	4a31      	ldr	r2, [pc, #196]	; (105c <cmu_update_clocks+0x2cc>)
     f98:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
     f9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
     fa0:	d06d      	beq.n	107e <cmu_update_clocks+0x2ee>
     fa2:	d864      	bhi.n	106e <cmu_update_clocks+0x2de>
     fa4:	2b00      	cmp	r3, #0
     fa6:	d06d      	beq.n	1084 <cmu_update_clocks+0x2f4>
        case CMU_ADCCTRL_ADC1CLKSEL_HFSRCCLK:
            ADC1_CLOCK_FREQ = HFSRC_CLOCK_FREQ;
        break;
    }

    ADC1_CLOCK_FREQ /= (((CMU->ADCCTRL & _CMU_ADCCTRL_ADC1CLKDIV_MASK) >> _CMU_ADCCTRL_ADC1CLKDIV_SHIFT) + 1);
     fa8:	4b17      	ldr	r3, [pc, #92]	; (1008 <cmu_update_clocks+0x278>)
     faa:	6810      	ldr	r0, [r2, #0]
     fac:	f8d3 115c 	ldr.w	r1, [r3, #348]	; 0x15c
     fb0:	f3c1 4101 	ubfx	r1, r1, #16, #2
     fb4:	3101      	adds	r1, #1
     fb6:	fbb0 f1f1 	udiv	r1, r0, r1
     fba:	6011      	str	r1, [r2, #0]

    switch(CMU->LFACLKSEL & _CMU_LFACLKSEL_LFA_MASK)
     fbc:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
     fc0:	4a27      	ldr	r2, [pc, #156]	; (1060 <cmu_update_clocks+0x2d0>)
     fc2:	f001 0107 	and.w	r1, r1, #7
     fc6:	2904      	cmp	r1, #4
     fc8:	d860      	bhi.n	108c <cmu_update_clocks+0x2fc>
     fca:	e8df f001 	tbb	[pc, r1]
     fce:	935d      	.short	0x935d
     fd0:	5f96      	.short	0x5f96
     fd2:	99          	.byte	0x99
     fd3:	00          	.byte	0x00
            USB_CLOCK_FREQ = HFRCO_VALUE;
     fd4:	4a10      	ldr	r2, [pc, #64]	; (1018 <cmu_update_clocks+0x288>)
     fd6:	e7b1      	b.n	f3c <cmu_update_clocks+0x1ac>
            USB_CLOCK_FREQ = LFXO_VALUE;
     fd8:	4a1d      	ldr	r2, [pc, #116]	; (1050 <cmu_update_clocks+0x2c0>)
     fda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     fde:	e7b9      	b.n	f54 <cmu_update_clocks+0x1c4>
            USB_CLOCK_FREQ = LFRCO_VALUE;
     fe0:	4a19      	ldr	r2, [pc, #100]	; (1048 <cmu_update_clocks+0x2b8>)
     fe2:	e7ab      	b.n	f3c <cmu_update_clocks+0x1ac>
            DBG_CLOCK_FREQ = AUX_CLOCK_FREQ;
     fe4:	4b1f      	ldr	r3, [pc, #124]	; (1064 <cmu_update_clocks+0x2d4>)
     fe6:	6018      	str	r0, [r3, #0]
        break;
     fe8:	e7bf      	b.n	f6a <cmu_update_clocks+0x1da>
            DBG_CLOCK_FREQ = HFRCO_VALUE >> 1;
     fea:	4b0b      	ldr	r3, [pc, #44]	; (1018 <cmu_update_clocks+0x288>)
     fec:	681b      	ldr	r3, [r3, #0]
     fee:	085b      	lsrs	r3, r3, #1
     ff0:	4a1c      	ldr	r2, [pc, #112]	; (1064 <cmu_update_clocks+0x2d4>)
     ff2:	6013      	str	r3, [r2, #0]
        break;
     ff4:	e7b9      	b.n	f6a <cmu_update_clocks+0x1da>
    switch(CMU->ADCCTRL & _CMU_ADCCTRL_ADC0CLKSEL_MASK)
     ff6:	2b20      	cmp	r3, #32
     ff8:	d036      	beq.n	1068 <cmu_update_clocks+0x2d8>
     ffa:	2b30      	cmp	r3, #48	; 0x30
     ffc:	d1c0      	bne.n	f80 <cmu_update_clocks+0x1f0>
            ADC0_CLOCK_FREQ = HFSRC_CLOCK_FREQ;
     ffe:	6014      	str	r4, [r2, #0]
        break;
    1000:	e7be      	b.n	f80 <cmu_update_clocks+0x1f0>
            ADC0_CLOCK_FREQ = AUX_CLOCK_FREQ;
    1002:	6010      	str	r0, [r2, #0]
        break;
    1004:	e7bc      	b.n	f80 <cmu_update_clocks+0x1f0>
    1006:	bf00      	nop
    1008:	400e4000 	.word	0x400e4000
    100c:	20000000 	.word	0x20000000
    1010:	200000f0 	.word	0x200000f0
    1014:	200000d4 	.word	0x200000d4
    1018:	20000004 	.word	0x20000004
    101c:	007a1200 	.word	0x007a1200
    1020:	20000010 	.word	0x20000010
    1024:	200000fc 	.word	0x200000fc
    1028:	200000ac 	.word	0x200000ac
    102c:	200000d8 	.word	0x200000d8
    1030:	200000c0 	.word	0x200000c0
    1034:	200000e4 	.word	0x200000e4
    1038:	200000f4 	.word	0x200000f4
    103c:	200000e8 	.word	0x200000e8
    1040:	200000e0 	.word	0x200000e0
    1044:	200000f8 	.word	0x200000f8
    1048:	20000008 	.word	0x20000008
    104c:	200000dc 	.word	0x200000dc
    1050:	200000a0 	.word	0x200000a0
    1054:	00f42400 	.word	0x00f42400
    1058:	200000b8 	.word	0x200000b8
    105c:	200000c4 	.word	0x200000c4
    1060:	200000a8 	.word	0x200000a8
    1064:	20000110 	.word	0x20000110
            ADC0_CLOCK_FREQ = HFXO_VALUE;
    1068:	4b59      	ldr	r3, [pc, #356]	; (11d0 <cmu_update_clocks+0x440>)
    106a:	6013      	str	r3, [r2, #0]
        break;
    106c:	e788      	b.n	f80 <cmu_update_clocks+0x1f0>
    switch(CMU->ADCCTRL & _CMU_ADCCTRL_ADC1CLKSEL_MASK)
    106e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    1072:	d006      	beq.n	1082 <cmu_update_clocks+0x2f2>
    1074:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    1078:	d196      	bne.n	fa8 <cmu_update_clocks+0x218>
            ADC1_CLOCK_FREQ = HFSRC_CLOCK_FREQ;
    107a:	6014      	str	r4, [r2, #0]
        break;
    107c:	e794      	b.n	fa8 <cmu_update_clocks+0x218>
            ADC1_CLOCK_FREQ = AUX_CLOCK_FREQ;
    107e:	6010      	str	r0, [r2, #0]
        break;
    1080:	e792      	b.n	fa8 <cmu_update_clocks+0x218>
            ADC1_CLOCK_FREQ = HFXO_VALUE;
    1082:	4b53      	ldr	r3, [pc, #332]	; (11d0 <cmu_update_clocks+0x440>)
    1084:	6013      	str	r3, [r2, #0]
        break;
    1086:	e78f      	b.n	fa8 <cmu_update_clocks+0x218>
    {
        case CMU_LFACLKSEL_LFA_DISABLED:
            LFA_CLOCK_FREQ = 0;
    1088:	2100      	movs	r1, #0
        break;
        case CMU_LFACLKSEL_LFA_LFXO:
            LFA_CLOCK_FREQ = LFXO_VALUE;
        break;
        case CMU_LFACLKSEL_LFA_ULFRCO:
            LFA_CLOCK_FREQ = ULFRCO_VALUE;
    108a:	6011      	str	r1, [r2, #0]
        break;
    }

    LESENSE_CLOCK_FREQ = LFA_CLOCK_FREQ << ((CMU->LFAPRESC0 & _CMU_LFAPRESC0_LESENSE_MASK) >> _CMU_LFAPRESC0_LESENSE_SHIFT);
    108c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    1090:	6812      	ldr	r2, [r2, #0]
    1092:	4850      	ldr	r0, [pc, #320]	; (11d4 <cmu_update_clocks+0x444>)
    1094:	f3c1 2101 	ubfx	r1, r1, #8, #2
    1098:	fa02 f101 	lsl.w	r1, r2, r1
    109c:	6001      	str	r1, [r0, #0]
    RTC_CLOCK_FREQ = LFA_CLOCK_FREQ << ((CMU->LFAPRESC0 & _CMU_LFAPRESC0_RTC_MASK) >> _CMU_LFAPRESC0_RTC_SHIFT);
    109e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    10a2:	484d      	ldr	r0, [pc, #308]	; (11d8 <cmu_update_clocks+0x448>)
    10a4:	f3c1 4103 	ubfx	r1, r1, #16, #4
    10a8:	fa02 f101 	lsl.w	r1, r2, r1
    10ac:	6001      	str	r1, [r0, #0]
    LCD_CLOCK_FREQ = LFA_CLOCK_FREQ << ((CMU->LFAPRESC0 & _CMU_LFAPRESC0_LCD_MASK) >> _CMU_LFAPRESC0_LCD_SHIFT);
    10ae:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    10b2:	484a      	ldr	r0, [pc, #296]	; (11dc <cmu_update_clocks+0x44c>)
    10b4:	f3c1 3102 	ubfx	r1, r1, #12, #3
    10b8:	fa02 f101 	lsl.w	r1, r2, r1
    10bc:	6001      	str	r1, [r0, #0]
    LETIMER0_CLOCK_FREQ = LFA_CLOCK_FREQ << ((CMU->LFAPRESC0 & _CMU_LFAPRESC0_LETIMER0_MASK) >> _CMU_LFAPRESC0_LETIMER0_SHIFT);
    10be:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    10c2:	4847      	ldr	r0, [pc, #284]	; (11e0 <cmu_update_clocks+0x450>)
    10c4:	f001 010f 	and.w	r1, r1, #15
    10c8:	fa02 f101 	lsl.w	r1, r2, r1
    10cc:	6001      	str	r1, [r0, #0]
    LETIMER1_CLOCK_FREQ = LFA_CLOCK_FREQ << ((CMU->LFAPRESC0 & _CMU_LFAPRESC0_LETIMER1_MASK) >> _CMU_LFAPRESC0_LETIMER1_SHIFT);
    10ce:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    10d2:	f3c1 1103 	ubfx	r1, r1, #4, #4
    10d6:	408a      	lsls	r2, r1
    10d8:	4942      	ldr	r1, [pc, #264]	; (11e4 <cmu_update_clocks+0x454>)
    10da:	600a      	str	r2, [r1, #0]

    switch(CMU->LFBCLKSEL & _CMU_LFBCLKSEL_LFB_MASK)
    10dc:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
    10e0:	4b41      	ldr	r3, [pc, #260]	; (11e8 <cmu_update_clocks+0x458>)
    10e2:	f002 0207 	and.w	r2, r2, #7
    10e6:	2a04      	cmp	r2, #4
    10e8:	d80e      	bhi.n	1108 <cmu_update_clocks+0x378>
    10ea:	e8df f002 	tbb	[pc, r2]
    10ee:	3a0b      	.short	0x3a0b
    10f0:	403d      	.short	0x403d
    10f2:	42          	.byte	0x42
    10f3:	00          	.byte	0x00
            LFA_CLOCK_FREQ = LFRCO_VALUE;
    10f4:	493d      	ldr	r1, [pc, #244]	; (11ec <cmu_update_clocks+0x45c>)
            LFA_CLOCK_FREQ = ULFRCO_VALUE;
    10f6:	6809      	ldr	r1, [r1, #0]
    10f8:	e7c7      	b.n	108a <cmu_update_clocks+0x2fa>
            LFA_CLOCK_FREQ = LFXO_VALUE;
    10fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    10fe:	e7c4      	b.n	108a <cmu_update_clocks+0x2fa>
            LFA_CLOCK_FREQ = ULFRCO_VALUE;
    1100:	493b      	ldr	r1, [pc, #236]	; (11f0 <cmu_update_clocks+0x460>)
    1102:	e7f8      	b.n	10f6 <cmu_update_clocks+0x366>
    {
        case CMU_LFBCLKSEL_LFB_DISABLED:
            LFB_CLOCK_FREQ = 0;
    1104:	2200      	movs	r2, #0
        break;
        case CMU_LFBCLKSEL_LFB_HFCLKLE:
            LFB_CLOCK_FREQ = HFLE_CLOCK_FREQ;
        break;
        case CMU_LFBCLKSEL_LFB_ULFRCO:
            LFB_CLOCK_FREQ = ULFRCO_VALUE;
    1106:	601a      	str	r2, [r3, #0]
        break;
    }

    LEUART0_CLOCK_FREQ = LFB_CLOCK_FREQ << ((CMU->LFBPRESC0 & _CMU_LFBPRESC0_LEUART0_MASK) >> _CMU_LFBPRESC0_LEUART0_SHIFT);
    1108:	681a      	ldr	r2, [r3, #0]
    110a:	4b3a      	ldr	r3, [pc, #232]	; (11f4 <cmu_update_clocks+0x464>)
    110c:	483a      	ldr	r0, [pc, #232]	; (11f8 <cmu_update_clocks+0x468>)
    110e:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
    1112:	f001 0103 	and.w	r1, r1, #3
    1116:	fa02 f101 	lsl.w	r1, r2, r1
    111a:	6001      	str	r1, [r0, #0]
    LEUART1_CLOCK_FREQ = LFB_CLOCK_FREQ << ((CMU->LFBPRESC0 & _CMU_LFBPRESC0_LEUART1_MASK) >> _CMU_LFBPRESC0_LEUART1_SHIFT);
    111c:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
    1120:	4836      	ldr	r0, [pc, #216]	; (11fc <cmu_update_clocks+0x46c>)
    1122:	f3c1 1101 	ubfx	r1, r1, #4, #2
    1126:	fa02 f101 	lsl.w	r1, r2, r1
    112a:	6001      	str	r1, [r0, #0]
    SYSTICK_CLOCK_FREQ = LFB_CLOCK_FREQ << ((CMU->LFBPRESC0 & _CMU_LFBPRESC0_SYSTICK_MASK) >> _CMU_LFBPRESC0_SYSTICK_SHIFT);
    112c:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
    1130:	4833      	ldr	r0, [pc, #204]	; (1200 <cmu_update_clocks+0x470>)
    1132:	f3c1 2103 	ubfx	r1, r1, #8, #4
    1136:	fa02 f101 	lsl.w	r1, r2, r1
    113a:	6001      	str	r1, [r0, #0]
    CSEN_CLOCK_FREQ = LFB_CLOCK_FREQ << (((CMU->LFBPRESC0 & _CMU_LFBPRESC0_CSEN_MASK) >> _CMU_LFBPRESC0_CSEN_SHIFT) + 4);
    113c:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
    1140:	f3c1 3101 	ubfx	r1, r1, #12, #2
    1144:	3104      	adds	r1, #4
    1146:	408a      	lsls	r2, r1
    1148:	492e      	ldr	r1, [pc, #184]	; (1204 <cmu_update_clocks+0x474>)
    114a:	600a      	str	r2, [r1, #0]

    switch(CMU->LFCCLKSEL & _CMU_LFCCLKSEL_LFC_MASK)
    114c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    1150:	f002 0207 	and.w	r2, r2, #7
    1154:	2a04      	cmp	r2, #4
    1156:	d811      	bhi.n	117c <cmu_update_clocks+0x3ec>
    1158:	e8df f002 	tbb	[pc, r2]
    115c:	10201c0d 	.word	0x10201c0d
    1160:	24          	.byte	0x24
    1161:	00          	.byte	0x00
            LFB_CLOCK_FREQ = LFRCO_VALUE;
    1162:	4a22      	ldr	r2, [pc, #136]	; (11ec <cmu_update_clocks+0x45c>)
            LFB_CLOCK_FREQ = ULFRCO_VALUE;
    1164:	6812      	ldr	r2, [r2, #0]
    1166:	e7ce      	b.n	1106 <cmu_update_clocks+0x376>
            LFB_CLOCK_FREQ = LFXO_VALUE;
    1168:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    116c:	e7cb      	b.n	1106 <cmu_update_clocks+0x376>
            LFB_CLOCK_FREQ = HFLE_CLOCK_FREQ;
    116e:	4a26      	ldr	r2, [pc, #152]	; (1208 <cmu_update_clocks+0x478>)
    1170:	e7f8      	b.n	1164 <cmu_update_clocks+0x3d4>
            LFB_CLOCK_FREQ = ULFRCO_VALUE;
    1172:	4a1f      	ldr	r2, [pc, #124]	; (11f0 <cmu_update_clocks+0x460>)
    1174:	e7f6      	b.n	1164 <cmu_update_clocks+0x3d4>
    {
        case CMU_LFCCLKSEL_LFC_DISABLED:
            LFC_CLOCK_FREQ = 0;
    1176:	4a25      	ldr	r2, [pc, #148]	; (120c <cmu_update_clocks+0x47c>)
    1178:	2100      	movs	r1, #0
        break;
        case CMU_LFCCLKSEL_LFC_LFXO:
            LFC_CLOCK_FREQ = LFXO_VALUE;
        break;
        case CMU_LFCCLKSEL_LFC_ULFRCO:
            LFC_CLOCK_FREQ = ULFRCO_VALUE;
    117a:	6011      	str	r1, [r2, #0]
        break;
    }

    switch(CMU->LFECLKSEL & _CMU_LFECLKSEL_LFE_MASK)
    117c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1180:	4b23      	ldr	r3, [pc, #140]	; (1210 <cmu_update_clocks+0x480>)
    1182:	f002 0207 	and.w	r2, r2, #7
    1186:	2a04      	cmp	r2, #4
    1188:	d810      	bhi.n	11ac <cmu_update_clocks+0x41c>
    118a:	e8df f002 	tbb	[pc, r2]
    118e:	190d      	.short	0x190d
    1190:	0f1c      	.short	0x0f1c
    1192:	1f          	.byte	0x1f
    1193:	00          	.byte	0x00
            LFC_CLOCK_FREQ = LFRCO_VALUE;
    1194:	4a15      	ldr	r2, [pc, #84]	; (11ec <cmu_update_clocks+0x45c>)
            LFC_CLOCK_FREQ = ULFRCO_VALUE;
    1196:	6811      	ldr	r1, [r2, #0]
    1198:	4a1c      	ldr	r2, [pc, #112]	; (120c <cmu_update_clocks+0x47c>)
    119a:	e7ee      	b.n	117a <cmu_update_clocks+0x3ea>
            LFC_CLOCK_FREQ = LFXO_VALUE;
    119c:	4a1b      	ldr	r2, [pc, #108]	; (120c <cmu_update_clocks+0x47c>)
    119e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    11a2:	e7ea      	b.n	117a <cmu_update_clocks+0x3ea>
            LFC_CLOCK_FREQ = ULFRCO_VALUE;
    11a4:	4a12      	ldr	r2, [pc, #72]	; (11f0 <cmu_update_clocks+0x460>)
    11a6:	e7f6      	b.n	1196 <cmu_update_clocks+0x406>
    {
        case CMU_LFECLKSEL_LFE_DISABLED:
            LFE_CLOCK_FREQ = 0;
    11a8:	2200      	movs	r2, #0
        break;
        case CMU_LFECLKSEL_LFE_LFXO:
            LFE_CLOCK_FREQ = LFXO_VALUE;
        break;
        case CMU_LFECLKSEL_LFE_ULFRCO:
            LFE_CLOCK_FREQ = ULFRCO_VALUE;
    11aa:	601a      	str	r2, [r3, #0]
        break;
    }

    RTCC_CLOCK_FREQ = LFE_CLOCK_FREQ << ((CMU->LFEPRESC0 & _CMU_LFEPRESC0_RTCC_MASK) >> _CMU_LFEPRESC0_RTCC_SHIFT);
    11ac:	4a11      	ldr	r2, [pc, #68]	; (11f4 <cmu_update_clocks+0x464>)
    11ae:	681b      	ldr	r3, [r3, #0]
    11b0:	f8d2 2130 	ldr.w	r2, [r2, #304]	; 0x130
    11b4:	f002 0203 	and.w	r2, r2, #3
    11b8:	4093      	lsls	r3, r2
    11ba:	4a16      	ldr	r2, [pc, #88]	; (1214 <cmu_update_clocks+0x484>)
    11bc:	6013      	str	r3, [r2, #0]
}
    11be:	bd30      	pop	{r4, r5, pc}
            LFE_CLOCK_FREQ = LFRCO_VALUE;
    11c0:	4a0a      	ldr	r2, [pc, #40]	; (11ec <cmu_update_clocks+0x45c>)
            LFE_CLOCK_FREQ = ULFRCO_VALUE;
    11c2:	6812      	ldr	r2, [r2, #0]
    11c4:	e7f1      	b.n	11aa <cmu_update_clocks+0x41a>
            LFE_CLOCK_FREQ = LFXO_VALUE;
    11c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    11ca:	e7ee      	b.n	11aa <cmu_update_clocks+0x41a>
            LFE_CLOCK_FREQ = ULFRCO_VALUE;
    11cc:	4a08      	ldr	r2, [pc, #32]	; (11f0 <cmu_update_clocks+0x460>)
    11ce:	e7f8      	b.n	11c2 <cmu_update_clocks+0x432>
    11d0:	007a1200 	.word	0x007a1200
    11d4:	20000100 	.word	0x20000100
    11d8:	20000104 	.word	0x20000104
    11dc:	20000108 	.word	0x20000108
    11e0:	2000009c 	.word	0x2000009c
    11e4:	200000b4 	.word	0x200000b4
    11e8:	200000bc 	.word	0x200000bc
    11ec:	20000008 	.word	0x20000008
    11f0:	2000000c 	.word	0x2000000c
    11f4:	400e4000 	.word	0x400e4000
    11f8:	2000010c 	.word	0x2000010c
    11fc:	200000cc 	.word	0x200000cc
    1200:	200000b0 	.word	0x200000b0
    1204:	200000a4 	.word	0x200000a4
    1208:	200000ac 	.word	0x200000ac
    120c:	200000ec 	.word	0x200000ec
    1210:	200000d0 	.word	0x200000d0
    1214:	200000c8 	.word	0x200000c8

00001218 <cmu_config_waitstates>:
void cmu_config_waitstates(uint32_t ulFrequency)
{
    if(ulFrequency <= 32000000)
    1218:	4b05      	ldr	r3, [pc, #20]	; (1230 <cmu_config_waitstates+0x18>)
    121a:	4298      	cmp	r0, r3
    121c:	4b05      	ldr	r3, [pc, #20]	; (1234 <cmu_config_waitstates+0x1c>)
        CMU->CTRL &= ~CMU_CTRL_WSHFLE;
    121e:	681a      	ldr	r2, [r3, #0]
    1220:	bf94      	ite	ls
    1222:	f422 3280 	bicls.w	r2, r2, #65536	; 0x10000
    else
        CMU->CTRL |= CMU_CTRL_WSHFLE;
    1226:	f442 3280 	orrhi.w	r2, r2, #65536	; 0x10000
    122a:	601a      	str	r2, [r3, #0]
}
    122c:	4770      	bx	lr
    122e:	bf00      	nop
    1230:	01e84800 	.word	0x01e84800
    1234:	400e4000 	.word	0x400e4000

00001238 <cmu_hfrco_calib>:

void cmu_hfrco_calib(uint32_t ulCalibration, uint32_t ulTargetFrequency)
{
    if(CMU->STATUS & CMU_STATUS_DPLLENS)
    1238:	4b08      	ldr	r3, [pc, #32]	; (125c <cmu_hfrco_calib+0x24>)
    123a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    123e:	04d2      	lsls	r2, r2, #19
    1240:	d40a      	bmi.n	1258 <cmu_hfrco_calib+0x20>
        return;

    while(CMU->SYNCBUSY & CMU_SYNCBUSY_HFRCOBSY);
    1242:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    1246:	01d2      	lsls	r2, r2, #7
    1248:	d4fb      	bmi.n	1242 <cmu_hfrco_calib+0xa>

    CMU->HFRCOCTRL = ulCalibration;
    124a:	6118      	str	r0, [r3, #16]

    while(CMU->SYNCBUSY & CMU_SYNCBUSY_HFRCOBSY);
    124c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    1250:	01d2      	lsls	r2, r2, #7
    1252:	d4fb      	bmi.n	124c <cmu_hfrco_calib+0x14>

    HFRCO_VALUE = ulTargetFrequency;
    1254:	4b02      	ldr	r3, [pc, #8]	; (1260 <cmu_hfrco_calib+0x28>)
    1256:	6019      	str	r1, [r3, #0]
}
    1258:	4770      	bx	lr
    125a:	bf00      	nop
    125c:	400e4000 	.word	0x400e4000
    1260:	20000004 	.word	0x20000004

00001264 <cmu_init>:
    uint8_t ubSDIOClockEnabled = !!(CMU->STATUS & CMU_STATUS_SDIOCLKENS);
    1264:	4b61      	ldr	r3, [pc, #388]	; (13ec <cmu_init+0x188>)
{
    1266:	b570      	push	{r4, r5, r6, lr}
    uint8_t ubSDIOClockEnabled = !!(CMU->STATUS & CMU_STATUS_SDIOCLKENS);
    1268:	f8d3 5090 	ldr.w	r5, [r3, #144]	; 0x90
    if((CMU->SDIOCTRL & _CMU_SDIOCTRL_SDIOCLKSEL_MASK) == CMU_SDIOCTRL_SDIOCLKSEL_HFXO || (CMU->SDIOCTRL & _CMU_SDIOCTRL_SDIOCLKSEL_MASK) == CMU_SDIOCTRL_SDIOCLKSEL_HFRCO)
    126c:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
    1270:	f002 0203 	and.w	r2, r2, #3
    1274:	2a01      	cmp	r2, #1
    1276:	d003      	beq.n	1280 <cmu_init+0x1c>
    1278:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
    127c:	0794      	lsls	r4, r2, #30
    127e:	d106      	bne.n	128e <cmu_init+0x2a>
        CMU->SDIOCTRL = CMU_SDIOCTRL_SDIOCLKDIS | CMU_SDIOCTRL_SDIOCLKSEL_HFXO;
    1280:	2281      	movs	r2, #129	; 0x81
    1282:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
        while(CMU->STATUS & CMU_STATUS_SDIOCLKENS);
    1286:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    128a:	0390      	lsls	r0, r2, #14
    128c:	d4fb      	bmi.n	1286 <cmu_init+0x22>
    uint8_t ubQSPIClockEnabled = !!(CMU->STATUS & CMU_STATUS_QSPI0CLKENS);
    128e:	4b57      	ldr	r3, [pc, #348]	; (13ec <cmu_init+0x188>)
    1290:	f8d3 6090 	ldr.w	r6, [r3, #144]	; 0x90
    if((CMU->QSPICTRL & _CMU_QSPICTRL_QSPI0CLKSEL_MASK) == CMU_QSPICTRL_QSPI0CLKSEL_HFXO || (CMU->QSPICTRL & _CMU_QSPICTRL_QSPI0CLKSEL_MASK) == CMU_QSPICTRL_QSPI0CLKSEL_HFRCO)
    1294:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
    1298:	f002 0203 	and.w	r2, r2, #3
    129c:	2a01      	cmp	r2, #1
    129e:	d003      	beq.n	12a8 <cmu_init+0x44>
    12a0:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
    12a4:	0791      	lsls	r1, r2, #30
    12a6:	d106      	bne.n	12b6 <cmu_init+0x52>
        CMU->QSPICTRL = CMU_QSPICTRL_QSPI0CLKDIS | CMU_QSPICTRL_QSPI0CLKSEL_HFXO;
    12a8:	2281      	movs	r2, #129	; 0x81
    12aa:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
        while(CMU->STATUS & CMU_STATUS_QSPI0CLKENS);
    12ae:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    12b2:	0352      	lsls	r2, r2, #13
    12b4:	d4fb      	bmi.n	12ae <cmu_init+0x4a>
    if(CMU->STATUS & CMU_STATUS_DPLLENS)
    12b6:	4a4d      	ldr	r2, [pc, #308]	; (13ec <cmu_init+0x188>)
    12b8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    12bc:	04dc      	lsls	r4, r3, #19
    12be:	d506      	bpl.n	12ce <cmu_init+0x6a>
        CMU->OSCENCMD = CMU_OSCENCMD_DPLLDIS;
    12c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    12c4:	6613      	str	r3, [r2, #96]	; 0x60
        while(CMU->STATUS & CMU_STATUS_DPLLENS);
    12c6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    12ca:	04d8      	lsls	r0, r3, #19
    12cc:	d4fb      	bmi.n	12c6 <cmu_init+0x62>
    if(CMU->STATUS & CMU_STATUS_HFXOENS)
    12ce:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    12d2:	f013 0f04 	tst.w	r3, #4
    12d6:	4b45      	ldr	r3, [pc, #276]	; (13ec <cmu_init+0x188>)
    12d8:	d005      	beq.n	12e6 <cmu_init+0x82>
        CMU->OSCENCMD = CMU_OSCENCMD_HFXODIS;
    12da:	2108      	movs	r1, #8
    12dc:	6611      	str	r1, [r2, #96]	; 0x60
        while(CMU->STATUS & CMU_STATUS_HFXOENS);
    12de:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    12e2:	0751      	lsls	r1, r2, #29
    12e4:	d4fb      	bmi.n	12de <cmu_init+0x7a>
    CMU->HFXOCTRL = CMU_HFXOCTRL_PEAKDETMODE_AUTOCMD | CMU_HFXOCTRL_MODE_XTAL;
    12e6:	2210      	movs	r2, #16
    12e8:	625a      	str	r2, [r3, #36]	; 0x24
    CMU->HFXOCTRL1 = CMU_HFXOCTRL1_PEAKDETTHR_DEFAULT;
    12ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    12ee:	629a      	str	r2, [r3, #40]	; 0x28
    CMU->HFXOSTEADYSTATECTRL |= CMU_HFXOSTEADYSTATECTRL_PEAKMONEN;
    12f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    12f2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
    12f6:	631a      	str	r2, [r3, #48]	; 0x30
    CMU->HFXOTIMEOUTCTRL = (7 << _CMU_HFXOTIMEOUTCTRL_PEAKDETTIMEOUT_SHIFT) | (8 << _CMU_HFXOTIMEOUTCTRL_STEADYTIMEOUT_SHIFT) | (12 << _CMU_HFXOTIMEOUTCTRL_STARTUPTIMEOUT_SHIFT);
    12f8:	f247 028c 	movw	r2, #28812	; 0x708c
    12fc:	635a      	str	r2, [r3, #52]	; 0x34
    CMU->OSCENCMD = CMU_OSCENCMD_HFXOEN;
    12fe:	2204      	movs	r2, #4
    1300:	661a      	str	r2, [r3, #96]	; 0x60
    while(!(CMU->STATUS & CMU_STATUS_HFXORDY));
    1302:	4b3a      	ldr	r3, [pc, #232]	; (13ec <cmu_init+0x188>)
    1304:	461c      	mov	r4, r3
    1306:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    130a:	0712      	lsls	r2, r2, #28
    130c:	d5fb      	bpl.n	1306 <cmu_init+0xa2>
    CMU->HFCLKSEL = CMU_HFCLKSEL_HF_HFXO;
    130e:	2202      	movs	r2, #2
    1310:	675a      	str	r2, [r3, #116]	; 0x74
    while((CMU->HFCLKSTATUS & _CMU_HFCLKSTATUS_SELECTED_MASK) != CMU_HFCLKSTATUS_SELECTED_HFXO);
    1312:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    1316:	f003 0307 	and.w	r3, r3, #7
    131a:	2b02      	cmp	r3, #2
    131c:	d1f9      	bne.n	1312 <cmu_init+0xae>
    cmu_hfrco_calib(HFRCO_CALIB_72M | CMU_HFRCOCTRL_FINETUNINGEN, 72000000);
    131e:	4b34      	ldr	r3, [pc, #208]	; (13f0 <cmu_init+0x18c>)
    1320:	4934      	ldr	r1, [pc, #208]	; (13f4 <cmu_init+0x190>)
    1322:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
    1326:	f040 6000 	orr.w	r0, r0, #134217728	; 0x8000000
    132a:	f7ff ff85 	bl	1238 <cmu_hfrco_calib>
    CMU->DPLLCTRL = CMU_DPLLCTRL_REFSEL_HFXO | CMU_DPLLCTRL_AUTORECOVER | CMU_DPLLCTRL_EDGESEL_RISE | CMU_DPLLCTRL_MODE_FREQLL;
    132e:	2306      	movs	r3, #6
    1330:	6423      	str	r3, [r4, #64]	; 0x40
    CMU->DPLLCTRL1 = (899 << _CMU_DPLLCTRL1_N_SHIFT) | (99 << _CMU_DPLLCTRL1_M_SHIFT); // fHFRCO = fHFXO * (N + 1) / (M + 1)
    1332:	4b31      	ldr	r3, [pc, #196]	; (13f8 <cmu_init+0x194>)
    1334:	6463      	str	r3, [r4, #68]	; 0x44
    CMU->OSCENCMD = CMU_OSCENCMD_DPLLEN;
    1336:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    133a:	6623      	str	r3, [r4, #96]	; 0x60
    while(!(CMU->STATUS & CMU_STATUS_DPLLRDY));
    133c:	4c2b      	ldr	r4, [pc, #172]	; (13ec <cmu_init+0x188>)
    133e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    1342:	0498      	lsls	r0, r3, #18
    1344:	d5fb      	bpl.n	133e <cmu_init+0xda>
    cmu_config_waitstates(36000000);
    1346:	482d      	ldr	r0, [pc, #180]	; (13fc <cmu_init+0x198>)
    1348:	f7ff ff66 	bl	1218 <cmu_config_waitstates>
    msc_config_waitstates(72000000);
    134c:	4829      	ldr	r0, [pc, #164]	; (13f4 <cmu_init+0x190>)
    134e:	f000 fc3b 	bl	1bc8 <msc_config_waitstates>
    CMU->HFPRESC = CMU_HFPRESC_HFCLKLEPRESC_DIV2 | CMU_HFPRESC_PRESC_NODIVISION;
    1352:	2300      	movs	r3, #0
    CMU->HFBUSPRESC = 1 << _CMU_HFBUSPRESC_PRESC_SHIFT;
    1354:	f44f 7280 	mov.w	r2, #256	; 0x100
    CMU->HFPRESC = CMU_HFPRESC_HFCLKLEPRESC_DIV2 | CMU_HFPRESC_PRESC_NODIVISION;
    1358:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    CMU->HFBUSPRESC = 1 << _CMU_HFBUSPRESC_PRESC_SHIFT;
    135c:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
    CMU->HFCOREPRESC = 0 << _CMU_HFCOREPRESC_PRESC_SHIFT;
    1360:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    CMU->HFPERPRESC = 1 << _CMU_HFPERPRESC_PRESC_SHIFT;
    1364:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
    CMU->HFEXPPRESC = 0 << _CMU_HFEXPPRESC_PRESC_SHIFT;
    1368:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    CMU->HFPERPRESCB = 0 << _CMU_HFPERPRESCB_PRESC_SHIFT;
    136c:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    CMU->HFPERPRESCC = 1 << _CMU_HFPERPRESCC_PRESC_SHIFT;
    1370:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
    CMU->CTRL |= CMU_CTRL_HFPERCLKEN;
    1374:	6823      	ldr	r3, [r4, #0]
    1376:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    137a:	6023      	str	r3, [r4, #0]
    CMU->HFCLKSEL = CMU_HFCLKSEL_HF_HFRCO;
    137c:	2301      	movs	r3, #1
    137e:	6763      	str	r3, [r4, #116]	; 0x74
    while((CMU->HFCLKSTATUS & _CMU_HFCLKSTATUS_SELECTED_MASK) != CMU_HFCLKSTATUS_SELECTED_HFRCO);
    1380:	4b1a      	ldr	r3, [pc, #104]	; (13ec <cmu_init+0x188>)
    1382:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    1386:	f002 0207 	and.w	r2, r2, #7
    138a:	2a01      	cmp	r2, #1
    138c:	d1f9      	bne.n	1382 <cmu_init+0x11e>
    if((CMU->SDIOCTRL & _CMU_SDIOCTRL_SDIOCLKSEL_MASK) == CMU_SDIOCTRL_SDIOCLKSEL_HFXO)
    138e:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
    1392:	f002 0203 	and.w	r2, r2, #3
    1396:	2a01      	cmp	r2, #1
    1398:	d10e      	bne.n	13b8 <cmu_init+0x154>
        CMU->SDIOCTRL &= ~CMU_SDIOCTRL_SDIOCLKDIS;
    139a:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
    139e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    13a2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
        while(!(CMU->STATUS & CMU_STATUS_SDIOCLKENS) && ubSDIOClockEnabled);
    13a6:	4b11      	ldr	r3, [pc, #68]	; (13ec <cmu_init+0x188>)
    uint8_t ubSDIOClockEnabled = !!(CMU->STATUS & CMU_STATUS_SDIOCLKENS);
    13a8:	f405 3500 	and.w	r5, r5, #131072	; 0x20000
        while(!(CMU->STATUS & CMU_STATUS_SDIOCLKENS) && ubSDIOClockEnabled);
    13ac:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    13b0:	0391      	lsls	r1, r2, #14
    13b2:	d401      	bmi.n	13b8 <cmu_init+0x154>
    13b4:	2d00      	cmp	r5, #0
    13b6:	d1f9      	bne.n	13ac <cmu_init+0x148>
    if((CMU->QSPICTRL & _CMU_QSPICTRL_QSPI0CLKSEL_MASK) == CMU_QSPICTRL_QSPI0CLKSEL_HFXO)
    13b8:	4b0c      	ldr	r3, [pc, #48]	; (13ec <cmu_init+0x188>)
    13ba:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
    13be:	f002 0203 	and.w	r2, r2, #3
    13c2:	2a01      	cmp	r2, #1
    13c4:	d10d      	bne.n	13e2 <cmu_init+0x17e>
        CMU->QSPICTRL &= ~CMU_QSPICTRL_QSPI0CLKDIS;
    13c6:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
    13ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    13ce:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
    uint8_t ubQSPIClockEnabled = !!(CMU->STATUS & CMU_STATUS_QSPI0CLKENS);
    13d2:	f406 2680 	and.w	r6, r6, #262144	; 0x40000
        while(!(CMU->STATUS & CMU_STATUS_QSPI0CLKENS) && ubQSPIClockEnabled);
    13d6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    13da:	0352      	lsls	r2, r2, #13
    13dc:	d401      	bmi.n	13e2 <cmu_init+0x17e>
    13de:	2e00      	cmp	r6, #0
    13e0:	d1f9      	bne.n	13d6 <cmu_init+0x172>
    CMU->LFECLKSEL = CMU_LFECLKSEL_LFE_ULFRCO;
    13e2:	4b02      	ldr	r3, [pc, #8]	; (13ec <cmu_init+0x188>)
    13e4:	2204      	movs	r2, #4
    13e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    13ea:	bd70      	pop	{r4, r5, r6, pc}
    13ec:	400e4000 	.word	0x400e4000
    13f0:	0fe081b0 	.word	0x0fe081b0
    13f4:	044aa200 	.word	0x044aa200
    13f8:	03830063 	.word	0x03830063
    13fc:	02255100 	.word	0x02255100

00001400 <cmu_ushfrco_calib>:

void cmu_ushfrco_calib(uint8_t ubEnable, uint32_t ulCalibration, uint32_t ulTargetFrequency)
{
    if(CMU->USBCRCTRL & CMU_USBCRCTRL_USBCREN)
    1400:	4b13      	ldr	r3, [pc, #76]	; (1450 <cmu_ushfrco_calib+0x50>)
{
    1402:	b510      	push	{r4, lr}
    if(CMU->USBCRCTRL & CMU_USBCRCTRL_USBCREN)
    1404:	f8d3 41f4 	ldr.w	r4, [r3, #500]	; 0x1f4
    1408:	07e4      	lsls	r4, r4, #31
    140a:	d407      	bmi.n	141c <cmu_ushfrco_calib+0x1c>
        return;

    if(!ubEnable)
    140c:	b938      	cbnz	r0, 141e <cmu_ushfrco_calib+0x1e>
    {
        CMU->OSCENCMD = CMU_OSCENCMD_USHFRCODIS;
    140e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1412:	661a      	str	r2, [r3, #96]	; 0x60
        while(CMU->STATUS & CMU_STATUS_USHFRCOENS);
    1414:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    1418:	0554      	lsls	r4, r2, #21
    141a:	d4fb      	bmi.n	1414 <cmu_ushfrco_calib+0x14>

        while(!(CMU->STATUS & CMU_STATUS_USHFRCORDY));
    }

    USHFRCO_VALUE = ulTargetFrequency;
}
    141c:	bd10      	pop	{r4, pc}
    while(CMU->SYNCBUSY & CMU_SYNCBUSY_USHFRCOBSY);
    141e:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
    1422:	0040      	lsls	r0, r0, #1
    1424:	d4fb      	bmi.n	141e <cmu_ushfrco_calib+0x1e>
    CMU->USHFRCOCTRL = ulCalibration;
    1426:	6099      	str	r1, [r3, #8]
    while(CMU->SYNCBUSY & CMU_SYNCBUSY_USHFRCOBSY);
    1428:	4b09      	ldr	r3, [pc, #36]	; (1450 <cmu_ushfrco_calib+0x50>)
    142a:	4619      	mov	r1, r3
    142c:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
    1430:	0044      	lsls	r4, r0, #1
    1432:	d4fb      	bmi.n	142c <cmu_ushfrco_calib+0x2c>
    if(ubEnable && !(CMU->STATUS & CMU_STATUS_USHFRCOENS))
    1434:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
    1438:	0540      	lsls	r0, r0, #21
    143a:	d406      	bmi.n	144a <cmu_ushfrco_calib+0x4a>
        CMU->OSCENCMD = CMU_OSCENCMD_USHFRCOEN;
    143c:	f44f 6080 	mov.w	r0, #1024	; 0x400
    1440:	6618      	str	r0, [r3, #96]	; 0x60
        while(!(CMU->STATUS & CMU_STATUS_USHFRCORDY));
    1442:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
    1446:	051b      	lsls	r3, r3, #20
    1448:	d5fb      	bpl.n	1442 <cmu_ushfrco_calib+0x42>
    USHFRCO_VALUE = ulTargetFrequency;
    144a:	4b02      	ldr	r3, [pc, #8]	; (1454 <cmu_ushfrco_calib+0x54>)
    144c:	601a      	str	r2, [r3, #0]
    144e:	e7e5      	b.n	141c <cmu_ushfrco_calib+0x1c>
    1450:	400e4000 	.word	0x400e4000
    1454:	20000010 	.word	0x20000010

00001458 <cmu_auxhfrco_calib>:

void cmu_auxhfrco_calib(uint8_t ubEnable, uint32_t ulCalibration, uint32_t ulTargetFrequency)
{
    if(!ubEnable)
    1458:	4b0f      	ldr	r3, [pc, #60]	; (1498 <cmu_auxhfrco_calib+0x40>)
    145a:	b930      	cbnz	r0, 146a <cmu_auxhfrco_calib+0x12>
    {
        CMU->OSCENCMD = CMU_OSCENCMD_AUXHFRCODIS;
    145c:	2220      	movs	r2, #32
    145e:	661a      	str	r2, [r3, #96]	; 0x60
        while(CMU->STATUS & CMU_STATUS_AUXHFRCOENS);
    1460:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    1464:	06d2      	lsls	r2, r2, #27
    1466:	d4fb      	bmi.n	1460 <cmu_auxhfrco_calib+0x8>
    1468:	4770      	bx	lr

        return;
    }

    while(CMU->SYNCBUSY & CMU_SYNCBUSY_AUXHFRCOBSY);
    146a:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
    146e:	0180      	lsls	r0, r0, #6
    1470:	d4fb      	bmi.n	146a <cmu_auxhfrco_calib+0x12>

    CMU->AUXHFRCOCTRL = ulCalibration;
    1472:	6199      	str	r1, [r3, #24]

    while(CMU->SYNCBUSY & CMU_SYNCBUSY_AUXHFRCOBSY);
    1474:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
    1478:	0188      	lsls	r0, r1, #6
    147a:	d4fb      	bmi.n	1474 <cmu_auxhfrco_calib+0x1c>

    if(ubEnable && !(CMU->STATUS & CMU_STATUS_AUXHFRCOENS))
    147c:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
    1480:	06c9      	lsls	r1, r1, #27
    1482:	d406      	bmi.n	1492 <cmu_auxhfrco_calib+0x3a>
    {
        CMU->OSCENCMD = CMU_OSCENCMD_AUXHFRCOEN;
    1484:	2110      	movs	r1, #16
    1486:	6619      	str	r1, [r3, #96]	; 0x60

        while(!(CMU->STATUS & CMU_STATUS_AUXHFRCORDY));
    1488:	4903      	ldr	r1, [pc, #12]	; (1498 <cmu_auxhfrco_calib+0x40>)
    148a:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
    148e:	069b      	lsls	r3, r3, #26
    1490:	d5fb      	bpl.n	148a <cmu_auxhfrco_calib+0x32>
    }

    AUXHFRCO_VALUE = ulTargetFrequency;
    1492:	4b02      	ldr	r3, [pc, #8]	; (149c <cmu_auxhfrco_calib+0x44>)
    1494:	601a      	str	r2, [r3, #0]
}
    1496:	4770      	bx	lr
    1498:	400e4000 	.word	0x400e4000
    149c:	20000000 	.word	0x20000000

000014a0 <cmu_hfxo_startup_calib>:

void cmu_hfxo_startup_calib(uint16_t usIBTrim, uint16_t usCTune)
{
    if(CMU->STATUS & CMU_STATUS_HFXOENS)
    14a0:	4a08      	ldr	r2, [pc, #32]	; (14c4 <cmu_hfxo_startup_calib+0x24>)
    14a2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    14a6:	075b      	lsls	r3, r3, #29
    14a8:	d40a      	bmi.n	14c0 <cmu_hfxo_startup_calib+0x20>
        return;

    CMU->HFXOSTARTUPCTRL = (CMU->HFXOSTARTUPCTRL & ~(_CMU_HFXOSTARTUPCTRL_CTUNE_MASK | _CMU_HFXOSTARTUPCTRL_IBTRIMXOCORE_MASK)) | (((uint32_t)usCTune << _CMU_HFXOSTARTUPCTRL_CTUNE_SHIFT) & _CMU_HFXOSTARTUPCTRL_CTUNE_MASK) | (((uint32_t)usIBTrim << _CMU_HFXOSTARTUPCTRL_IBTRIMXOCORE_SHIFT) & _CMU_HFXOSTARTUPCTRL_IBTRIMXOCORE_MASK);
    14aa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    14ac:	0d1b      	lsrs	r3, r3, #20
    14ae:	f3c0 000a 	ubfx	r0, r0, #0, #11
    14b2:	051b      	lsls	r3, r3, #20
    14b4:	4303      	orrs	r3, r0
    14b6:	4804      	ldr	r0, [pc, #16]	; (14c8 <cmu_hfxo_startup_calib+0x28>)
    14b8:	ea00 20c1 	and.w	r0, r0, r1, lsl #11
    14bc:	4303      	orrs	r3, r0
    14be:	62d3      	str	r3, [r2, #44]	; 0x2c
}
    14c0:	4770      	bx	lr
    14c2:	bf00      	nop
    14c4:	400e4000 	.word	0x400e4000
    14c8:	000ff800 	.word	0x000ff800

000014cc <cmu_hfxo_get_startup_current>:
float cmu_hfxo_get_startup_current()
{
    return HFXO_IBTRIM_TO_UA((CMU->HFXOSTARTUPCTRL & _CMU_HFXOSTARTUPCTRL_IBTRIMXOCORE_MASK) >> _CMU_HFXOSTARTUPCTRL_IBTRIMXOCORE_SHIFT);
    14cc:	4a07      	ldr	r2, [pc, #28]	; (14ec <cmu_hfxo_get_startup_current+0x20>)
    14ce:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    14d0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    14d2:	f44f 7120 	mov.w	r1, #640	; 0x280
    14d6:	b2d2      	uxtb	r2, r2
    14d8:	f3c3 2341 	ubfx	r3, r3, #9, #2
    14dc:	fb01 2303 	mla	r3, r1, r3, r2
    14e0:	005b      	lsls	r3, r3, #1
    14e2:	ee00 3a10 	vmov	s0, r3
}
    14e6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    14ea:	4770      	bx	lr
    14ec:	400e4000 	.word	0x400e4000

000014f0 <cmu_hfxo_get_startup_cap>:
float cmu_hfxo_get_startup_cap()
{
    return HFXO_CTUNE_TO_PF((CMU->HFXOSTARTUPCTRL & _CMU_HFXOSTARTUPCTRL_CTUNE_MASK) >> _CMU_HFXOSTARTUPCTRL_CTUNE_SHIFT);
    14f0:	4b07      	ldr	r3, [pc, #28]	; (1510 <cmu_hfxo_get_startup_cap+0x20>)
}
    14f2:	ed9f 7a08 	vldr	s14, [pc, #32]	; 1514 <cmu_hfxo_get_startup_cap+0x24>
    return HFXO_CTUNE_TO_PF((CMU->HFXOSTARTUPCTRL & _CMU_HFXOSTARTUPCTRL_CTUNE_MASK) >> _CMU_HFXOSTARTUPCTRL_CTUNE_SHIFT);
    14f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
    14f8:	ed9f 0a07 	vldr	s0, [pc, #28]	; 1518 <cmu_hfxo_get_startup_cap+0x28>
    return HFXO_CTUNE_TO_PF((CMU->HFXOSTARTUPCTRL & _CMU_HFXOSTARTUPCTRL_CTUNE_MASK) >> _CMU_HFXOSTARTUPCTRL_CTUNE_SHIFT);
    14fc:	f3c3 23c8 	ubfx	r3, r3, #11, #9
    1500:	ee07 3a90 	vmov	s15, r3
    1504:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
    1508:	eea7 0a87 	vfma.f32	s0, s15, s14
    150c:	4770      	bx	lr
    150e:	bf00      	nop
    1510:	400e4000 	.word	0x400e4000
    1514:	3dac0831 	.word	0x3dac0831
    1518:	410b3333 	.word	0x410b3333

0000151c <cmu_hfxo_steady_calib>:
void cmu_hfxo_steady_calib(uint16_t usIBTrim, uint16_t usCTune)
{
    if(CMU->STATUS & CMU_STATUS_HFXOENS)
    151c:	4a08      	ldr	r2, [pc, #32]	; (1540 <cmu_hfxo_steady_calib+0x24>)
    151e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    1522:	075b      	lsls	r3, r3, #29
    1524:	d40a      	bmi.n	153c <cmu_hfxo_steady_calib+0x20>
        return;

    CMU->HFXOSTEADYSTATECTRL = (CMU->HFXOSTEADYSTATECTRL & ~(_CMU_HFXOSTEADYSTATECTRL_CTUNE_MASK | _CMU_HFXOSTEADYSTATECTRL_IBTRIMXOCORE_MASK)) | (((uint32_t)usCTune << _CMU_HFXOSTEADYSTATECTRL_CTUNE_SHIFT) & _CMU_HFXOSTEADYSTATECTRL_CTUNE_MASK) | (((uint32_t)usIBTrim << _CMU_HFXOSTEADYSTATECTRL_IBTRIMXOCORE_SHIFT) & _CMU_HFXOSTEADYSTATECTRL_IBTRIMXOCORE_MASK);
    1526:	6b13      	ldr	r3, [r2, #48]	; 0x30
    1528:	0d1b      	lsrs	r3, r3, #20
    152a:	f3c0 000a 	ubfx	r0, r0, #0, #11
    152e:	051b      	lsls	r3, r3, #20
    1530:	4303      	orrs	r3, r0
    1532:	4804      	ldr	r0, [pc, #16]	; (1544 <cmu_hfxo_steady_calib+0x28>)
    1534:	ea00 20c1 	and.w	r0, r0, r1, lsl #11
    1538:	4303      	orrs	r3, r0
    153a:	6313      	str	r3, [r2, #48]	; 0x30
}
    153c:	4770      	bx	lr
    153e:	bf00      	nop
    1540:	400e4000 	.word	0x400e4000
    1544:	000ff800 	.word	0x000ff800

00001548 <cmu_hfxo_get_steady_current>:
float cmu_hfxo_get_steady_current()
{
    return HFXO_IBTRIM_TO_UA((CMU->HFXOSTEADYSTATECTRL & _CMU_HFXOSTEADYSTATECTRL_IBTRIMXOCORE_MASK) >> _CMU_HFXOSTEADYSTATECTRL_IBTRIMXOCORE_SHIFT);
    1548:	4a07      	ldr	r2, [pc, #28]	; (1568 <cmu_hfxo_get_steady_current+0x20>)
    154a:	6b13      	ldr	r3, [r2, #48]	; 0x30
    154c:	6b12      	ldr	r2, [r2, #48]	; 0x30
    154e:	f44f 7120 	mov.w	r1, #640	; 0x280
    1552:	b2d2      	uxtb	r2, r2
    1554:	f3c3 2341 	ubfx	r3, r3, #9, #2
    1558:	fb01 2303 	mla	r3, r1, r3, r2
    155c:	005b      	lsls	r3, r3, #1
    155e:	ee00 3a10 	vmov	s0, r3
}
    1562:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    1566:	4770      	bx	lr
    1568:	400e4000 	.word	0x400e4000

0000156c <cmu_hfxo_get_steady_cap>:
float cmu_hfxo_get_steady_cap()
{
    return HFXO_CTUNE_TO_PF((CMU->HFXOSTEADYSTATECTRL & _CMU_HFXOSTEADYSTATECTRL_CTUNE_MASK) >> _CMU_HFXOSTEADYSTATECTRL_CTUNE_SHIFT);
    156c:	4b07      	ldr	r3, [pc, #28]	; (158c <cmu_hfxo_get_steady_cap+0x20>)
}
    156e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 1590 <cmu_hfxo_get_steady_cap+0x24>
    return HFXO_CTUNE_TO_PF((CMU->HFXOSTEADYSTATECTRL & _CMU_HFXOSTEADYSTATECTRL_CTUNE_MASK) >> _CMU_HFXOSTEADYSTATECTRL_CTUNE_SHIFT);
    1572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
    1574:	ed9f 0a07 	vldr	s0, [pc, #28]	; 1594 <cmu_hfxo_get_steady_cap+0x28>
    return HFXO_CTUNE_TO_PF((CMU->HFXOSTEADYSTATECTRL & _CMU_HFXOSTEADYSTATECTRL_CTUNE_MASK) >> _CMU_HFXOSTEADYSTATECTRL_CTUNE_SHIFT);
    1578:	f3c3 23c8 	ubfx	r3, r3, #11, #9
    157c:	ee07 3a90 	vmov	s15, r3
    1580:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
    1584:	eea7 0a87 	vfma.f32	s0, s15, s14
    1588:	4770      	bx	lr
    158a:	bf00      	nop
    158c:	400e4000 	.word	0x400e4000
    1590:	3dac0831 	.word	0x3dac0831
    1594:	410b3333 	.word	0x410b3333

00001598 <cmu_hfxo_get_pda_ibtrim>:
uint16_t cmu_hfxo_get_pda_ibtrim(uint8_t ubTrigger)
{
    if(!(CMU->STATUS & CMU_STATUS_HFXOENS))
    1598:	4a09      	ldr	r2, [pc, #36]	; (15c0 <cmu_hfxo_get_pda_ibtrim+0x28>)
    159a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    159e:	f013 0304 	ands.w	r3, r3, #4
    15a2:	d00b      	beq.n	15bc <cmu_hfxo_get_pda_ibtrim+0x24>
        return 0;

    if(ubTrigger)
    15a4:	b128      	cbz	r0, 15b2 <cmu_hfxo_get_pda_ibtrim+0x1a>
    {
        CMU->CMD = CMU_CMD_HFXOPEAKDETSTART;
    15a6:	2310      	movs	r3, #16
    15a8:	6653      	str	r3, [r2, #100]	; 0x64
        while(!(CMU->STATUS & CMU_STATUS_HFXOPEAKDETRDY));
    15aa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
    15ae:	025b      	lsls	r3, r3, #9
    15b0:	d5fb      	bpl.n	15aa <cmu_hfxo_get_pda_ibtrim+0x12>
    }

    return (CMU->HFXOTRIMSTATUS & _CMU_HFXOTRIMSTATUS_IBTRIMXOCORE_MASK) >> _CMU_HFXOTRIMSTATUS_IBTRIMXOCORE_SHIFT;
    15b2:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    15b6:	f3c0 000a 	ubfx	r0, r0, #0, #11
    15ba:	4770      	bx	lr
        return 0;
    15bc:	4618      	mov	r0, r3
}
    15be:	4770      	bx	lr
    15c0:	400e4000 	.word	0x400e4000

000015c4 <cmu_hfxo_get_pda_current>:
float cmu_hfxo_get_pda_current(uint8_t ubTrigger)
{
    if(!(CMU->STATUS & CMU_STATUS_HFXOENS))
    15c4:	4b0e      	ldr	r3, [pc, #56]	; (1600 <cmu_hfxo_get_pda_current+0x3c>)
    15c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    15ca:	075b      	lsls	r3, r3, #29
{
    15cc:	b510      	push	{r4, lr}
    15ce:	4604      	mov	r4, r0
    if(!(CMU->STATUS & CMU_STATUS_HFXOENS))
    15d0:	d512      	bpl.n	15f8 <cmu_hfxo_get_pda_current+0x34>
        return 0;
    
    return HFXO_IBTRIM_TO_UA(cmu_hfxo_get_pda_ibtrim(ubTrigger));
    15d2:	f7ff ffe1 	bl	1598 <cmu_hfxo_get_pda_ibtrim>
    15d6:	4601      	mov	r1, r0
    15d8:	4620      	mov	r0, r4
    15da:	f7ff ffdd 	bl	1598 <cmu_hfxo_get_pda_ibtrim>
    15de:	f44f 7320 	mov.w	r3, #640	; 0x280
    15e2:	f3c1 2141 	ubfx	r1, r1, #9, #2
    15e6:	b2c0      	uxtb	r0, r0
    15e8:	fb03 0101 	mla	r1, r3, r1, r0
    15ec:	0049      	lsls	r1, r1, #1
    15ee:	ee07 1a90 	vmov	s15, r1
    15f2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
}
    15f6:	bd10      	pop	{r4, pc}
        return 0;
    15f8:	ed9f 0a02 	vldr	s0, [pc, #8]	; 1604 <cmu_hfxo_get_pda_current+0x40>
    15fc:	e7fb      	b.n	15f6 <cmu_hfxo_get_pda_current+0x32>
    15fe:	bf00      	nop
    1600:	400e4000 	.word	0x400e4000
    1604:	00000000 	.word	0x00000000

00001608 <cmu_hfxo_get_pma_ibtrim>:
uint16_t cmu_hfxo_get_pma_ibtrim()
{
    if(!(CMU->STATUS & CMU_STATUS_HFXOENS))
    1608:	4b05      	ldr	r3, [pc, #20]	; (1620 <cmu_hfxo_get_pma_ibtrim+0x18>)
    160a:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
    160e:	f010 0004 	ands.w	r0, r0, #4
        return 0;

    return (CMU->HFXOTRIMSTATUS & _CMU_HFXOTRIMSTATUS_IBTRIMXOCOREMON_MASK) >> _CMU_HFXOTRIMSTATUS_IBTRIMXOCOREMON_SHIFT;
    1612:	bf1c      	itt	ne
    1614:	f8d3 009c 	ldrne.w	r0, [r3, #156]	; 0x9c
    1618:	f3c0 400a 	ubfxne	r0, r0, #16, #11
}
    161c:	4770      	bx	lr
    161e:	bf00      	nop
    1620:	400e4000 	.word	0x400e4000

00001624 <cmu_hfxo_get_pma_current>:
float cmu_hfxo_get_pma_current()
{
    1624:	b508      	push	{r3, lr}
    if(!(CMU->STATUS & CMU_STATUS_HFXOENS))
    1626:	4b0d      	ldr	r3, [pc, #52]	; (165c <cmu_hfxo_get_pma_current+0x38>)
    1628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    162c:	075b      	lsls	r3, r3, #29
    162e:	d511      	bpl.n	1654 <cmu_hfxo_get_pma_current+0x30>
        return 0;
    
    return HFXO_IBTRIM_TO_UA(cmu_hfxo_get_pma_ibtrim());
    1630:	f7ff ffea 	bl	1608 <cmu_hfxo_get_pma_ibtrim>
    1634:	4602      	mov	r2, r0
    1636:	f7ff ffe7 	bl	1608 <cmu_hfxo_get_pma_ibtrim>
    163a:	f44f 7320 	mov.w	r3, #640	; 0x280
    163e:	f3c2 2241 	ubfx	r2, r2, #9, #2
    1642:	b2c0      	uxtb	r0, r0
    1644:	fb03 0202 	mla	r2, r3, r2, r0
    1648:	0052      	lsls	r2, r2, #1
    164a:	ee07 2a90 	vmov	s15, r2
    164e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
}
    1652:	bd08      	pop	{r3, pc}
        return 0;
    1654:	ed9f 0a02 	vldr	s0, [pc, #8]	; 1660 <cmu_hfxo_get_pma_current+0x3c>
    1658:	e7fb      	b.n	1652 <cmu_hfxo_get_pma_current+0x2e>
    165a:	bf00      	nop
    165c:	400e4000 	.word	0x400e4000
    1660:	00000000 	.word	0x00000000

00001664 <crc_init>:

#else

void crc_init()
{
    CMU->HFBUSCLKEN0 |= CMU_HFBUSCLKEN0_GPCRC;
    1664:	4a07      	ldr	r2, [pc, #28]	; (1684 <crc_init+0x20>)
    1666:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
    166a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    166e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

    GPCRC->CTRL = GPCRC_CTRL_BYTEREVERSE | GPCRC_CTRL_BITREVERSE | GPCRC_CTRL_POLYSEL_CRC32 | GPCRC_CTRL_EN_ENABLE;
    1672:	4b05      	ldr	r3, [pc, #20]	; (1688 <crc_init+0x24>)
    1674:	f240 6201 	movw	r2, #1537	; 0x601
    1678:	601a      	str	r2, [r3, #0]
    GPCRC->INIT = 0xFFFFFFFF;
    167a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    167e:	609a      	str	r2, [r3, #8]
}
    1680:	4770      	bx	lr
    1682:	bf00      	nop
    1684:	400e4000 	.word	0x400e4000
    1688:	4001c000 	.word	0x4001c000

0000168c <dbg_init>:
    dbg_swo_putc(ch, 0);
}

void dbg_init()
{
    CMU->DBGCLKSEL = CMU_DBGCLKSEL_DBG_HFRCODIV2;
    168c:	4b02      	ldr	r3, [pc, #8]	; (1698 <dbg_init+0xc>)
    168e:	2202      	movs	r2, #2
    1690:	671a      	str	r2, [r3, #112]	; 0x70

    cmu_update_clocks();
    1692:	f7ff bb7d 	b.w	d90 <cmu_update_clocks>
    1696:	bf00      	nop
    1698:	400e4000 	.word	0x400e4000

0000169c <dbg_swo_config>:
}
void dbg_swo_config(uint32_t ulChannelMask, uint32_t ulFrequency)
{
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    169c:	4a11      	ldr	r2, [pc, #68]	; (16e4 <dbg_swo_config+0x48>)
    169e:	68d3      	ldr	r3, [r2, #12]
    16a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    16a4:	60d3      	str	r3, [r2, #12]
    TPI->SPPR = 2 << TPI_SPPR_TXMODE_Pos;
    16a6:	4a10      	ldr	r2, [pc, #64]	; (16e8 <dbg_swo_config+0x4c>)
    16a8:	2302      	movs	r3, #2
    16aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    TPI->ACPR = (DBG_CLOCK_FREQ / ulFrequency) - 1;
    16ae:	4b0f      	ldr	r3, [pc, #60]	; (16ec <dbg_swo_config+0x50>)
    16b0:	681b      	ldr	r3, [r3, #0]
    16b2:	fbb3 f1f1 	udiv	r1, r3, r1
    TPI->FFCR = 0x00000100;
    16b6:	f44f 7380 	mov.w	r3, #256	; 0x100
    TPI->ACPR = (DBG_CLOCK_FREQ / ulFrequency) - 1;
    16ba:	3901      	subs	r1, #1
    16bc:	6111      	str	r1, [r2, #16]
    TPI->FFCR = 0x00000100;
    16be:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    DWT->CTRL = 0x400003FE;
    16c2:	4b0b      	ldr	r3, [pc, #44]	; (16f0 <dbg_swo_config+0x54>)
    16c4:	4a0b      	ldr	r2, [pc, #44]	; (16f4 <dbg_swo_config+0x58>)
    16c6:	601a      	str	r2, [r3, #0]
    ITM->TCR = (1 << ITM_TCR_TraceBusID_Pos) | ITM_TCR_ITMENA_Msk;
    16c8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    16cc:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    16d0:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    ITM->LAR = 0xC5ACCE55;
    16d4:	4a08      	ldr	r2, [pc, #32]	; (16f8 <dbg_swo_config+0x5c>)
    16d6:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    ITM->TPR = ulChannelMask;
    16da:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    ITM->TER = ulChannelMask;
    16de:	f8c3 0e00 	str.w	r0, [r3, #3584]	; 0xe00
}
    16e2:	4770      	bx	lr
    16e4:	e000edf0 	.word	0xe000edf0
    16e8:	e0040000 	.word	0xe0040000
    16ec:	20000110 	.word	0x20000110
    16f0:	e0001000 	.word	0xe0001000
    16f4:	400003fe 	.word	0x400003fe
    16f8:	c5acce55 	.word	0xc5acce55

000016fc <dbg_swo_send_uint8>:
{
    dbg_swo_send_uint8((uint8_t)c, ubChannel);
}
void dbg_swo_send_uint8(uint8_t ubData, uint8_t ubChannel)
{
    if (!(ITM->TCR & ITM_TCR_ITMENA_Msk))
    16fc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
{
    1700:	b510      	push	{r4, lr}
    if (!(ITM->TCR & ITM_TCR_ITMENA_Msk))
    1702:	f8d3 2e80 	ldr.w	r2, [r3, #3712]	; 0xe80
    1706:	07d2      	lsls	r2, r2, #31
    1708:	d50a      	bpl.n	1720 <dbg_swo_send_uint8+0x24>
        return;

    if (!(ITM->TER & (1 << ubChannel)))
    170a:	f8d3 4e00 	ldr.w	r4, [r3, #3584]	; 0xe00
    170e:	2201      	movs	r2, #1
    1710:	408a      	lsls	r2, r1
    1712:	4222      	tst	r2, r4
    1714:	d004      	beq.n	1720 <dbg_swo_send_uint8+0x24>
        return;

    while(!ITM->PORT[0].u8);
    1716:	781a      	ldrb	r2, [r3, #0]
    1718:	2a00      	cmp	r2, #0
    171a:	d0fc      	beq.n	1716 <dbg_swo_send_uint8+0x1a>

    ITM->PORT[ubChannel].u8 = ubData;
    171c:	f803 0021 	strb.w	r0, [r3, r1, lsl #2]
}
    1720:	bd10      	pop	{r4, pc}

00001722 <_putchar>:
    dbg_swo_send_uint8((uint8_t)c, ubChannel);
    1722:	2100      	movs	r1, #0
    1724:	f7ff bfea 	b.w	16fc <dbg_swo_send_uint8>

00001728 <crypto_init>:
#include "crypto.h"

void crypto_init()
{
    CMU->HFBUSCLKEN0 |= CMU_HFBUSCLKEN0_CRYPTO0;
    1728:	4a03      	ldr	r2, [pc, #12]	; (1738 <crypto_init+0x10>)
    172a:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
    172e:	f043 0302 	orr.w	r3, r3, #2
    1732:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
}
    1736:	4770      	bx	lr
    1738:	400e4000 	.word	0x400e4000

0000173c <_hardfault_isr>:

void trace_stack(uint32_t *pulFaultStackAddress);

void __attribute__ ((naked)) _hardfault_isr()
{
    __asm__ volatile
    173c:	f01e 0f04 	tst.w	lr, #4
    1740:	bf0c      	ite	eq
    1742:	f3ef 8008 	mrseq	r0, MSP
    1746:	f3ef 8009 	mrsne	r0, PSP
    174a:	6981      	ldr	r1, [r0, #24]
    174c:	4a00      	ldr	r2, [pc, #0]	; (1750 <hardfault_trace_stack_addr>)
    174e:	4710      	bx	r2

00001750 <hardfault_trace_stack_addr>:
    1750:	0000179d 	.word	0x0000179d

00001754 <_memmanage_isr>:
    );
}

void __attribute__ ((naked)) _memmanage_isr()
{
    __asm__ volatile
    1754:	f01e 0f04 	tst.w	lr, #4
    1758:	bf0c      	ite	eq
    175a:	f3ef 8008 	mrseq	r0, MSP
    175e:	f3ef 8009 	mrsne	r0, PSP
    1762:	6981      	ldr	r1, [r0, #24]
    1764:	4a00      	ldr	r2, [pc, #0]	; (1768 <memmanage_trace_stack_addr>)
    1766:	4710      	bx	r2

00001768 <memmanage_trace_stack_addr>:
    1768:	00001881 	.word	0x00001881

0000176c <_busfault_isr>:
    );
}

void __attribute__ ((naked)) _busfault_isr()
{
    __asm__ volatile
    176c:	f01e 0f04 	tst.w	lr, #4
    1770:	bf0c      	ite	eq
    1772:	f3ef 8008 	mrseq	r0, MSP
    1776:	f3ef 8009 	mrsne	r0, PSP
    177a:	6981      	ldr	r1, [r0, #24]
    177c:	4a00      	ldr	r2, [pc, #0]	; (1780 <busfault_trace_stack_addr>)
    177e:	4710      	bx	r2

00001780 <busfault_trace_stack_addr>:
    1780:	00001975 	.word	0x00001975

00001784 <_usagefault_isr>:
    );
}

void __attribute__ ((naked)) _usagefault_isr()
{
    __asm__ volatile
    1784:	f01e 0f04 	tst.w	lr, #4
    1788:	bf0c      	ite	eq
    178a:	f3ef 8008 	mrseq	r0, MSP
    178e:	f3ef 8009 	mrsne	r0, PSP
    1792:	6981      	ldr	r1, [r0, #24]
    1794:	4a00      	ldr	r2, [pc, #0]	; (1798 <usagefault_trace_stack_addr>)
    1796:	4710      	bx	r2

00001798 <usagefault_trace_stack_addr>:
    1798:	00001a75 	.word	0x00001a75

0000179c <hardfault_trace_stack>:
        " usagefault_trace_stack_addr: .word usagefault_trace_stack \n"
    );
}

void hardfault_trace_stack(uint32_t *pulFaultStackAddress)
{
    179c:	b500      	push	{lr}
    179e:	b089      	sub	sp, #36	; 0x24
    volatile uint32_t r0 = pulFaultStackAddress[0];
    17a0:	6803      	ldr	r3, [r0, #0]
    17a2:	9300      	str	r3, [sp, #0]
    volatile uint32_t r1 = pulFaultStackAddress[1];
    17a4:	6843      	ldr	r3, [r0, #4]
    17a6:	9301      	str	r3, [sp, #4]
    volatile uint32_t r2 = pulFaultStackAddress[2];
    17a8:	6883      	ldr	r3, [r0, #8]
    17aa:	9302      	str	r3, [sp, #8]
    volatile uint32_t r3 = pulFaultStackAddress[3];
    17ac:	68c3      	ldr	r3, [r0, #12]
    17ae:	9303      	str	r3, [sp, #12]
    volatile uint32_t r12 = pulFaultStackAddress[4];
    17b0:	6903      	ldr	r3, [r0, #16]
    17b2:	9304      	str	r3, [sp, #16]
    volatile uint32_t lr = pulFaultStackAddress[5];
    17b4:	6943      	ldr	r3, [r0, #20]
    17b6:	9305      	str	r3, [sp, #20]
    volatile uint32_t pc = pulFaultStackAddress[6];
    17b8:	6983      	ldr	r3, [r0, #24]
    17ba:	9306      	str	r3, [sp, #24]
    volatile uint32_t psr = pulFaultStackAddress[7];

    DBGPRINTLN_CTX("Hard fault! Stack trace:");
    17bc:	4921      	ldr	r1, [pc, #132]	; (1844 <hardfault_trace_stack+0xa8>)
    volatile uint32_t psr = pulFaultStackAddress[7];
    17be:	69c3      	ldr	r3, [r0, #28]
    DBGPRINTLN_CTX("Hard fault! Stack trace:");
    17c0:	4821      	ldr	r0, [pc, #132]	; (1848 <hardfault_trace_stack+0xac>)
    volatile uint32_t psr = pulFaultStackAddress[7];
    17c2:	9307      	str	r3, [sp, #28]
    DBGPRINTLN_CTX("Hard fault! Stack trace:");
    17c4:	f002 fd76 	bl	42b4 <printf>
    DBGPRINTLN_CTX("R0 [0x%08X]", r0);
    17c8:	9a00      	ldr	r2, [sp, #0]
    17ca:	491e      	ldr	r1, [pc, #120]	; (1844 <hardfault_trace_stack+0xa8>)
    17cc:	481f      	ldr	r0, [pc, #124]	; (184c <hardfault_trace_stack+0xb0>)
    DBGPRINTLN_CTX("R12 [0x%08X]", r12);
    DBGPRINTLN_CTX("LR [R14] [0x%08X] call return", lr);
    DBGPRINTLN_CTX("PC [R15] [0x%08X] program counter", pc);
    DBGPRINTLN_CTX("PSR [0x%08X] program status register", psr);
    DBGPRINTLN_CTX("------------------------------");
    DBGPRINTLN_CTX("HFSR [0x%08X]", SCB->HFSR);
    17ce:	4c20      	ldr	r4, [pc, #128]	; (1850 <hardfault_trace_stack+0xb4>)
    DBGPRINTLN_CTX("R0 [0x%08X]", r0);
    17d0:	f002 fd70 	bl	42b4 <printf>
    DBGPRINTLN_CTX("R1 [0x%08X]", r1);
    17d4:	9a01      	ldr	r2, [sp, #4]
    17d6:	491b      	ldr	r1, [pc, #108]	; (1844 <hardfault_trace_stack+0xa8>)
    17d8:	481e      	ldr	r0, [pc, #120]	; (1854 <hardfault_trace_stack+0xb8>)
    17da:	f002 fd6b 	bl	42b4 <printf>
    DBGPRINTLN_CTX("R2 [0x%08X]", r2);
    17de:	9a02      	ldr	r2, [sp, #8]
    17e0:	4918      	ldr	r1, [pc, #96]	; (1844 <hardfault_trace_stack+0xa8>)
    17e2:	481d      	ldr	r0, [pc, #116]	; (1858 <hardfault_trace_stack+0xbc>)
    17e4:	f002 fd66 	bl	42b4 <printf>
    DBGPRINTLN_CTX("R3 [0x%08X]", r3);
    17e8:	9a03      	ldr	r2, [sp, #12]
    17ea:	4916      	ldr	r1, [pc, #88]	; (1844 <hardfault_trace_stack+0xa8>)
    17ec:	481b      	ldr	r0, [pc, #108]	; (185c <hardfault_trace_stack+0xc0>)
    17ee:	f002 fd61 	bl	42b4 <printf>
    DBGPRINTLN_CTX("R12 [0x%08X]", r12);
    17f2:	9a04      	ldr	r2, [sp, #16]
    17f4:	4913      	ldr	r1, [pc, #76]	; (1844 <hardfault_trace_stack+0xa8>)
    17f6:	481a      	ldr	r0, [pc, #104]	; (1860 <hardfault_trace_stack+0xc4>)
    17f8:	f002 fd5c 	bl	42b4 <printf>
    DBGPRINTLN_CTX("LR [R14] [0x%08X] call return", lr);
    17fc:	9a05      	ldr	r2, [sp, #20]
    17fe:	4911      	ldr	r1, [pc, #68]	; (1844 <hardfault_trace_stack+0xa8>)
    1800:	4818      	ldr	r0, [pc, #96]	; (1864 <hardfault_trace_stack+0xc8>)
    1802:	f002 fd57 	bl	42b4 <printf>
    DBGPRINTLN_CTX("PC [R15] [0x%08X] program counter", pc);
    1806:	9a06      	ldr	r2, [sp, #24]
    1808:	490e      	ldr	r1, [pc, #56]	; (1844 <hardfault_trace_stack+0xa8>)
    180a:	4817      	ldr	r0, [pc, #92]	; (1868 <hardfault_trace_stack+0xcc>)
    180c:	f002 fd52 	bl	42b4 <printf>
    DBGPRINTLN_CTX("PSR [0x%08X] program status register", psr);
    1810:	9a07      	ldr	r2, [sp, #28]
    1812:	490c      	ldr	r1, [pc, #48]	; (1844 <hardfault_trace_stack+0xa8>)
    1814:	4815      	ldr	r0, [pc, #84]	; (186c <hardfault_trace_stack+0xd0>)
    1816:	f002 fd4d 	bl	42b4 <printf>
    DBGPRINTLN_CTX("------------------------------");
    181a:	490a      	ldr	r1, [pc, #40]	; (1844 <hardfault_trace_stack+0xa8>)
    181c:	4814      	ldr	r0, [pc, #80]	; (1870 <hardfault_trace_stack+0xd4>)
    181e:	f002 fd49 	bl	42b4 <printf>
    DBGPRINTLN_CTX("HFSR [0x%08X]", SCB->HFSR);
    1822:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1824:	4907      	ldr	r1, [pc, #28]	; (1844 <hardfault_trace_stack+0xa8>)
    1826:	4813      	ldr	r0, [pc, #76]	; (1874 <hardfault_trace_stack+0xd8>)
    1828:	f002 fd44 	bl	42b4 <printf>
    DBGPRINTLN_CTX("ICSR [0x%08X]", SCB->ICSR);
    182c:	6862      	ldr	r2, [r4, #4]
    182e:	4905      	ldr	r1, [pc, #20]	; (1844 <hardfault_trace_stack+0xa8>)
    1830:	4811      	ldr	r0, [pc, #68]	; (1878 <hardfault_trace_stack+0xdc>)
    1832:	f002 fd3f 	bl	42b4 <printf>
 */
__STATIC_FORCEINLINE uint32_t __get_MSP(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, msp" : "=r" (result) );
    1836:	f3ef 8208 	mrs	r2, MSP
    DBGPRINTLN_CTX("MSP [0x%08X]", __get_MSP());
    183a:	4902      	ldr	r1, [pc, #8]	; (1844 <hardfault_trace_stack+0xa8>)
    183c:	480f      	ldr	r0, [pc, #60]	; (187c <hardfault_trace_stack+0xe0>)
    183e:	f002 fd39 	bl	42b4 <printf>

    while(1);
    1842:	e7fe      	b.n	1842 <hardfault_trace_stack+0xa6>
    1844:	0000452c 	.word	0x0000452c
    1848:	000045d3 	.word	0x000045d3
    184c:	000045f5 	.word	0x000045f5
    1850:	e000ed00 	.word	0xe000ed00
    1854:	0000460a 	.word	0x0000460a
    1858:	0000461f 	.word	0x0000461f
    185c:	00004634 	.word	0x00004634
    1860:	00004649 	.word	0x00004649
    1864:	0000465f 	.word	0x0000465f
    1868:	00004686 	.word	0x00004686
    186c:	000046b1 	.word	0x000046b1
    1870:	000046df 	.word	0x000046df
    1874:	00004707 	.word	0x00004707
    1878:	0000471e 	.word	0x0000471e
    187c:	00004735 	.word	0x00004735

00001880 <memmanage_trace_stack>:
}

void memmanage_trace_stack(uint32_t *pulFaultStackAddress)
{
    1880:	b500      	push	{lr}
    1882:	b089      	sub	sp, #36	; 0x24
    volatile uint32_t r0 = pulFaultStackAddress[0];
    1884:	6803      	ldr	r3, [r0, #0]
    1886:	9300      	str	r3, [sp, #0]
    volatile uint32_t r1 = pulFaultStackAddress[1];
    1888:	6843      	ldr	r3, [r0, #4]
    188a:	9301      	str	r3, [sp, #4]
    volatile uint32_t r2 = pulFaultStackAddress[2];
    188c:	6883      	ldr	r3, [r0, #8]
    188e:	9302      	str	r3, [sp, #8]
    volatile uint32_t r3 = pulFaultStackAddress[3];
    1890:	68c3      	ldr	r3, [r0, #12]
    1892:	9303      	str	r3, [sp, #12]
    volatile uint32_t r12 = pulFaultStackAddress[4];
    1894:	6903      	ldr	r3, [r0, #16]
    1896:	9304      	str	r3, [sp, #16]
    volatile uint32_t lr = pulFaultStackAddress[5];
    1898:	6943      	ldr	r3, [r0, #20]
    189a:	9305      	str	r3, [sp, #20]
    volatile uint32_t pc = pulFaultStackAddress[6];
    189c:	6983      	ldr	r3, [r0, #24]
    189e:	9306      	str	r3, [sp, #24]
    volatile uint32_t psr = pulFaultStackAddress[7];

    DBGPRINTLN_CTX("Memory management fault! Stack trace:");
    18a0:	4924      	ldr	r1, [pc, #144]	; (1934 <memmanage_trace_stack+0xb4>)
    volatile uint32_t psr = pulFaultStackAddress[7];
    18a2:	69c3      	ldr	r3, [r0, #28]
    DBGPRINTLN_CTX("Memory management fault! Stack trace:");
    18a4:	4824      	ldr	r0, [pc, #144]	; (1938 <memmanage_trace_stack+0xb8>)
    volatile uint32_t psr = pulFaultStackAddress[7];
    18a6:	9307      	str	r3, [sp, #28]
    DBGPRINTLN_CTX("Memory management fault! Stack trace:");
    18a8:	f002 fd04 	bl	42b4 <printf>
    DBGPRINTLN_CTX("R0 [0x%08X]", r0);
    18ac:	9a00      	ldr	r2, [sp, #0]
    18ae:	4921      	ldr	r1, [pc, #132]	; (1934 <memmanage_trace_stack+0xb4>)
    18b0:	4822      	ldr	r0, [pc, #136]	; (193c <memmanage_trace_stack+0xbc>)
    DBGPRINTLN_CTX("R12 [0x%08X]", r12);
    DBGPRINTLN_CTX("LR [R14] [0x%08X] call return", lr);
    DBGPRINTLN_CTX("PC [R15] [0x%08X] program counter", pc);
    DBGPRINTLN_CTX("PSR [0x%08X] program status register", psr);
    DBGPRINTLN_CTX("------------------------------");
    DBGPRINTLN_CTX("MMFSR [0x%02X]", (SCB->CFSR >> 0) & 0xFF);
    18b2:	4c23      	ldr	r4, [pc, #140]	; (1940 <memmanage_trace_stack+0xc0>)
    DBGPRINTLN_CTX("R0 [0x%08X]", r0);
    18b4:	f002 fcfe 	bl	42b4 <printf>
    DBGPRINTLN_CTX("R1 [0x%08X]", r1);
    18b8:	9a01      	ldr	r2, [sp, #4]
    18ba:	491e      	ldr	r1, [pc, #120]	; (1934 <memmanage_trace_stack+0xb4>)
    18bc:	4821      	ldr	r0, [pc, #132]	; (1944 <memmanage_trace_stack+0xc4>)
    18be:	f002 fcf9 	bl	42b4 <printf>
    DBGPRINTLN_CTX("R2 [0x%08X]", r2);
    18c2:	9a02      	ldr	r2, [sp, #8]
    18c4:	491b      	ldr	r1, [pc, #108]	; (1934 <memmanage_trace_stack+0xb4>)
    18c6:	4820      	ldr	r0, [pc, #128]	; (1948 <memmanage_trace_stack+0xc8>)
    18c8:	f002 fcf4 	bl	42b4 <printf>
    DBGPRINTLN_CTX("R3 [0x%08X]", r3);
    18cc:	9a03      	ldr	r2, [sp, #12]
    18ce:	4919      	ldr	r1, [pc, #100]	; (1934 <memmanage_trace_stack+0xb4>)
    18d0:	481e      	ldr	r0, [pc, #120]	; (194c <memmanage_trace_stack+0xcc>)
    18d2:	f002 fcef 	bl	42b4 <printf>
    DBGPRINTLN_CTX("R12 [0x%08X]", r12);
    18d6:	9a04      	ldr	r2, [sp, #16]
    18d8:	4916      	ldr	r1, [pc, #88]	; (1934 <memmanage_trace_stack+0xb4>)
    18da:	481d      	ldr	r0, [pc, #116]	; (1950 <memmanage_trace_stack+0xd0>)
    18dc:	f002 fcea 	bl	42b4 <printf>
    DBGPRINTLN_CTX("LR [R14] [0x%08X] call return", lr);
    18e0:	9a05      	ldr	r2, [sp, #20]
    18e2:	4914      	ldr	r1, [pc, #80]	; (1934 <memmanage_trace_stack+0xb4>)
    18e4:	481b      	ldr	r0, [pc, #108]	; (1954 <memmanage_trace_stack+0xd4>)
    18e6:	f002 fce5 	bl	42b4 <printf>
    DBGPRINTLN_CTX("PC [R15] [0x%08X] program counter", pc);
    18ea:	9a06      	ldr	r2, [sp, #24]
    18ec:	4911      	ldr	r1, [pc, #68]	; (1934 <memmanage_trace_stack+0xb4>)
    18ee:	481a      	ldr	r0, [pc, #104]	; (1958 <memmanage_trace_stack+0xd8>)
    18f0:	f002 fce0 	bl	42b4 <printf>
    DBGPRINTLN_CTX("PSR [0x%08X] program status register", psr);
    18f4:	9a07      	ldr	r2, [sp, #28]
    18f6:	490f      	ldr	r1, [pc, #60]	; (1934 <memmanage_trace_stack+0xb4>)
    18f8:	4818      	ldr	r0, [pc, #96]	; (195c <memmanage_trace_stack+0xdc>)
    18fa:	f002 fcdb 	bl	42b4 <printf>
    DBGPRINTLN_CTX("------------------------------");
    18fe:	490d      	ldr	r1, [pc, #52]	; (1934 <memmanage_trace_stack+0xb4>)
    1900:	4817      	ldr	r0, [pc, #92]	; (1960 <memmanage_trace_stack+0xe0>)
    1902:	f002 fcd7 	bl	42b4 <printf>
    DBGPRINTLN_CTX("MMFSR [0x%02X]", (SCB->CFSR >> 0) & 0xFF);
    1906:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1908:	490a      	ldr	r1, [pc, #40]	; (1934 <memmanage_trace_stack+0xb4>)
    190a:	4816      	ldr	r0, [pc, #88]	; (1964 <memmanage_trace_stack+0xe4>)
    190c:	b2d2      	uxtb	r2, r2
    190e:	f002 fcd1 	bl	42b4 <printf>
    DBGPRINTLN_CTX("MMFAR [0x%08X]", SCB->MMFAR);
    1912:	6b62      	ldr	r2, [r4, #52]	; 0x34
    1914:	4907      	ldr	r1, [pc, #28]	; (1934 <memmanage_trace_stack+0xb4>)
    1916:	4814      	ldr	r0, [pc, #80]	; (1968 <memmanage_trace_stack+0xe8>)
    1918:	f002 fccc 	bl	42b4 <printf>
    DBGPRINTLN_CTX("ICSR [0x%08X]", SCB->ICSR);
    191c:	6862      	ldr	r2, [r4, #4]
    191e:	4905      	ldr	r1, [pc, #20]	; (1934 <memmanage_trace_stack+0xb4>)
    1920:	4812      	ldr	r0, [pc, #72]	; (196c <memmanage_trace_stack+0xec>)
    1922:	f002 fcc7 	bl	42b4 <printf>
    1926:	f3ef 8208 	mrs	r2, MSP
    DBGPRINTLN_CTX("MSP [0x%08X]", __get_MSP());
    192a:	4902      	ldr	r1, [pc, #8]	; (1934 <memmanage_trace_stack+0xb4>)
    192c:	4810      	ldr	r0, [pc, #64]	; (1970 <memmanage_trace_stack+0xf0>)
    192e:	f002 fcc1 	bl	42b4 <printf>

    while(1);
    1932:	e7fe      	b.n	1932 <memmanage_trace_stack+0xb2>
    1934:	00004542 	.word	0x00004542
    1938:	0000474b 	.word	0x0000474b
    193c:	000045f5 	.word	0x000045f5
    1940:	e000ed00 	.word	0xe000ed00
    1944:	0000460a 	.word	0x0000460a
    1948:	0000461f 	.word	0x0000461f
    194c:	00004634 	.word	0x00004634
    1950:	00004649 	.word	0x00004649
    1954:	0000465f 	.word	0x0000465f
    1958:	00004686 	.word	0x00004686
    195c:	000046b1 	.word	0x000046b1
    1960:	000046df 	.word	0x000046df
    1964:	0000477a 	.word	0x0000477a
    1968:	00004792 	.word	0x00004792
    196c:	0000471e 	.word	0x0000471e
    1970:	00004735 	.word	0x00004735

00001974 <busfault_trace_stack>:
}

void busfault_trace_stack(uint32_t *pulFaultStackAddress)
{
    1974:	b500      	push	{lr}
    1976:	b089      	sub	sp, #36	; 0x24
    volatile uint32_t r0 = pulFaultStackAddress[0];
    1978:	6803      	ldr	r3, [r0, #0]
    197a:	9300      	str	r3, [sp, #0]
    volatile uint32_t r1 = pulFaultStackAddress[1];
    197c:	6843      	ldr	r3, [r0, #4]
    197e:	9301      	str	r3, [sp, #4]
    volatile uint32_t r2 = pulFaultStackAddress[2];
    1980:	6883      	ldr	r3, [r0, #8]
    1982:	9302      	str	r3, [sp, #8]
    volatile uint32_t r3 = pulFaultStackAddress[3];
    1984:	68c3      	ldr	r3, [r0, #12]
    1986:	9303      	str	r3, [sp, #12]
    volatile uint32_t r12 = pulFaultStackAddress[4];
    1988:	6903      	ldr	r3, [r0, #16]
    198a:	9304      	str	r3, [sp, #16]
    volatile uint32_t lr = pulFaultStackAddress[5];
    198c:	6943      	ldr	r3, [r0, #20]
    198e:	9305      	str	r3, [sp, #20]
    volatile uint32_t pc = pulFaultStackAddress[6];
    1990:	6983      	ldr	r3, [r0, #24]
    1992:	9306      	str	r3, [sp, #24]
    volatile uint32_t psr = pulFaultStackAddress[7];

    DBGPRINTLN_CTX("Bus fault! Stack trace:");
    1994:	4927      	ldr	r1, [pc, #156]	; (1a34 <busfault_trace_stack+0xc0>)
    volatile uint32_t psr = pulFaultStackAddress[7];
    1996:	69c3      	ldr	r3, [r0, #28]
    DBGPRINTLN_CTX("Bus fault! Stack trace:");
    1998:	4827      	ldr	r0, [pc, #156]	; (1a38 <busfault_trace_stack+0xc4>)
    volatile uint32_t psr = pulFaultStackAddress[7];
    199a:	9307      	str	r3, [sp, #28]
    DBGPRINTLN_CTX("Bus fault! Stack trace:");
    199c:	f002 fc8a 	bl	42b4 <printf>
    DBGPRINTLN_CTX("R0 [0x%08X]", r0);
    19a0:	9a00      	ldr	r2, [sp, #0]
    19a2:	4924      	ldr	r1, [pc, #144]	; (1a34 <busfault_trace_stack+0xc0>)
    19a4:	4825      	ldr	r0, [pc, #148]	; (1a3c <busfault_trace_stack+0xc8>)
    DBGPRINTLN_CTX("R12 [0x%08X]", r12);
    DBGPRINTLN_CTX("LR [R14] [0x%08X] call return", lr);
    DBGPRINTLN_CTX("PC [R15] [0x%08X] program counter", pc);
    DBGPRINTLN_CTX("PSR [0x%08X] program status register", psr);
    DBGPRINTLN_CTX("------------------------------");
    DBGPRINTLN_CTX("BFSR [0x%02X]", (SCB->CFSR >> 8) & 0xFF);
    19a6:	4c26      	ldr	r4, [pc, #152]	; (1a40 <busfault_trace_stack+0xcc>)
    DBGPRINTLN_CTX("R0 [0x%08X]", r0);
    19a8:	f002 fc84 	bl	42b4 <printf>
    DBGPRINTLN_CTX("R1 [0x%08X]", r1);
    19ac:	9a01      	ldr	r2, [sp, #4]
    19ae:	4921      	ldr	r1, [pc, #132]	; (1a34 <busfault_trace_stack+0xc0>)
    19b0:	4824      	ldr	r0, [pc, #144]	; (1a44 <busfault_trace_stack+0xd0>)
    19b2:	f002 fc7f 	bl	42b4 <printf>
    DBGPRINTLN_CTX("R2 [0x%08X]", r2);
    19b6:	9a02      	ldr	r2, [sp, #8]
    19b8:	491e      	ldr	r1, [pc, #120]	; (1a34 <busfault_trace_stack+0xc0>)
    19ba:	4823      	ldr	r0, [pc, #140]	; (1a48 <busfault_trace_stack+0xd4>)
    19bc:	f002 fc7a 	bl	42b4 <printf>
    DBGPRINTLN_CTX("R3 [0x%08X]", r3);
    19c0:	9a03      	ldr	r2, [sp, #12]
    19c2:	491c      	ldr	r1, [pc, #112]	; (1a34 <busfault_trace_stack+0xc0>)
    19c4:	4821      	ldr	r0, [pc, #132]	; (1a4c <busfault_trace_stack+0xd8>)
    19c6:	f002 fc75 	bl	42b4 <printf>
    DBGPRINTLN_CTX("R12 [0x%08X]", r12);
    19ca:	9a04      	ldr	r2, [sp, #16]
    19cc:	4919      	ldr	r1, [pc, #100]	; (1a34 <busfault_trace_stack+0xc0>)
    19ce:	4820      	ldr	r0, [pc, #128]	; (1a50 <busfault_trace_stack+0xdc>)
    19d0:	f002 fc70 	bl	42b4 <printf>
    DBGPRINTLN_CTX("LR [R14] [0x%08X] call return", lr);
    19d4:	9a05      	ldr	r2, [sp, #20]
    19d6:	4917      	ldr	r1, [pc, #92]	; (1a34 <busfault_trace_stack+0xc0>)
    19d8:	481e      	ldr	r0, [pc, #120]	; (1a54 <busfault_trace_stack+0xe0>)
    19da:	f002 fc6b 	bl	42b4 <printf>
    DBGPRINTLN_CTX("PC [R15] [0x%08X] program counter", pc);
    19de:	9a06      	ldr	r2, [sp, #24]
    19e0:	4914      	ldr	r1, [pc, #80]	; (1a34 <busfault_trace_stack+0xc0>)
    19e2:	481d      	ldr	r0, [pc, #116]	; (1a58 <busfault_trace_stack+0xe4>)
    19e4:	f002 fc66 	bl	42b4 <printf>
    DBGPRINTLN_CTX("PSR [0x%08X] program status register", psr);
    19e8:	9a07      	ldr	r2, [sp, #28]
    19ea:	4912      	ldr	r1, [pc, #72]	; (1a34 <busfault_trace_stack+0xc0>)
    19ec:	481b      	ldr	r0, [pc, #108]	; (1a5c <busfault_trace_stack+0xe8>)
    19ee:	f002 fc61 	bl	42b4 <printf>
    DBGPRINTLN_CTX("------------------------------");
    19f2:	4910      	ldr	r1, [pc, #64]	; (1a34 <busfault_trace_stack+0xc0>)
    19f4:	481a      	ldr	r0, [pc, #104]	; (1a60 <busfault_trace_stack+0xec>)
    19f6:	f002 fc5d 	bl	42b4 <printf>
    DBGPRINTLN_CTX("BFSR [0x%02X]", (SCB->CFSR >> 8) & 0xFF);
    19fa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    19fc:	490d      	ldr	r1, [pc, #52]	; (1a34 <busfault_trace_stack+0xc0>)
    19fe:	4819      	ldr	r0, [pc, #100]	; (1a64 <busfault_trace_stack+0xf0>)
    1a00:	f3c2 2207 	ubfx	r2, r2, #8, #8
    1a04:	f002 fc56 	bl	42b4 <printf>
    DBGPRINTLN_CTX("BFAR [0x%08X]", SCB->BFAR);
    1a08:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    1a0a:	490a      	ldr	r1, [pc, #40]	; (1a34 <busfault_trace_stack+0xc0>)
    1a0c:	4816      	ldr	r0, [pc, #88]	; (1a68 <busfault_trace_stack+0xf4>)
    1a0e:	f002 fc51 	bl	42b4 <printf>
    DBGPRINTLN_CTX("ICSR [0x%08X]", SCB->ICSR);
    1a12:	6862      	ldr	r2, [r4, #4]
    1a14:	4907      	ldr	r1, [pc, #28]	; (1a34 <busfault_trace_stack+0xc0>)
    1a16:	4815      	ldr	r0, [pc, #84]	; (1a6c <busfault_trace_stack+0xf8>)
    1a18:	f002 fc4c 	bl	42b4 <printf>
    1a1c:	f3ef 8208 	mrs	r2, MSP
    DBGPRINTLN_CTX("MSP [0x%08X]", __get_MSP());
    1a20:	4904      	ldr	r1, [pc, #16]	; (1a34 <busfault_trace_stack+0xc0>)
    1a22:	4813      	ldr	r0, [pc, #76]	; (1a70 <busfault_trace_stack+0xfc>)
    1a24:	f002 fc46 	bl	42b4 <printf>

    MSC->CACHECMD = MSC_CACHECMD_INVCACHE;
    1a28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1a2c:	2201      	movs	r2, #1
    1a2e:	645a      	str	r2, [r3, #68]	; 0x44

    while(1);
    1a30:	e7fe      	b.n	1a30 <busfault_trace_stack+0xbc>
    1a32:	bf00      	nop
    1a34:	00004558 	.word	0x00004558
    1a38:	00004584 	.word	0x00004584
    1a3c:	000045f5 	.word	0x000045f5
    1a40:	e000ed00 	.word	0xe000ed00
    1a44:	0000460a 	.word	0x0000460a
    1a48:	0000461f 	.word	0x0000461f
    1a4c:	00004634 	.word	0x00004634
    1a50:	00004649 	.word	0x00004649
    1a54:	0000465f 	.word	0x0000465f
    1a58:	00004686 	.word	0x00004686
    1a5c:	000046b1 	.word	0x000046b1
    1a60:	000046df 	.word	0x000046df
    1a64:	000045a5 	.word	0x000045a5
    1a68:	000045bc 	.word	0x000045bc
    1a6c:	0000471e 	.word	0x0000471e
    1a70:	00004735 	.word	0x00004735

00001a74 <usagefault_trace_stack>:
}

void usagefault_trace_stack(uint32_t *pulFaultStackAddress)
{
    1a74:	b500      	push	{lr}
    1a76:	b089      	sub	sp, #36	; 0x24
    volatile uint32_t r0 = pulFaultStackAddress[0];
    1a78:	6803      	ldr	r3, [r0, #0]
    1a7a:	9300      	str	r3, [sp, #0]
    volatile uint32_t r1 = pulFaultStackAddress[1];
    1a7c:	6843      	ldr	r3, [r0, #4]
    1a7e:	9301      	str	r3, [sp, #4]
    volatile uint32_t r2 = pulFaultStackAddress[2];
    1a80:	6883      	ldr	r3, [r0, #8]
    1a82:	9302      	str	r3, [sp, #8]
    volatile uint32_t r3 = pulFaultStackAddress[3];
    1a84:	68c3      	ldr	r3, [r0, #12]
    1a86:	9303      	str	r3, [sp, #12]
    volatile uint32_t r12 = pulFaultStackAddress[4];
    1a88:	6903      	ldr	r3, [r0, #16]
    1a8a:	9304      	str	r3, [sp, #16]
    volatile uint32_t lr = pulFaultStackAddress[5];
    1a8c:	6943      	ldr	r3, [r0, #20]
    1a8e:	9305      	str	r3, [sp, #20]
    volatile uint32_t pc = pulFaultStackAddress[6];
    1a90:	6983      	ldr	r3, [r0, #24]
    1a92:	9306      	str	r3, [sp, #24]
    volatile uint32_t psr = pulFaultStackAddress[7];

    DBGPRINTLN_CTX("Usage fault! Stack trace:");
    1a94:	4922      	ldr	r1, [pc, #136]	; (1b20 <usagefault_trace_stack+0xac>)
    volatile uint32_t psr = pulFaultStackAddress[7];
    1a96:	69c3      	ldr	r3, [r0, #28]
    DBGPRINTLN_CTX("Usage fault! Stack trace:");
    1a98:	4822      	ldr	r0, [pc, #136]	; (1b24 <usagefault_trace_stack+0xb0>)
    volatile uint32_t psr = pulFaultStackAddress[7];
    1a9a:	9307      	str	r3, [sp, #28]
    DBGPRINTLN_CTX("Usage fault! Stack trace:");
    1a9c:	f002 fc0a 	bl	42b4 <printf>
    DBGPRINTLN_CTX("R0 [0x%08X]", r0);
    1aa0:	9a00      	ldr	r2, [sp, #0]
    1aa2:	491f      	ldr	r1, [pc, #124]	; (1b20 <usagefault_trace_stack+0xac>)
    1aa4:	4820      	ldr	r0, [pc, #128]	; (1b28 <usagefault_trace_stack+0xb4>)
    DBGPRINTLN_CTX("R12 [0x%08X]", r12);
    DBGPRINTLN_CTX("LR [R14] [0x%08X] call return", lr);
    DBGPRINTLN_CTX("PC [R15] [0x%08X] program counter", pc);
    DBGPRINTLN_CTX("PSR [0x%08X] program status register", psr);
    DBGPRINTLN_CTX("------------------------------");
    DBGPRINTLN_CTX("UFSR [0x%04X]", (SCB->CFSR >> 15) & 0xFFFF);
    1aa6:	4c21      	ldr	r4, [pc, #132]	; (1b2c <usagefault_trace_stack+0xb8>)
    DBGPRINTLN_CTX("R0 [0x%08X]", r0);
    1aa8:	f002 fc04 	bl	42b4 <printf>
    DBGPRINTLN_CTX("R1 [0x%08X]", r1);
    1aac:	9a01      	ldr	r2, [sp, #4]
    1aae:	491c      	ldr	r1, [pc, #112]	; (1b20 <usagefault_trace_stack+0xac>)
    1ab0:	481f      	ldr	r0, [pc, #124]	; (1b30 <usagefault_trace_stack+0xbc>)
    1ab2:	f002 fbff 	bl	42b4 <printf>
    DBGPRINTLN_CTX("R2 [0x%08X]", r2);
    1ab6:	9a02      	ldr	r2, [sp, #8]
    1ab8:	4919      	ldr	r1, [pc, #100]	; (1b20 <usagefault_trace_stack+0xac>)
    1aba:	481e      	ldr	r0, [pc, #120]	; (1b34 <usagefault_trace_stack+0xc0>)
    1abc:	f002 fbfa 	bl	42b4 <printf>
    DBGPRINTLN_CTX("R3 [0x%08X]", r3);
    1ac0:	9a03      	ldr	r2, [sp, #12]
    1ac2:	4917      	ldr	r1, [pc, #92]	; (1b20 <usagefault_trace_stack+0xac>)
    1ac4:	481c      	ldr	r0, [pc, #112]	; (1b38 <usagefault_trace_stack+0xc4>)
    1ac6:	f002 fbf5 	bl	42b4 <printf>
    DBGPRINTLN_CTX("R12 [0x%08X]", r12);
    1aca:	9a04      	ldr	r2, [sp, #16]
    1acc:	4914      	ldr	r1, [pc, #80]	; (1b20 <usagefault_trace_stack+0xac>)
    1ace:	481b      	ldr	r0, [pc, #108]	; (1b3c <usagefault_trace_stack+0xc8>)
    1ad0:	f002 fbf0 	bl	42b4 <printf>
    DBGPRINTLN_CTX("LR [R14] [0x%08X] call return", lr);
    1ad4:	9a05      	ldr	r2, [sp, #20]
    1ad6:	4912      	ldr	r1, [pc, #72]	; (1b20 <usagefault_trace_stack+0xac>)
    1ad8:	4819      	ldr	r0, [pc, #100]	; (1b40 <usagefault_trace_stack+0xcc>)
    1ada:	f002 fbeb 	bl	42b4 <printf>
    DBGPRINTLN_CTX("PC [R15] [0x%08X] program counter", pc);
    1ade:	9a06      	ldr	r2, [sp, #24]
    1ae0:	490f      	ldr	r1, [pc, #60]	; (1b20 <usagefault_trace_stack+0xac>)
    1ae2:	4818      	ldr	r0, [pc, #96]	; (1b44 <usagefault_trace_stack+0xd0>)
    1ae4:	f002 fbe6 	bl	42b4 <printf>
    DBGPRINTLN_CTX("PSR [0x%08X] program status register", psr);
    1ae8:	9a07      	ldr	r2, [sp, #28]
    1aea:	490d      	ldr	r1, [pc, #52]	; (1b20 <usagefault_trace_stack+0xac>)
    1aec:	4816      	ldr	r0, [pc, #88]	; (1b48 <usagefault_trace_stack+0xd4>)
    1aee:	f002 fbe1 	bl	42b4 <printf>
    DBGPRINTLN_CTX("------------------------------");
    1af2:	490b      	ldr	r1, [pc, #44]	; (1b20 <usagefault_trace_stack+0xac>)
    1af4:	4815      	ldr	r0, [pc, #84]	; (1b4c <usagefault_trace_stack+0xd8>)
    1af6:	f002 fbdd 	bl	42b4 <printf>
    DBGPRINTLN_CTX("UFSR [0x%04X]", (SCB->CFSR >> 15) & 0xFFFF);
    1afa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1afc:	4908      	ldr	r1, [pc, #32]	; (1b20 <usagefault_trace_stack+0xac>)
    1afe:	4814      	ldr	r0, [pc, #80]	; (1b50 <usagefault_trace_stack+0xdc>)
    1b00:	f3c2 32cf 	ubfx	r2, r2, #15, #16
    1b04:	f002 fbd6 	bl	42b4 <printf>
    DBGPRINTLN_CTX("ICSR [0x%08X]", SCB->ICSR);
    1b08:	6862      	ldr	r2, [r4, #4]
    1b0a:	4905      	ldr	r1, [pc, #20]	; (1b20 <usagefault_trace_stack+0xac>)
    1b0c:	4811      	ldr	r0, [pc, #68]	; (1b54 <usagefault_trace_stack+0xe0>)
    1b0e:	f002 fbd1 	bl	42b4 <printf>
    1b12:	f3ef 8208 	mrs	r2, MSP
    DBGPRINTLN_CTX("MSP [0x%08X]", __get_MSP());
    1b16:	4902      	ldr	r1, [pc, #8]	; (1b20 <usagefault_trace_stack+0xac>)
    1b18:	480f      	ldr	r0, [pc, #60]	; (1b58 <usagefault_trace_stack+0xe4>)
    1b1a:	f002 fbcb 	bl	42b4 <printf>

    while(1);
    1b1e:	e7fe      	b.n	1b1e <usagefault_trace_stack+0xaa>
    1b20:	0000456d 	.word	0x0000456d
    1b24:	000047aa 	.word	0x000047aa
    1b28:	000045f5 	.word	0x000045f5
    1b2c:	e000ed00 	.word	0xe000ed00
    1b30:	0000460a 	.word	0x0000460a
    1b34:	0000461f 	.word	0x0000461f
    1b38:	00004634 	.word	0x00004634
    1b3c:	00004649 	.word	0x00004649
    1b40:	0000465f 	.word	0x0000465f
    1b44:	00004686 	.word	0x00004686
    1b48:	000046b1 	.word	0x000046b1
    1b4c:	000046df 	.word	0x000046df
    1b50:	000047cd 	.word	0x000047cd
    1b54:	0000471e 	.word	0x0000471e
    1b58:	00004735 	.word	0x00004735

00001b5c <msc_flash_lock>:

    msc_flash_lock();
}
void msc_flash_lock()
{
    MSC->LOCK = MSC_LOCK_LOCKKEY_LOCK;
    1b5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1b60:	2200      	movs	r2, #0
    1b62:	641a      	str	r2, [r3, #64]	; 0x40
    MSC->MASSLOCK = MSC_MASSLOCK_LOCKKEY_LOCK;
    1b64:	655a      	str	r2, [r3, #84]	; 0x54
    MSC->BANKSWITCHLOCK = MSC_BANKSWITCHLOCK_BANKSWITCHLOCKKEY_LOCK;
    1b66:	671a      	str	r2, [r3, #112]	; 0x70

    MSC->WRITECTRL &= ~MSC_WRITECTRL_WREN;
    1b68:	689a      	ldr	r2, [r3, #8]
    1b6a:	f022 0201 	bic.w	r2, r2, #1
    1b6e:	609a      	str	r2, [r3, #8]
}
    1b70:	4770      	bx	lr

00001b72 <msc_flash_unlock>:
void msc_flash_unlock()
{
    MSC->LOCK = MSC_LOCK_LOCKKEY_UNLOCK;
    1b72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1b76:	f641 3271 	movw	r2, #7025	; 0x1b71
    1b7a:	641a      	str	r2, [r3, #64]	; 0x40
    MSC->MASSLOCK = MSC_MASSLOCK_LOCKKEY_UNLOCK;
    1b7c:	f246 321a 	movw	r2, #25370	; 0x631a
    1b80:	655a      	str	r2, [r3, #84]	; 0x54
    MSC->BANKSWITCHLOCK = MSC_BANKSWITCHLOCK_BANKSWITCHLOCKKEY_UNLOCK;
    1b82:	f647 422b 	movw	r2, #31787	; 0x7c2b
    1b86:	671a      	str	r2, [r3, #112]	; 0x70

    MSC->WRITECTRL |= MSC_WRITECTRL_WREN;
    1b88:	689a      	ldr	r2, [r3, #8]
    1b8a:	f042 0201 	orr.w	r2, r2, #1
    1b8e:	609a      	str	r2, [r3, #8]
}
    1b90:	4770      	bx	lr

00001b92 <msc_init>:
{
    1b92:	b508      	push	{r3, lr}
    msc_flash_unlock();
    1b94:	f7ff ffed 	bl	1b72 <msc_flash_unlock>
    MSC->CTRL |= MSC_CTRL_IFCREADCLEAR | MSC_CTRL_CLKDISFAULTEN | MSC_CTRL_ADDRFAULTEN;
    1b98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1b9c:	681a      	ldr	r2, [r3, #0]
    1b9e:	f042 020b 	orr.w	r2, r2, #11
    1ba2:	601a      	str	r2, [r3, #0]
    MSC->READCTRL |= MSC_READCTRL_SCBTP;
    1ba4:	685a      	ldr	r2, [r3, #4]
    1ba6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1baa:	605a      	str	r2, [r3, #4]
    MSC->WRITECTRL = MSC_WRITECTRL_RWWEN;
    1bac:	2220      	movs	r2, #32
    1bae:	609a      	str	r2, [r3, #8]
    MSC->BOOTLOADERCTRL = MSC_BOOTLOADERCTRL_BLWDIS;
    1bb0:	2202      	movs	r2, #2
    1bb2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    MSC->CACHECONFIG0 = MSC_CACHECONFIG0_CACHELPLEVEL_MINACTIVITY;
    1bb6:	2203      	movs	r2, #3
    1bb8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    MSC->CACHECMD = MSC_CACHECMD_INVCACHE;
    1bbc:	2201      	movs	r2, #1
    1bbe:	645a      	str	r2, [r3, #68]	; 0x44
}
    1bc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    msc_flash_lock();
    1bc4:	f7ff bfca 	b.w	1b5c <msc_flash_lock>

00001bc8 <msc_config_waitstates>:
{
    1bc8:	b508      	push	{r3, lr}
    msc_flash_unlock();
    1bca:	f7ff ffd2 	bl	1b72 <msc_flash_unlock>
    if(ulFrequency <= 18000000)
    1bce:	4b23      	ldr	r3, [pc, #140]	; (1c5c <msc_config_waitstates+0x94>)
    1bd0:	4298      	cmp	r0, r3
    1bd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1bd6:	d815      	bhi.n	1c04 <msc_config_waitstates+0x3c>
        MSC->READCTRL = (MSC->READCTRL & ~_MSC_READCTRL_MODE_MASK) | MSC_READCTRL_MODE_WS0;
    1bd8:	685a      	ldr	r2, [r3, #4]
    1bda:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
        MSC->READCTRL = (MSC->READCTRL & ~_MSC_READCTRL_MODE_MASK) | MSC_READCTRL_MODE_WS1;
    1bde:	605a      	str	r2, [r3, #4]
        MSC->CTRL &= ~MSC_CTRL_WAITMODE_WS1;
    1be0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1be4:	6813      	ldr	r3, [r2, #0]
    1be6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    1bea:	6013      	str	r3, [r2, #0]
    if(ulFrequency <= 38000000)
    1bec:	4b1c      	ldr	r3, [pc, #112]	; (1c60 <msc_config_waitstates+0x98>)
    1bee:	4298      	cmp	r0, r3
    1bf0:	d928      	bls.n	1c44 <msc_config_waitstates+0x7c>
        MSC->RAMCTRL |= MSC_RAMCTRL_RAM2WSEN | MSC_RAMCTRL_RAM2PREFETCHEN | MSC_RAMCTRL_RAM1WSEN | MSC_RAMCTRL_RAM1PREFETCHEN | MSC_RAMCTRL_RAMWSEN | MSC_RAMCTRL_RAMPREFETCHEN;
    1bf2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1bf6:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
    1bfa:	f043 1306 	orr.w	r3, r3, #393222	; 0x60006
    1bfe:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
    1c02:	e025      	b.n	1c50 <msc_config_waitstates+0x88>
    else if(ulFrequency <= 36000000)
    1c04:	4a17      	ldr	r2, [pc, #92]	; (1c64 <msc_config_waitstates+0x9c>)
    1c06:	4290      	cmp	r0, r2
    1c08:	d805      	bhi.n	1c16 <msc_config_waitstates+0x4e>
        MSC->READCTRL = (MSC->READCTRL & ~_MSC_READCTRL_MODE_MASK) | MSC_READCTRL_MODE_WS1;
    1c0a:	685a      	ldr	r2, [r3, #4]
    1c0c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
    1c10:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    1c14:	e7e3      	b.n	1bde <msc_config_waitstates+0x16>
    else if(ulFrequency <= 54000000)
    1c16:	4a14      	ldr	r2, [pc, #80]	; (1c68 <msc_config_waitstates+0xa0>)
    1c18:	4290      	cmp	r0, r2
        MSC->READCTRL = (MSC->READCTRL & ~_MSC_READCTRL_MODE_MASK) | MSC_READCTRL_MODE_WS2;
    1c1a:	685a      	ldr	r2, [r3, #4]
    else if(ulFrequency <= 54000000)
    1c1c:	d80e      	bhi.n	1c3c <msc_config_waitstates+0x74>
        MSC->READCTRL = (MSC->READCTRL & ~_MSC_READCTRL_MODE_MASK) | MSC_READCTRL_MODE_WS2;
    1c1e:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
    1c22:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
    1c26:	605a      	str	r2, [r3, #4]
    if(ulFrequency <= 50000000)
    1c28:	4b10      	ldr	r3, [pc, #64]	; (1c6c <msc_config_waitstates+0xa4>)
    1c2a:	4298      	cmp	r0, r3
    1c2c:	d9d8      	bls.n	1be0 <msc_config_waitstates+0x18>
        MSC->CTRL |= MSC_CTRL_WAITMODE_WS1;
    1c2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1c32:	6813      	ldr	r3, [r2, #0]
    1c34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    1c38:	6013      	str	r3, [r2, #0]
    if(ulFrequency <= 38000000)
    1c3a:	e7da      	b.n	1bf2 <msc_config_waitstates+0x2a>
        MSC->READCTRL = (MSC->READCTRL & ~_MSC_READCTRL_MODE_MASK) | MSC_READCTRL_MODE_WS3;
    1c3c:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
    1c40:	605a      	str	r2, [r3, #4]
    if(ulFrequency <= 50000000)
    1c42:	e7f4      	b.n	1c2e <msc_config_waitstates+0x66>
        MSC->RAMCTRL &= ~(MSC_RAMCTRL_RAM2WSEN | MSC_RAMCTRL_RAM2PREFETCHEN | MSC_RAMCTRL_RAM1WSEN | MSC_RAMCTRL_RAM1PREFETCHEN | MSC_RAMCTRL_RAMWSEN | MSC_RAMCTRL_RAMPREFETCHEN);
    1c44:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
    1c48:	f023 1306 	bic.w	r3, r3, #393222	; 0x60006
    1c4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
        MSC->RAMCTRL |= MSC_RAMCTRL_RAM2WSEN | MSC_RAMCTRL_RAM2PREFETCHEN | MSC_RAMCTRL_RAM1WSEN | MSC_RAMCTRL_RAM1PREFETCHEN | MSC_RAMCTRL_RAMWSEN | MSC_RAMCTRL_RAMPREFETCHEN;
    1c50:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    1c54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    msc_flash_lock();
    1c58:	f7ff bf80 	b.w	1b5c <msc_flash_lock>
    1c5c:	0112a880 	.word	0x0112a880
    1c60:	0243d580 	.word	0x0243d580
    1c64:	02255100 	.word	0x02255100
    1c68:	0337f980 	.word	0x0337f980
    1c6c:	02faf080 	.word	0x02faf080

00001c70 <qspi_flash_cmd.part.1>:
    
    while(!(QSPI0->CONFIG & QSPI_CONFIG_IDLE));
}


void qspi_flash_cmd(uint8_t ubOpCode, uint32_t ulAddress, uint8_t ubAddressSize, uint8_t ubModeBits, uint8_t ubDummyCycles, uint8_t *pubSrc, uint8_t ubSrcSize, uint8_t *pubDst, uint8_t ubDstSize)
    1c70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        return;
        
    if(ubDstSize && !pubDst)
        return;

    while(!(QSPI0->CONFIG & QSPI_CONFIG_IDLE));
    1c72:	4d59      	ldr	r5, [pc, #356]	; (1dd8 <qspi_flash_cmd.part.1+0x168>)
void qspi_flash_cmd(uint8_t ubOpCode, uint32_t ulAddress, uint8_t ubAddressSize, uint8_t ubModeBits, uint8_t ubDummyCycles, uint8_t *pubSrc, uint8_t ubSrcSize, uint8_t *pubDst, uint8_t ubDstSize)
    1c74:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
    1c78:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
    while(!(QSPI0->CONFIG & QSPI_CONFIG_IDLE));
    1c7c:	682f      	ldr	r7, [r5, #0]
    1c7e:	2f00      	cmp	r7, #0
    1c80:	dafc      	bge.n	1c7c <qspi_flash_cmd.part.1+0xc>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1c82:	f3ef 8710 	mrs	r7, PRIMASK

    return 1;
}
static inline uint32_t __iDisableIRQRetVal()
{
    __asm__ volatile ("cpsid i" ::: "memory");
    1c86:	b672      	cpsid	i
    
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    {
        QSPI0->CONFIG &= ~(QSPI_CONFIG_ENBDIRACCCTLR | QSPI_CONFIG_ENBSPI);
    1c88:	f8d5 e000 	ldr.w	lr, [r5]
    1c8c:	f02e 0e81 	bic.w	lr, lr, #129	; 0x81
    1c90:	f8c5 e000 	str.w	lr, [r5]
        QSPI0->CONFIG |= QSPI_CONFIG_ENBSPI;
    1c94:	f8d5 e000 	ldr.w	lr, [r5]
    1c98:	f04e 0e01 	orr.w	lr, lr, #1
    1c9c:	f8c5 e000 	str.w	lr, [r5]
        
        QSPI0->FLASHCMDCTRL = ((uint32_t)ubOpCode << _QSPI_FLASHCMDCTRL_CMDOPCODE_SHIFT) | ((uint32_t)ubDummyCycles << _QSPI_FLASHCMDCTRL_NUMDUMMYCYCLES_SHIFT) | (!!ubModeBits << _QSPI_FLASHCMDCTRL_ENBMODEBIT_SHIFT);
    1ca0:	f89d 5020 	ldrb.w	r5, [sp, #32]
    1ca4:	2b00      	cmp	r3, #0
    1ca6:	ea4f 15c5 	mov.w	r5, r5, lsl #7
    1caa:	ea45 6500 	orr.w	r5, r5, r0, lsl #24
    1cae:	bf14      	ite	ne
    1cb0:	f44f 2080 	movne.w	r0, #262144	; 0x40000
    1cb4:	2000      	moveq	r0, #0
    1cb6:	4305      	orrs	r5, r0
    1cb8:	4847      	ldr	r0, [pc, #284]	; (1dd8 <qspi_flash_cmd.part.1+0x168>)
    1cba:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90

        if(ubAddressSize)
    1cbe:	b152      	cbz	r2, 1cd6 <qspi_flash_cmd.part.1+0x66>
        {
            QSPI0->FLASHCMDCTRL |= QSPI_FLASHCMDCTRL_ENBCOMDADDR | ((uint32_t)(ubAddressSize - 1) << _QSPI_FLASHCMDCTRL_NUMADDRBYTES_SHIFT);
    1cc0:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
    1cc4:	3a01      	subs	r2, #1
    1cc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    1cca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    1cce:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
            QSPI0->FLASHCMDADDR = ulAddress;
    1cd2:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
        }

        if (ubSrcSize)
    1cd6:	b1b6      	cbz	r6, 1d06 <qspi_flash_cmd.part.1+0x96>
        {
            uint32_t pulBuf[2] = { 0, 0 };
    1cd8:	2300      	movs	r3, #0
    1cda:	e9cd 3300 	strd	r3, r3, [sp]
            uint8_t *pubBuf = (uint8_t *)pulBuf;

            QSPI0->FLASHCMDCTRL |= QSPI_FLASHCMDCTRL_ENBWRITEDATA | ((uint32_t)(ubSrcSize - 1) << _QSPI_FLASHCMDCTRL_NUMWRDATABYTES_SHIFT);
    1cde:	493e      	ldr	r1, [pc, #248]	; (1dd8 <qspi_flash_cmd.part.1+0x168>)
    1ce0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
    1ce4:	1e70      	subs	r0, r6, #1
    1ce6:	ea42 3200 	orr.w	r2, r2, r0, lsl #12
    1cea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    1cee:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90

            for (uint8_t i = 0; i < ubSrcSize; i++)
    1cf2:	b2da      	uxtb	r2, r3
    1cf4:	4296      	cmp	r6, r2
    1cf6:	d83c      	bhi.n	1d72 <qspi_flash_cmd.part.1+0x102>
                pubBuf[i] = pubSrc[i];

            QSPI0->FLASHWRDATALOWER = pulBuf[0];
    1cf8:	4b37      	ldr	r3, [pc, #220]	; (1dd8 <qspi_flash_cmd.part.1+0x168>)
    1cfa:	9a00      	ldr	r2, [sp, #0]
    1cfc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
            QSPI0->FLASHWRDATAUPPER = pulBuf[1];
    1d00:	9a01      	ldr	r2, [sp, #4]
    1d02:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        }
        
        if (ubDstSize)
    1d06:	b1bc      	cbz	r4, 1d38 <qspi_flash_cmd.part.1+0xc8>
        {
            QSPI0->FLASHCMDCTRL |= QSPI_FLASHCMDCTRL_ENBREADDATA;
    1d08:	4b33      	ldr	r3, [pc, #204]	; (1dd8 <qspi_flash_cmd.part.1+0x168>)
    1d0a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    1d0e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
    1d12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

            if(ubDstSize > 8)
    1d16:	2c08      	cmp	r4, #8
                QSPI0->FLASHCMDCTRL |= QSPI_FLASHCMDCTRL_STIGMEMBANKEN | ((uint32_t)(ubDstSize - 9) << _QSPI_FLASHCMDCTRL_NUMRDDATABYTES_SHIFT);
    1d18:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    1d1c:	bf85      	ittet	hi
    1d1e:	f1a4 0109 	subhi.w	r1, r4, #9
    1d22:	ea42 5201 	orrhi.w	r2, r2, r1, lsl #20
            else
                QSPI0->FLASHCMDCTRL |= ((uint32_t)(ubDstSize - 1) << _QSPI_FLASHCMDCTRL_NUMRDDATABYTES_SHIFT);
    1d26:	f104 31ff 	addls.w	r1, r4, #4294967295	; 0xffffffff
                QSPI0->FLASHCMDCTRL |= QSPI_FLASHCMDCTRL_STIGMEMBANKEN | ((uint32_t)(ubDstSize - 9) << _QSPI_FLASHCMDCTRL_NUMRDDATABYTES_SHIFT);
    1d2a:	f042 0204 	orrhi.w	r2, r2, #4
                QSPI0->FLASHCMDCTRL |= ((uint32_t)(ubDstSize - 1) << _QSPI_FLASHCMDCTRL_NUMRDDATABYTES_SHIFT);
    1d2e:	bf98      	it	ls
    1d30:	ea42 5201 	orrls.w	r2, r2, r1, lsl #20
    1d34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        QSPI0->FLASHCMDCTRL |= QSPI_FLASHCMDCTRL_CMDEXEC;
    1d38:	4b27      	ldr	r3, [pc, #156]	; (1dd8 <qspi_flash_cmd.part.1+0x168>)
    1d3a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    1d3e:	f042 0201 	orr.w	r2, r2, #1
    1d42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        while(QSPI0->FLASHCMDCTRL & QSPI_FLASHCMDCTRL_CMDEXECSTATUS);
    1d46:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    1d4a:	0790      	lsls	r0, r2, #30
    1d4c:	d4fb      	bmi.n	1d46 <qspi_flash_cmd.part.1+0xd6>

        if (ubDstSize)
    1d4e:	2c00      	cmp	r4, #0
    1d50:	d13d      	bne.n	1dce <qspi_flash_cmd.part.1+0x15e>

            for (uint8_t i = 0; i < ubDataLeft; i++)
                pubDstTemp[i] = pubBuf[i];
        }

        while(!(QSPI0->CONFIG & QSPI_CONFIG_IDLE));
    1d52:	4b21      	ldr	r3, [pc, #132]	; (1dd8 <qspi_flash_cmd.part.1+0x168>)
    1d54:	681a      	ldr	r2, [r3, #0]
    1d56:	2a00      	cmp	r2, #0
    1d58:	dafc      	bge.n	1d54 <qspi_flash_cmd.part.1+0xe4>

        QSPI0->CONFIG &= ~QSPI_CONFIG_ENBSPI;
    1d5a:	681a      	ldr	r2, [r3, #0]
    1d5c:	f022 0201 	bic.w	r2, r2, #1
    1d60:	601a      	str	r2, [r3, #0]
        QSPI0->CONFIG |= QSPI_CONFIG_ENBDIRACCCTLR | QSPI_CONFIG_ENBSPI;
    1d62:	681a      	ldr	r2, [r3, #0]
    1d64:	f042 0281 	orr.w	r2, r2, #129	; 0x81
    1d68:	601a      	str	r2, [r3, #0]
    __asm__ volatile ("cpsid i" ::: "memory");
    (void)__s;
}
static inline void __iRestore(const uint32_t *__s)
{
    if(!*__s)
    1d6a:	b907      	cbnz	r7, 1d6e <qspi_flash_cmd.part.1+0xfe>
        __asm__ volatile ("cpsie i" ::: "memory");
    1d6c:	b662      	cpsie	i
    }
}
    1d6e:	b003      	add	sp, #12
    1d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
                pubBuf[i] = pubSrc[i];
    1d72:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1d74:	5cd2      	ldrb	r2, [r2, r3]
    1d76:	f80d 2003 	strb.w	r2, [sp, r3]
    1d7a:	3301      	adds	r3, #1
    1d7c:	e7b9      	b.n	1cf2 <qspi_flash_cmd.part.1+0x82>
                QSPI0->FLASHCOMMANDCTRLMEM = (uint32_t)(ubDstSize - ubDataLeft) << _QSPI_FLASHCOMMANDCTRLMEM_MEMBANKADDR_SHIFT;
    1d7e:	0500      	lsls	r0, r0, #20
    1d80:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
                QSPI0->FLASHCOMMANDCTRLMEM |= QSPI_FLASHCOMMANDCTRLMEM_TRIGGERMEMBANKREQ;
    1d84:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
    1d88:	f041 0101 	orr.w	r1, r1, #1
    1d8c:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
                while(QSPI0->FLASHCOMMANDCTRLMEM & QSPI_FLASHCOMMANDCTRLMEM_MEMBANKREQINPROGRESS);
    1d90:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
    1d94:	0789      	lsls	r1, r1, #30
    1d96:	d4fb      	bmi.n	1d90 <qspi_flash_cmd.part.1+0x120>
                *pubDstTemp = (QSPI0->FLASHCOMMANDCTRLMEM & _QSPI_FLASHCOMMANDCTRLMEM_MEMBANKREADDATA_MASK) >> _QSPI_FLASHCOMMANDCTRLMEM_MEMBANKREADDATA_SHIFT;
    1d98:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
    1d9c:	0a09      	lsrs	r1, r1, #8
    1d9e:	f802 1b01 	strb.w	r1, [r2], #1
                pubDstTemp++;
    1da2:	1aa9      	subs	r1, r5, r2
            while(ubDstSize > 8 && ubDstSize - ubDataLeft < 8)
    1da4:	2c08      	cmp	r4, #8
    1da6:	b2c9      	uxtb	r1, r1
    1da8:	d902      	bls.n	1db0 <qspi_flash_cmd.part.1+0x140>
    1daa:	1a60      	subs	r0, r4, r1
    1dac:	2807      	cmp	r0, #7
    1dae:	dde6      	ble.n	1d7e <qspi_flash_cmd.part.1+0x10e>
            pulBuf[0] = QSPI0->FLASHRDDATALOWER;
    1db0:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
    1db4:	9000      	str	r0, [sp, #0]
            pulBuf[1] = QSPI0->FLASHRDDATAUPPER;
    1db6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    1dba:	9301      	str	r3, [sp, #4]
    1dbc:	2300      	movs	r3, #0
            for (uint8_t i = 0; i < ubDataLeft; i++)
    1dbe:	b2d8      	uxtb	r0, r3
    1dc0:	4281      	cmp	r1, r0
    1dc2:	d9c6      	bls.n	1d52 <qspi_flash_cmd.part.1+0xe2>
                pubDstTemp[i] = pubBuf[i];
    1dc4:	f81d 0003 	ldrb.w	r0, [sp, r3]
    1dc8:	54d0      	strb	r0, [r2, r3]
    1dca:	3301      	adds	r3, #1
    1dcc:	e7f7      	b.n	1dbe <qspi_flash_cmd.part.1+0x14e>
            uint8_t *pubDstTemp = pubDst;
    1dce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    1dd0:	4b01      	ldr	r3, [pc, #4]	; (1dd8 <qspi_flash_cmd.part.1+0x168>)
    1dd2:	1915      	adds	r5, r2, r4
    1dd4:	e7e5      	b.n	1da2 <qspi_flash_cmd.part.1+0x132>
    1dd6:	bf00      	nop
    1dd8:	4001c400 	.word	0x4001c400

00001ddc <qspi_flash_cmd>:
{
    1ddc:	b4f0      	push	{r4, r5, r6, r7}
    if(ubAddressSize > 4)
    1dde:	2a04      	cmp	r2, #4
{
    1de0:	f89d 6010 	ldrb.w	r6, [sp, #16]
    1de4:	9f05      	ldr	r7, [sp, #20]
    1de6:	f89d 4018 	ldrb.w	r4, [sp, #24]
    1dea:	f8dd c01c 	ldr.w	ip, [sp, #28]
    1dee:	f89d 5020 	ldrb.w	r5, [sp, #32]
    if(ubAddressSize > 4)
    1df2:	d813      	bhi.n	1e1c <qspi_flash_cmd+0x40>
    if(ubDummyCycles > 31)
    1df4:	2e1f      	cmp	r6, #31
    1df6:	d811      	bhi.n	1e1c <qspi_flash_cmd+0x40>
    if(ubSrcSize > 8)
    1df8:	2c08      	cmp	r4, #8
    1dfa:	d80f      	bhi.n	1e1c <qspi_flash_cmd+0x40>
    if(ubSrcSize && !pubSrc)
    1dfc:	b104      	cbz	r4, 1e00 <qspi_flash_cmd+0x24>
    1dfe:	b16f      	cbz	r7, 1e1c <qspi_flash_cmd+0x40>
    if(ubDstSize > 16)
    1e00:	2d10      	cmp	r5, #16
    1e02:	d80b      	bhi.n	1e1c <qspi_flash_cmd+0x40>
    if(ubDstSize && !pubDst)
    1e04:	b115      	cbz	r5, 1e0c <qspi_flash_cmd+0x30>
    1e06:	f1bc 0f00 	cmp.w	ip, #0
    1e0a:	d007      	beq.n	1e1c <qspi_flash_cmd+0x40>
    1e0c:	e9cd c507 	strd	ip, r5, [sp, #28]
    1e10:	e9cd 7405 	strd	r7, r4, [sp, #20]
    1e14:	9604      	str	r6, [sp, #16]
}
    1e16:	bcf0      	pop	{r4, r5, r6, r7}
    1e18:	f7ff bf2a 	b.w	1c70 <qspi_flash_cmd.part.1>
    1e1c:	bcf0      	pop	{r4, r5, r6, r7}
    1e1e:	4770      	bx	lr

00001e20 <qspi_flash_reset>:
    
    qspi_flash_unprotect_all_blocks(); // Unprotect all blocks to be able to read/write
    qspi_flash_write_status_config(qspi_flash_read_status(), qspi_flash_read_config() | BIT(1)); // Enable SIO2 and SIO3
}
void qspi_flash_reset()
{
    1e20:	b510      	push	{r4, lr}
    1e22:	b086      	sub	sp, #24
    1e24:	2400      	movs	r4, #0
    1e26:	4623      	mov	r3, r4
    1e28:	4622      	mov	r2, r4
    1e2a:	4621      	mov	r1, r4
    1e2c:	e9cd 4403 	strd	r4, r4, [sp, #12]
    1e30:	e9cd 4401 	strd	r4, r4, [sp, #4]
    1e34:	9400      	str	r4, [sp, #0]
    1e36:	2066      	movs	r0, #102	; 0x66
    1e38:	f7ff ff1a 	bl	1c70 <qspi_flash_cmd.part.1>
    if(ubDstSize && !pubDst)
    1e3c:	e9cd 4403 	strd	r4, r4, [sp, #12]
    1e40:	e9cd 4401 	strd	r4, r4, [sp, #4]
    1e44:	9400      	str	r4, [sp, #0]
    1e46:	4623      	mov	r3, r4
    1e48:	4622      	mov	r2, r4
    1e4a:	4621      	mov	r1, r4
    1e4c:	2099      	movs	r0, #153	; 0x99
    1e4e:	f7ff ff0f 	bl	1c70 <qspi_flash_cmd.part.1>
    qspi_flash_cmd(QSPI_FLASH_CMD_RESET_ENABLE, 0x00000000, 0, 0, 0, NULL, 0, NULL, 0);
    qspi_flash_cmd(QSPI_FLASH_CMD_RESET, 0x00000000, 0, 0, 0, NULL, 0, NULL, 0);
}
    1e52:	b006      	add	sp, #24
    1e54:	bd10      	pop	{r4, pc}

00001e56 <qspi_flash_read_status>:
uint8_t qspi_flash_read_status()
{
    1e56:	b500      	push	{lr}
    1e58:	b089      	sub	sp, #36	; 0x24
    if(ubDstSize && !pubDst)
    1e5a:	2301      	movs	r3, #1
    1e5c:	9304      	str	r3, [sp, #16]
    1e5e:	f10d 031f 	add.w	r3, sp, #31
    1e62:	9303      	str	r3, [sp, #12]
    1e64:	2300      	movs	r3, #0
    1e66:	e9cd 3301 	strd	r3, r3, [sp, #4]
    1e6a:	9300      	str	r3, [sp, #0]
    1e6c:	461a      	mov	r2, r3
    1e6e:	4619      	mov	r1, r3
    1e70:	2005      	movs	r0, #5
    1e72:	f7ff fefd 	bl	1c70 <qspi_flash_cmd.part.1>
    uint8_t ubStatus;

    qspi_flash_cmd(QSPI_FLASH_CMD_READ_STATUS, 0x00000000, 0, 0, 0, NULL, 0, &ubStatus, 1);

    return ubStatus;
}
    1e76:	f89d 001f 	ldrb.w	r0, [sp, #31]
    1e7a:	b009      	add	sp, #36	; 0x24
    1e7c:	f85d fb04 	ldr.w	pc, [sp], #4

00001e80 <qspi_flash_read_config>:
uint8_t qspi_flash_read_config()
{
    1e80:	b500      	push	{lr}
    1e82:	b089      	sub	sp, #36	; 0x24
    if(ubDstSize && !pubDst)
    1e84:	2301      	movs	r3, #1
    1e86:	9304      	str	r3, [sp, #16]
    1e88:	f10d 031f 	add.w	r3, sp, #31
    1e8c:	9303      	str	r3, [sp, #12]
    1e8e:	2300      	movs	r3, #0
    1e90:	e9cd 3301 	strd	r3, r3, [sp, #4]
    1e94:	9300      	str	r3, [sp, #0]
    1e96:	461a      	mov	r2, r3
    1e98:	4619      	mov	r1, r3
    1e9a:	2035      	movs	r0, #53	; 0x35
    1e9c:	f7ff fee8 	bl	1c70 <qspi_flash_cmd.part.1>
    uint8_t ubConfig;

    qspi_flash_cmd(QSPI_FLASH_CMD_READ_CFG, 0x00000000, 0, 0, 0, NULL, 0, &ubConfig, 1);

    return ubConfig;
}
    1ea0:	f89d 001f 	ldrb.w	r0, [sp, #31]
    1ea4:	b009      	add	sp, #36	; 0x24
    1ea6:	f85d fb04 	ldr.w	pc, [sp], #4

00001eaa <qspi_flash_write_enable>:
{
	while(qspi_flash_read_status() & BIT(0))
		delay_ms(1);
}
void qspi_flash_write_enable()
{
    1eaa:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    1eac:	2300      	movs	r3, #0
    1eae:	e9cd 3303 	strd	r3, r3, [sp, #12]
    1eb2:	e9cd 3301 	strd	r3, r3, [sp, #4]
    1eb6:	9300      	str	r3, [sp, #0]
    1eb8:	461a      	mov	r2, r3
    1eba:	4619      	mov	r1, r3
    1ebc:	2006      	movs	r0, #6
    1ebe:	f7ff fed7 	bl	1c70 <qspi_flash_cmd.part.1>
    qspi_flash_cmd(QSPI_FLASH_CMD_WRITE_ENABLE, 0x00000000, 0, 0, 0, NULL, 0, NULL, 0);

	while(!(qspi_flash_read_status() & BIT(1)))
    1ec2:	f7ff ffc8 	bl	1e56 <qspi_flash_read_status>
    1ec6:	0783      	lsls	r3, r0, #30
    1ec8:	d502      	bpl.n	1ed0 <qspi_flash_write_enable+0x26>
		delay_ms(1);
}
    1eca:	b007      	add	sp, #28
    1ecc:	f85d fb04 	ldr.w	pc, [sp], #4
		delay_ms(1);
    1ed0:	2001      	movs	r0, #1
    1ed2:	2100      	movs	r1, #0
    1ed4:	f001 fabe 	bl	3454 <delay_ms>
    1ed8:	e7f3      	b.n	1ec2 <qspi_flash_write_enable+0x18>

00001eda <qspi_flash_write_status_config>:
{
    1eda:	b500      	push	{lr}
    1edc:	b089      	sub	sp, #36	; 0x24
    uint8_t ubBuf[] = { ubStatus, ubConfig };
    1ede:	f88d 001c 	strb.w	r0, [sp, #28]
    1ee2:	f88d 101d 	strb.w	r1, [sp, #29]
    qspi_flash_write_enable();
    1ee6:	f7ff ffe0 	bl	1eaa <qspi_flash_write_enable>
    if(ubDstSize && !pubDst)
    1eea:	2202      	movs	r2, #2
    1eec:	2300      	movs	r3, #0
    1eee:	9202      	str	r2, [sp, #8]
    1ef0:	aa07      	add	r2, sp, #28
    1ef2:	e9cd 3200 	strd	r3, r2, [sp]
    1ef6:	e9cd 3303 	strd	r3, r3, [sp, #12]
    1efa:	461a      	mov	r2, r3
    1efc:	4619      	mov	r1, r3
    1efe:	2001      	movs	r0, #1
    1f00:	f7ff feb6 	bl	1c70 <qspi_flash_cmd.part.1>
}
    1f04:	b009      	add	sp, #36	; 0x24
    1f06:	f85d fb04 	ldr.w	pc, [sp], #4

00001f0a <qspi_flash_read_jedec_id>:
    qspi_flash_cmd(QSPI_FLASH_CMD_CHIP_ERASE, 0x00000000, 0, 0, 0, NULL, 0, NULL, 0);

    qspi_flash_busy_wait();
}
uint32_t qspi_flash_read_jedec_id()
{
    1f0a:	b500      	push	{lr}
    1f0c:	b089      	sub	sp, #36	; 0x24
    1f0e:	2203      	movs	r2, #3
	uint8_t ubBuf[] = { 0x00, 0x00, 0x00 };
    1f10:	2300      	movs	r3, #0
    1f12:	9204      	str	r2, [sp, #16]
    1f14:	aa07      	add	r2, sp, #28
    1f16:	e9cd 3202 	strd	r3, r2, [sp, #8]
    1f1a:	e9cd 3300 	strd	r3, r3, [sp]
    1f1e:	461a      	mov	r2, r3
    1f20:	4619      	mov	r1, r3
    1f22:	209f      	movs	r0, #159	; 0x9f
    1f24:	f8ad 301c 	strh.w	r3, [sp, #28]
    1f28:	f88d 301e 	strb.w	r3, [sp, #30]
    if(ubDstSize && !pubDst)
    1f2c:	f7ff fea0 	bl	1c70 <qspi_flash_cmd.part.1>

    qspi_flash_cmd(QSPI_FLASH_CMD_JEDEC_READ_ID, 0x00000000, 0, 0, 0, NULL, 0, ubBuf, 3);

	return ((uint32_t)ubBuf[0] << 16) | ((uint32_t)ubBuf[1] << 8) | (uint32_t)ubBuf[2];
    1f30:	f89d 301d 	ldrb.w	r3, [sp, #29]
    1f34:	f89d 001c 	ldrb.w	r0, [sp, #28]
    1f38:	021b      	lsls	r3, r3, #8
    1f3a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    1f3e:	f89d 001e 	ldrb.w	r0, [sp, #30]
}
    1f42:	4318      	orrs	r0, r3
    1f44:	b009      	add	sp, #36	; 0x24
    1f46:	f85d fb04 	ldr.w	pc, [sp], #4

00001f4a <qspi_flash_read_security>:
void qspi_flash_read_security(uint16_t usAddress, uint8_t *pubDst, uint8_t ubCount)
{
    1f4a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    qspi_flash_cmd(QSPI_FLASH_CMD_READ_SECURITY, usAddress, 2, 0, 8, NULL, 0, pubDst, ubCount);
    1f4c:	2300      	movs	r3, #0
    1f4e:	e9cd 1203 	strd	r1, r2, [sp, #12]
    1f52:	2208      	movs	r2, #8
    1f54:	9200      	str	r2, [sp, #0]
    1f56:	4601      	mov	r1, r0
    1f58:	e9cd 3301 	strd	r3, r3, [sp, #4]
    1f5c:	2202      	movs	r2, #2
    1f5e:	2088      	movs	r0, #136	; 0x88
    1f60:	f7ff ff3c 	bl	1ddc <qspi_flash_cmd>
}
    1f64:	b007      	add	sp, #28
    1f66:	f85d fb04 	ldr.w	pc, [sp], #4

00001f6a <qspi_flash_unprotect_all_blocks>:
{
    qspi_flash_write_enable();
    qspi_flash_cmd(QSPI_FLASH_CMD_WRITE_SECURITY, usAddress, 2, 0, 0, pubSrc, ubCount, NULL, 0);
}
void qspi_flash_unprotect_all_blocks()
{
    1f6a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	qspi_flash_write_enable();
    1f6c:	f7ff ff9d 	bl	1eaa <qspi_flash_write_enable>
    if(ubDstSize && !pubDst)
    1f70:	2300      	movs	r3, #0
    1f72:	e9cd 3303 	strd	r3, r3, [sp, #12]
    1f76:	e9cd 3301 	strd	r3, r3, [sp, #4]
    1f7a:	9300      	str	r3, [sp, #0]
    1f7c:	461a      	mov	r2, r3
    1f7e:	4619      	mov	r1, r3
    1f80:	2098      	movs	r0, #152	; 0x98
    1f82:	f7ff fe75 	bl	1c70 <qspi_flash_cmd.part.1>
    qspi_flash_cmd(QSPI_FLASH_CMD_UNLOCK_PROTECTION, 0x00000000, 0, 0, 0, NULL, 0, NULL, 0);
    1f86:	b007      	add	sp, #28
    1f88:	f85d fb04 	ldr.w	pc, [sp], #4

00001f8c <qspi_flash_init>:
{
    1f8c:	b510      	push	{r4, lr}
    qspi_flash_reset();
    1f8e:	f7ff ff47 	bl	1e20 <qspi_flash_reset>
    if(qspi_flash_read_jedec_id() != 0xBF2643)
    1f92:	f7ff ffba 	bl	1f0a <qspi_flash_read_jedec_id>
    1f96:	4b09      	ldr	r3, [pc, #36]	; (1fbc <qspi_flash_init+0x30>)
    1f98:	4298      	cmp	r0, r3
    1f9a:	d10e      	bne.n	1fba <qspi_flash_init+0x2e>
    qspi_flash_unprotect_all_blocks(); // Unprotect all blocks to be able to read/write
    1f9c:	f7ff ffe5 	bl	1f6a <qspi_flash_unprotect_all_blocks>
    qspi_flash_write_status_config(qspi_flash_read_status(), qspi_flash_read_config() | BIT(1)); // Enable SIO2 and SIO3
    1fa0:	f7ff ff59 	bl	1e56 <qspi_flash_read_status>
    1fa4:	4604      	mov	r4, r0
    1fa6:	f7ff ff6b 	bl	1e80 <qspi_flash_read_config>
    1faa:	f040 0102 	orr.w	r1, r0, #2
    1fae:	b2c9      	uxtb	r1, r1
    1fb0:	4620      	mov	r0, r4
}
    1fb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    qspi_flash_write_status_config(qspi_flash_read_status(), qspi_flash_read_config() | BIT(1)); // Enable SIO2 and SIO3
    1fb6:	f7ff bf90 	b.w	1eda <qspi_flash_write_status_config>
}
    1fba:	bd10      	pop	{r4, pc}
    1fbc:	00bf2643 	.word	0x00bf2643

00001fc0 <qspi_init>:
    CMU->HFBUSCLKEN0 |= CMU_HFBUSCLKEN0_QSPI0;
    1fc0:	4a1d      	ldr	r2, [pc, #116]	; (2038 <qspi_init+0x78>)
    1fc2:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
{
    1fc6:	b510      	push	{r4, lr}
    CMU->HFBUSCLKEN0 |= CMU_HFBUSCLKEN0_QSPI0;
    1fc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    while(!(QSPI0->CONFIG & QSPI_CONFIG_IDLE));
    1fcc:	4c1b      	ldr	r4, [pc, #108]	; (203c <qspi_init+0x7c>)
    CMU->HFBUSCLKEN0 |= CMU_HFBUSCLKEN0_QSPI0;
    1fce:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
    while(!(QSPI0->CONFIG & QSPI_CONFIG_IDLE));
    1fd2:	6823      	ldr	r3, [r4, #0]
    1fd4:	2b00      	cmp	r3, #0
    1fd6:	dafc      	bge.n	1fd2 <qspi_init+0x12>
    QSPI0->CONFIG = QSPI_CONFIG_ENBAHBADDRREMAP | (0 << _QSPI_CONFIG_PERIPHCSLINES_SHIFT) | QSPI_CONFIG_ENBDIRACCCTLR | QSPI_CONFIG_PHYMODEENABLE;
    1fd8:	4b19      	ldr	r3, [pc, #100]	; (2040 <qspi_init+0x80>)
    1fda:	6023      	str	r3, [r4, #0]
    QSPI0->DEVINSTRRDCONFIG = (0 << _QSPI_DEVINSTRRDCONFIG_DUMMYRDCLKCYCLES_SHIFT) | QSPI_DEVINSTRRDCONFIG_MODEBITENABLE | (1 << _QSPI_DEVINSTRRDCONFIG_DATAXFERTYPEEXTMODE_SHIFT) | (1 << _QSPI_DEVINSTRRDCONFIG_ADDRXFERTYPESTDMODE_SHIFT) | (0 << _QSPI_DEVINSTRRDCONFIG_INSTRTYPE_SHIFT) | ((uint32_t)QSPI_FLASH_CMD_READ_FAST_DIO << _QSPI_DEVINSTRRDCONFIG_RDOPCODENONXIP_SHIFT);
    1fdc:	4b19      	ldr	r3, [pc, #100]	; (2044 <qspi_init+0x84>)
    1fde:	6063      	str	r3, [r4, #4]
    QSPI0->DEVINSTRWRCONFIG = (0 << _QSPI_DEVINSTRWRCONFIG_DUMMYWRCLKCYCLES_SHIFT) | (0 << _QSPI_DEVINSTRWRCONFIG_DATAXFERTYPEEXTMODE_SHIFT) | (0 << _QSPI_DEVINSTRWRCONFIG_ADDRXFERTYPESTDMODE_SHIFT) | ((uint32_t)QSPI_FLASH_CMD_WRITE << _QSPI_DEVINSTRWRCONFIG_WROPCODE_SHIFT);
    1fe0:	2302      	movs	r3, #2
    1fe2:	60a3      	str	r3, [r4, #8]
    QSPI0->DEVDELAY = (2 << _QSPI_DEVDELAY_DNSS_SHIFT) | (2 << _QSPI_DEVDELAY_DBTWN_SHIFT) | (0 << _QSPI_DEVDELAY_DAFTER_SHIFT) | (0 << _QSPI_DEVDELAY_DINIT_SHIFT);
    1fe4:	4b18      	ldr	r3, [pc, #96]	; (2048 <qspi_init+0x88>)
    1fe6:	60e3      	str	r3, [r4, #12]
    QSPI0->DEVSIZECONFIG = (0 << _QSPI_DEVSIZECONFIG_MEMSIZEONCS0_SHIFT) | (12 << _QSPI_DEVSIZECONFIG_BYTESPERSUBSECTOR_SHIFT) | (256 << _QSPI_DEVSIZECONFIG_BYTESPERDEVICEPAGE_SHIFT) | (2 << _QSPI_DEVSIZECONFIG_NUMADDRBYTES_SHIFT);
    1fe8:	4b18      	ldr	r3, [pc, #96]	; (204c <qspi_init+0x8c>)
    1fea:	6163      	str	r3, [r4, #20]
    QSPI0->WRITECOMPLETIONCTRL = (5 << _QSPI_WRITECOMPLETIONCTRL_POLLREPDELAY_SHIFT) | (1 << _QSPI_WRITECOMPLETIONCTRL_POLLCOUNT_SHIFT) | (0 << _QSPI_WRITECOMPLETIONCTRL_POLLINGPOLARITY_SHIFT) | (0 << _QSPI_WRITECOMPLETIONCTRL_POLLINGBITINDEX_SHIFT) | (QSPI_FLASH_CMD_READ_STATUS << _QSPI_WRITECOMPLETIONCTRL_OPCODE_SHIFT);
    1fec:	4a18      	ldr	r2, [pc, #96]	; (2050 <qspi_init+0x90>)
    QSPI0->REMAPADDR = 0x00000000;
    1fee:	2300      	movs	r3, #0
    1ff0:	6263      	str	r3, [r4, #36]	; 0x24
    QSPI0->MODEBITCONFIG = (0x00 << _QSPI_MODEBITCONFIG_MODE_SHIFT);
    1ff2:	62a3      	str	r3, [r4, #40]	; 0x28
    QSPI0->WRITECOMPLETIONCTRL = (5 << _QSPI_WRITECOMPLETIONCTRL_POLLREPDELAY_SHIFT) | (1 << _QSPI_WRITECOMPLETIONCTRL_POLLCOUNT_SHIFT) | (0 << _QSPI_WRITECOMPLETIONCTRL_POLLINGPOLARITY_SHIFT) | (0 << _QSPI_WRITECOMPLETIONCTRL_POLLINGBITINDEX_SHIFT) | (QSPI_FLASH_CMD_READ_STATUS << _QSPI_WRITECOMPLETIONCTRL_OPCODE_SHIFT);
    1ff4:	63a2      	str	r2, [r4, #56]	; 0x38
    QSPI0->PHYCONFIGURATION = QSPI_PHYCONFIGURATION_PHYCONFIGRESYNC | (25 << _QSPI_PHYCONFIGURATION_PHYCONFIGTXDLLDELAY_SHIFT) | (43 << _QSPI_PHYCONFIGURATION_PHYCONFIGRXDLLDELAY_SHIFT);
    1ff6:	4a17      	ldr	r2, [pc, #92]	; (2054 <qspi_init+0x94>)
    QSPI0->POLLINGFLASHSTATUS = (0 << _QSPI_POLLINGFLASHSTATUS_DEVICESTATUSNBDUMMY_SHIFT);
    1ff8:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
    QSPI0->PHYCONFIGURATION = QSPI_PHYCONFIGURATION_PHYCONFIGRESYNC | (25 << _QSPI_PHYCONFIGURATION_PHYCONFIGTXDLLDELAY_SHIFT) | (43 << _QSPI_PHYCONFIGURATION_PHYCONFIGRXDLLDELAY_SHIFT);
    1ffc:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
    QSPI0->OPCODEEXTUPPER = (QSPI_FLASH_CMD_WRITE_ENABLE << _QSPI_OPCODEEXTUPPER_WELOPCODE_SHIFT);
    2000:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
    2004:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
    QSPI0->ROUTELOC0 = QSPI_ROUTELOC0_QSPILOC_LOC0;
    2008:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    QSPI0->ROUTEPEN = QSPI_ROUTEPEN_DQ0PEN | QSPI_ROUTEPEN_DQ1PEN | QSPI_ROUTEPEN_DQ2PEN | QSPI_ROUTEPEN_DQ3PEN | QSPI_ROUTEPEN_CS0PEN | QSPI_ROUTEPEN_SCLKPEN;
    200c:	f240 13e3 	movw	r3, #483	; 0x1e3
    2010:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    CMU->QSPICTRL = CMU_QSPICTRL_QSPI0CLKSEL_USHFRCO;
    2014:	4b08      	ldr	r3, [pc, #32]	; (2038 <qspi_init+0x78>)
    2016:	2203      	movs	r2, #3
    2018:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
    cmu_update_clocks();
    201c:	f7fe feb8 	bl	d90 <cmu_update_clocks>
    QSPI0->CONFIG |= QSPI_CONFIG_ENBSPI;
    2020:	6823      	ldr	r3, [r4, #0]
    while(!(QSPI0->CONFIG & QSPI_CONFIG_IDLE));
    2022:	4a06      	ldr	r2, [pc, #24]	; (203c <qspi_init+0x7c>)
    QSPI0->CONFIG |= QSPI_CONFIG_ENBSPI;
    2024:	f043 0301 	orr.w	r3, r3, #1
    2028:	6023      	str	r3, [r4, #0]
    while(!(QSPI0->CONFIG & QSPI_CONFIG_IDLE));
    202a:	6813      	ldr	r3, [r2, #0]
    202c:	2b00      	cmp	r3, #0
    202e:	dafc      	bge.n	202a <qspi_init+0x6a>
}
    2030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    qspi_flash_init();
    2034:	f7ff bfaa 	b.w	1f8c <qspi_flash_init>
    2038:	400e4000 	.word	0x400e4000
    203c:	4001c400 	.word	0x4001c400
    2040:	00010088 	.word	0x00010088
    2044:	001110bb 	.word	0x001110bb
    2048:	02020000 	.word	0x02020000
    204c:	000c1002 	.word	0x000c1002
    2050:	05010005 	.word	0x05010005
    2054:	8019002b 	.word	0x8019002b

00002058 <emu_vmon_thresh_get>:
}
static float emu_vmon_thresh_get(uint8_t ubThresh1V86, uint8_t ubThresh2V98, uint8_t ubCurrentThresh)
{
    // Convert from BCD
    float fCurrentThresh = 10 * ((ubCurrentThresh >> 4) & 0xF) + ((ubCurrentThresh >> 0) & 0xF);
    float fThresh1V86 = 10 * ((ubThresh1V86 >> 4) & 0xF) + ((ubThresh1V86 >> 0) & 0xF);
    2058:	230a      	movs	r3, #10
{
    205a:	b510      	push	{r4, lr}
    float fThresh1V86 = 10 * ((ubThresh1V86 >> 4) & 0xF) + ((ubThresh1V86 >> 0) & 0xF);
    205c:	0904      	lsrs	r4, r0, #4
    205e:	f000 000f 	and.w	r0, r0, #15
    2062:	fb13 0404 	smlabb	r4, r3, r4, r0
    2066:	ee07 4a90 	vmov	s15, r4
    float fThresh2V98 = 10 * ((ubThresh2V98 >> 4) & 0xF) + ((ubThresh2V98 >> 0) & 0xF);
    206a:	0908      	lsrs	r0, r1, #4
    206c:	f001 010f 	and.w	r1, r1, #15
    2070:	fb13 1100 	smlabb	r1, r3, r0, r1
    float fThresh1V86 = 10 * ((ubThresh1V86 >> 4) & 0xF) + ((ubThresh1V86 >> 0) & 0xF);
    2074:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    float fThresh2V98 = 10 * ((ubThresh2V98 >> 4) & 0xF) + ((ubThresh2V98 >> 0) & 0xF);
    2078:	ee07 1a90 	vmov	s15, r1
    207c:	eef8 7ae7 	vcvt.f32.s32	s15, s15

    // Interpolate between the two calibration thresholds
    float fSlope = (2.98f - 1.86f) / (fThresh2V98 - fThresh1V86);
    2080:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 20ac <emu_vmon_thresh_get+0x54>
    float fOffset = 1.86f - (fSlope * fThresh1V86);
    2084:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 20b0 <emu_vmon_thresh_get+0x58>
    float fSlope = (2.98f - 1.86f) / (fThresh2V98 - fThresh1V86);
    2088:	ee77 7ac7 	vsub.f32	s15, s15, s14
    float fCurrentThresh = 10 * ((ubCurrentThresh >> 4) & 0xF) + ((ubCurrentThresh >> 0) & 0xF);
    208c:	0911      	lsrs	r1, r2, #4
    float fSlope = (2.98f - 1.86f) / (fThresh2V98 - fThresh1V86);
    208e:	eec6 6a27 	vdiv.f32	s13, s12, s15
    float fCurrentThresh = 10 * ((ubCurrentThresh >> 4) & 0xF) + ((ubCurrentThresh >> 0) & 0xF);
    2092:	f002 020f 	and.w	r2, r2, #15
    2096:	fb13 2301 	smlabb	r3, r3, r1, r2
    209a:	ee07 3a90 	vmov	s15, r3
    float fOffset = 1.86f - (fSlope * fThresh1V86);
    209e:	eea7 0a66 	vfms.f32	s0, s14, s13
    float fCurrentThresh = 10 * ((ubCurrentThresh >> 4) & 0xF) + ((ubCurrentThresh >> 0) & 0xF);
    20a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15

    // Find the Code for the target voltage
    float fCurrentVoltage = (fCurrentThresh * fSlope) + fOffset;

    return fCurrentVoltage;
}
    20a6:	eea7 0aa6 	vfma.f32	s0, s15, s13
    20aa:	bd10      	pop	{r4, pc}
    20ac:	3f8f5c29 	.word	0x3f8f5c29
    20b0:	3fee147b 	.word	0x3fee147b

000020b4 <emu_vmon_thresh_calc>:
{
    20b4:	b507      	push	{r0, r1, r2, lr}
    float fThresh1V86 = 10 * ((ubThresh1V86 >> 4) & 0xF) + ((ubThresh1V86 >> 0) & 0xF);
    20b6:	230a      	movs	r3, #10
    20b8:	0902      	lsrs	r2, r0, #4
    20ba:	f000 000f 	and.w	r0, r0, #15
    20be:	fb13 0202 	smlabb	r2, r3, r2, r0
    20c2:	ee07 2a90 	vmov	s15, r2
    float fThresh2V98 = 10 * ((ubThresh2V98 >> 4) & 0xF) + ((ubThresh2V98 >> 0) & 0xF);
    20c6:	090a      	lsrs	r2, r1, #4
    20c8:	f001 010f 	and.w	r1, r1, #15
    20cc:	fb13 1302 	smlabb	r3, r3, r2, r1
    float fThresh1V86 = 10 * ((ubThresh1V86 >> 4) & 0xF) + ((ubThresh1V86 >> 0) & 0xF);
    20d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    float fThresh2V98 = 10 * ((ubThresh2V98 >> 4) & 0xF) + ((ubThresh2V98 >> 0) & 0xF);
    20d4:	ee07 3a90 	vmov	s15, r3
    20d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    float fSlope = (2.98f - 1.86f) / (fThresh2V98 - fThresh1V86);
    20dc:	ed9f 6a17 	vldr	s12, [pc, #92]	; 213c <emu_vmon_thresh_calc+0x88>
    20e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
    20e4:	eec6 6a27 	vdiv.f32	s13, s12, s15
    float fOffset = 1.86f - (fSlope * fThresh1V86);
    20e8:	eddf 7a15 	vldr	s15, [pc, #84]	; 2140 <emu_vmon_thresh_calc+0x8c>
    20ec:	eee7 7a66 	vfms.f32	s15, s14, s13
    float fTargetThresh = roundf((fTargetVoltage - fOffset) / fSlope);
    20f0:	ee30 0a67 	vsub.f32	s0, s0, s15
    20f4:	ee80 0a26 	vdiv.f32	s0, s0, s13
    20f8:	f002 f904 	bl	4304 <roundf>
    uint8_t ubDecThresh = fTargetThresh / 10.f;
    20fc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
    2100:	eec0 7a07 	vdiv.f32	s15, s0, s14
    2104:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    2108:	edcd 7a01 	vstr	s15, [sp, #4]
    210c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    uint8_t ubUniThresh = fTargetThresh - (ubDecThresh * 10);
    2110:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    2114:	0052      	lsls	r2, r2, #1
    2116:	ee07 2a90 	vmov	s15, r2
    211a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    211e:	ee30 0a67 	vsub.f32	s0, s0, s15
    2122:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    uint8_t ubTargetThresh = ((ubDecThresh & 0xF) << 4) | (ubUniThresh & 0xF);
    2126:	ee10 2a10 	vmov	r2, s0
    212a:	f002 000f 	and.w	r0, r2, #15
    212e:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
    2132:	b2c0      	uxtb	r0, r0
    2134:	b003      	add	sp, #12
    2136:	f85d fb04 	ldr.w	pc, [sp], #4
    213a:	bf00      	nop
    213c:	3f8f5c29 	.word	0x3f8f5c29
    2140:	3fee147b 	.word	0x3fee147b

00002144 <_emu_isr>:

void _emu_isr()
{
    uint32_t ulFlags = EMU->IFC;
    2144:	4b15      	ldr	r3, [pc, #84]	; (219c <_emu_isr+0x58>)
    2146:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    if(ulFlags & EMU_IFC_VMONAVDDFALL)
    2148:	f013 0101 	ands.w	r1, r3, #1
    214c:	d015      	beq.n	217a <_emu_isr+0x36>
        g_ubAVDDLow = 1;
    214e:	4a14      	ldr	r2, [pc, #80]	; (21a0 <_emu_isr+0x5c>)
    2150:	2101      	movs	r1, #1
    else if(ulFlags & EMU_IFC_VMONAVDDRISE)
        g_ubAVDDLow = 0;
    2152:	7011      	strb	r1, [r2, #0]

    if(ulFlags & EMU_IFC_VMONALTAVDDFALL)
    2154:	f013 0104 	ands.w	r1, r3, #4
    2158:	d013      	beq.n	2182 <_emu_isr+0x3e>
        g_ubAltAVDDLow = 1;
    215a:	4a12      	ldr	r2, [pc, #72]	; (21a4 <_emu_isr+0x60>)
    215c:	2101      	movs	r1, #1
    else if(ulFlags & EMU_IFC_VMONALTAVDDRISE)
        g_ubAltAVDDLow = 0;
    215e:	7011      	strb	r1, [r2, #0]

    if(ulFlags & EMU_IFC_VMONDVDDFALL)
    2160:	f013 0110 	ands.w	r1, r3, #16
    2164:	d011      	beq.n	218a <_emu_isr+0x46>
        g_ubDVDDLow = 1;
    2166:	4a10      	ldr	r2, [pc, #64]	; (21a8 <_emu_isr+0x64>)
    2168:	2101      	movs	r1, #1
    else if(ulFlags & EMU_IFC_VMONDVDDRISE)
        g_ubDVDDLow = 0;
    216a:	7011      	strb	r1, [r2, #0]

    if(ulFlags & EMU_IFC_VMONIO0FALL)
    216c:	f013 0240 	ands.w	r2, r3, #64	; 0x40
    2170:	d00f      	beq.n	2192 <_emu_isr+0x4e>
        g_ubIOVDDLow = 1;
    2172:	4b0e      	ldr	r3, [pc, #56]	; (21ac <_emu_isr+0x68>)
    2174:	2201      	movs	r2, #1
    else if(ulFlags & EMU_IFC_VMONIO0RISE)
        g_ubIOVDDLow = 0;
    2176:	701a      	strb	r2, [r3, #0]
}
    2178:	4770      	bx	lr
    else if(ulFlags & EMU_IFC_VMONAVDDRISE)
    217a:	079a      	lsls	r2, r3, #30
    217c:	d5ea      	bpl.n	2154 <_emu_isr+0x10>
        g_ubAVDDLow = 0;
    217e:	4a08      	ldr	r2, [pc, #32]	; (21a0 <_emu_isr+0x5c>)
    2180:	e7e7      	b.n	2152 <_emu_isr+0xe>
    else if(ulFlags & EMU_IFC_VMONALTAVDDRISE)
    2182:	0718      	lsls	r0, r3, #28
    2184:	d5ec      	bpl.n	2160 <_emu_isr+0x1c>
        g_ubAltAVDDLow = 0;
    2186:	4a07      	ldr	r2, [pc, #28]	; (21a4 <_emu_isr+0x60>)
    2188:	e7e9      	b.n	215e <_emu_isr+0x1a>
    else if(ulFlags & EMU_IFC_VMONDVDDRISE)
    218a:	069a      	lsls	r2, r3, #26
    218c:	d5ee      	bpl.n	216c <_emu_isr+0x28>
        g_ubDVDDLow = 0;
    218e:	4a06      	ldr	r2, [pc, #24]	; (21a8 <_emu_isr+0x64>)
    2190:	e7eb      	b.n	216a <_emu_isr+0x26>
    else if(ulFlags & EMU_IFC_VMONIO0RISE)
    2192:	061b      	lsls	r3, r3, #24
    2194:	d5f0      	bpl.n	2178 <_emu_isr+0x34>
        g_ubIOVDDLow = 0;
    2196:	4b05      	ldr	r3, [pc, #20]	; (21ac <_emu_isr+0x68>)
    2198:	e7ed      	b.n	2176 <_emu_isr+0x32>
    219a:	bf00      	nop
    219c:	400e3000 	.word	0x400e3000
    21a0:	20000080 	.word	0x20000080
    21a4:	20000081 	.word	0x20000081
    21a8:	20000082 	.word	0x20000082
    21ac:	20000083 	.word	0x20000083

000021b0 <emu_init>:

void emu_init()
{
    EMU->PWRCTRL = EMU_PWRCTRL_IMMEDIATEPWRSWITCH | EMU_PWRCTRL_REGPWRSEL_DVDD | EMU_PWRCTRL_ANASW_AVDD;
    21b0:	4b07      	ldr	r3, [pc, #28]	; (21d0 <emu_init+0x20>)
    21b2:	f44f 5210 	mov.w	r2, #9216	; 0x2400
    21b6:	63da      	str	r2, [r3, #60]	; 0x3c

    EMU->IFC = _EMU_IFC_MASK; // Clear pending IRQs
    21b8:	4a06      	ldr	r2, [pc, #24]	; (21d4 <emu_init+0x24>)
    21ba:	62da      	str	r2, [r3, #44]	; 0x2c
    IRQ_CLEAR(EMU_IRQn); // Clear pending vector
    21bc:	4b06      	ldr	r3, [pc, #24]	; (21d8 <emu_init+0x28>)
    21be:	2201      	movs	r2, #1
    IRQ_SET_PRIO(EMU_IRQn, 3, 1); // Set priority 3,1 (min)
    21c0:	21e0      	movs	r1, #224	; 0xe0
    IRQ_CLEAR(EMU_IRQn); // Clear pending vector
    21c2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    IRQ_SET_PRIO(EMU_IRQn, 3, 1); // Set priority 3,1 (min)
    21c6:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    IRQ_ENABLE(EMU_IRQn); // Enable vector
    21ca:	601a      	str	r2, [r3, #0]
}
    21cc:	4770      	bx	lr
    21ce:	bf00      	nop
    21d0:	400e3000 	.word	0x400e3000
    21d4:	e3df37ff 	.word	0xe3df37ff
    21d8:	e000e100 	.word	0xe000e100

000021dc <emu_get_temperature>:
float emu_get_temperature()
{
    EMU->IFC = EMU_IFC_TEMP;
    21dc:	4912      	ldr	r1, [pc, #72]	; (2228 <emu_get_temperature+0x4c>)
    21de:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    21e2:	62cb      	str	r3, [r1, #44]	; 0x2c

    while(!(EMU->IF & EMU_IF_TEMP));
    21e4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    21e6:	009b      	lsls	r3, r3, #2
    21e8:	d5fc      	bpl.n	21e4 <emu_get_temperature+0x8>

    float fCalibrationTemp = (DEVINFO->CAL & _DEVINFO_CAL_TEMP_MASK) >> _DEVINFO_CAL_TEMP_SHIFT;
    21ea:	4b10      	ldr	r3, [pc, #64]	; (222c <emu_get_temperature+0x50>)
    float fEMUCalibrationTemp = (DEVINFO->EMUTEMP & _DEVINFO_EMUTEMP_EMUTEMPROOM_MASK) >> _DEVINFO_EMUTEMP_EMUTEMPROOM_SHIFT;
    float fTempCoefEM01 = 0.278f + fEMUCalibrationTemp / 100.f;
    21ec:	ed9f 6a10 	vldr	s12, [pc, #64]	; 2230 <emu_get_temperature+0x54>
    float fCalibrationTemp = (DEVINFO->CAL & _DEVINFO_CAL_TEMP_MASK) >> _DEVINFO_CAL_TEMP_SHIFT;
    21f0:	681a      	ldr	r2, [r3, #0]
    float fEMUCalibrationTemp = (DEVINFO->EMUTEMP & _DEVINFO_EMUTEMP_EMUTEMPROOM_MASK) >> _DEVINFO_EMUTEMP_EMUTEMPROOM_SHIFT;
    21f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    float fEMUTemp = fCalibrationTemp + fTempCoefEM01 * (fEMUCalibrationTemp - EMU->TEMP);
    21f4:	ed91 7a08 	vldr	s14, [r1, #32]
    float fEMUCalibrationTemp = (DEVINFO->EMUTEMP & _DEVINFO_EMUTEMP_EMUTEMPROOM_MASK) >> _DEVINFO_EMUTEMP_EMUTEMPROOM_SHIFT;
    21f8:	b2db      	uxtb	r3, r3
    21fa:	ee07 3a90 	vmov	s15, r3
    21fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    float fEMUTemp = fCalibrationTemp + fTempCoefEM01 * (fEMUCalibrationTemp - EMU->TEMP);
    2202:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    float fTempCoefEM01 = 0.278f + fEMUCalibrationTemp / 100.f;
    2206:	eec7 6a86 	vdiv.f32	s13, s15, s12
    float fCalibrationTemp = (DEVINFO->CAL & _DEVINFO_CAL_TEMP_MASK) >> _DEVINFO_CAL_TEMP_SHIFT;
    220a:	f3c2 4307 	ubfx	r3, r2, #16, #8
    float fEMUTemp = fCalibrationTemp + fTempCoefEM01 * (fEMUCalibrationTemp - EMU->TEMP);
    220e:	ee37 7ac7 	vsub.f32	s14, s15, s14
    float fCalibrationTemp = (DEVINFO->CAL & _DEVINFO_CAL_TEMP_MASK) >> _DEVINFO_CAL_TEMP_SHIFT;
    2212:	ee00 3a10 	vmov	s0, r3
    float fTempCoefEM01 = 0.278f + fEMUCalibrationTemp / 100.f;
    2216:	eddf 7a07 	vldr	s15, [pc, #28]	; 2234 <emu_get_temperature+0x58>
    float fCalibrationTemp = (DEVINFO->CAL & _DEVINFO_CAL_TEMP_MASK) >> _DEVINFO_CAL_TEMP_SHIFT;
    221a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    float fTempCoefEM01 = 0.278f + fEMUCalibrationTemp / 100.f;
    221e:	ee76 7aa7 	vadd.f32	s15, s13, s15

    return fEMUTemp;
}
    2222:	eea7 0a27 	vfma.f32	s0, s14, s15
    2226:	4770      	bx	lr
    2228:	400e3000 	.word	0x400e3000
    222c:	0fe081b0 	.word	0x0fe081b0
    2230:	42c80000 	.word	0x42c80000
    2234:	3e8e5604 	.word	0x3e8e5604

00002238 <emu_vmon_avdd_config>:
void emu_vmon_avdd_config(uint8_t ubEnable, float fLowThresh, float *pfLowThresh, float fHighThresh, float *pfHighThresh)
{
    2238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    223c:	4689      	mov	r9, r1
    223e:	ed2d 8b02 	vpush	{d8}
    2242:	4690      	mov	r8, r2
    2244:	eeb0 8a60 	vmov.f32	s16, s1
    if(!ubEnable)
    2248:	b970      	cbnz	r0, 2268 <emu_vmon_avdd_config+0x30>
    {
        EMU->VMONAVDDCTRL &= ~EMU_VMONAVDDCTRL_EN;
    224a:	4b23      	ldr	r3, [pc, #140]	; (22d8 <emu_vmon_avdd_config+0xa0>)
    224c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    2250:	f022 0201 	bic.w	r2, r2, #1
    2254:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        EMU->IEN &= ~(EMU_IEN_VMONAVDDRISE | EMU_IEN_VMONAVDDFALL);
    2258:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    225a:	f022 0203 	bic.w	r2, r2, #3
    225e:	631a      	str	r2, [r3, #48]	; 0x30
        *pfHighThresh = emu_vmon_thresh_get(ubThresh1V86, ubThresh2V98, ubHighThresh);

    EMU->IFC = EMU_IFC_VMONAVDDRISE | EMU_IFC_VMONAVDDFALL;
    EMU->IEN |= EMU_IEN_VMONAVDDRISE | EMU_IEN_VMONAVDDFALL;
    EMU->VMONAVDDCTRL = ((uint32_t)ubLowThresh << _EMU_VMONAVDDCTRL_FALLTHRESFINE_SHIFT) | ((uint32_t)ubHighThresh << _EMU_VMONAVDDCTRL_RISETHRESFINE_SHIFT) | EMU_VMONAVDDCTRL_EN;
}
    2260:	ecbd 8b02 	vpop	{d8}
    2264:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    uint8_t ubThresh1V86 = (DEVINFO->VMONCAL0 >> 0) & 0xFF;
    2268:	4b1c      	ldr	r3, [pc, #112]	; (22dc <emu_vmon_avdd_config+0xa4>)
    226a:	f8d3 5140 	ldr.w	r5, [r3, #320]	; 0x140
    uint8_t ubThresh2V98 = (DEVINFO->VMONCAL0 >> 8) & 0xFF;
    226e:	f8d3 6140 	ldr.w	r6, [r3, #320]	; 0x140
    uint8_t ubThresh1V86 = (DEVINFO->VMONCAL0 >> 0) & 0xFF;
    2272:	b2ed      	uxtb	r5, r5
    uint8_t ubThresh2V98 = (DEVINFO->VMONCAL0 >> 8) & 0xFF;
    2274:	f3c6 2607 	ubfx	r6, r6, #8, #8
    uint8_t ubLowThresh = emu_vmon_thresh_calc(ubThresh1V86, ubThresh2V98, fLowThresh);
    2278:	4631      	mov	r1, r6
    227a:	4628      	mov	r0, r5
    227c:	f7ff ff1a 	bl	20b4 <emu_vmon_thresh_calc>
    uint8_t ubHighThresh = emu_vmon_thresh_calc(ubThresh1V86, ubThresh2V98, fHighThresh);
    2280:	eeb0 0a48 	vmov.f32	s0, s16
    uint8_t ubLowThresh = emu_vmon_thresh_calc(ubThresh1V86, ubThresh2V98, fLowThresh);
    2284:	4607      	mov	r7, r0
    uint8_t ubHighThresh = emu_vmon_thresh_calc(ubThresh1V86, ubThresh2V98, fHighThresh);
    2286:	4631      	mov	r1, r6
    2288:	4628      	mov	r0, r5
    228a:	f7ff ff13 	bl	20b4 <emu_vmon_thresh_calc>
    228e:	4604      	mov	r4, r0
    if(pfLowThresh)
    2290:	f1b9 0f00 	cmp.w	r9, #0
    2294:	d006      	beq.n	22a4 <emu_vmon_avdd_config+0x6c>
        *pfLowThresh = emu_vmon_thresh_get(ubThresh1V86, ubThresh2V98, ubLowThresh);
    2296:	463a      	mov	r2, r7
    2298:	4631      	mov	r1, r6
    229a:	4628      	mov	r0, r5
    229c:	f7ff fedc 	bl	2058 <emu_vmon_thresh_get>
    22a0:	ed89 0a00 	vstr	s0, [r9]
    if(pfHighThresh)
    22a4:	f1b8 0f00 	cmp.w	r8, #0
    22a8:	d006      	beq.n	22b8 <emu_vmon_avdd_config+0x80>
        *pfHighThresh = emu_vmon_thresh_get(ubThresh1V86, ubThresh2V98, ubHighThresh);
    22aa:	4622      	mov	r2, r4
    22ac:	4631      	mov	r1, r6
    22ae:	4628      	mov	r0, r5
    22b0:	f7ff fed2 	bl	2058 <emu_vmon_thresh_get>
    22b4:	ed88 0a00 	vstr	s0, [r8]
    EMU->IFC = EMU_IFC_VMONAVDDRISE | EMU_IFC_VMONAVDDFALL;
    22b8:	4b07      	ldr	r3, [pc, #28]	; (22d8 <emu_vmon_avdd_config+0xa0>)
    22ba:	2203      	movs	r2, #3
    22bc:	62da      	str	r2, [r3, #44]	; 0x2c
    EMU->IEN |= EMU_IEN_VMONAVDDRISE | EMU_IEN_VMONAVDDFALL;
    22be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    EMU->VMONAVDDCTRL = ((uint32_t)ubLowThresh << _EMU_VMONAVDDCTRL_FALLTHRESFINE_SHIFT) | ((uint32_t)ubHighThresh << _EMU_VMONAVDDCTRL_RISETHRESFINE_SHIFT) | EMU_VMONAVDDCTRL_EN;
    22c0:	0424      	lsls	r4, r4, #16
    22c2:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
    EMU->IEN |= EMU_IEN_VMONAVDDRISE | EMU_IEN_VMONAVDDFALL;
    22c6:	f042 0203 	orr.w	r2, r2, #3
    EMU->VMONAVDDCTRL = ((uint32_t)ubLowThresh << _EMU_VMONAVDDCTRL_FALLTHRESFINE_SHIFT) | ((uint32_t)ubHighThresh << _EMU_VMONAVDDCTRL_RISETHRESFINE_SHIFT) | EMU_VMONAVDDCTRL_EN;
    22ca:	f044 0401 	orr.w	r4, r4, #1
    EMU->IEN |= EMU_IEN_VMONAVDDRISE | EMU_IEN_VMONAVDDFALL;
    22ce:	631a      	str	r2, [r3, #48]	; 0x30
    EMU->VMONAVDDCTRL = ((uint32_t)ubLowThresh << _EMU_VMONAVDDCTRL_FALLTHRESFINE_SHIFT) | ((uint32_t)ubHighThresh << _EMU_VMONAVDDCTRL_RISETHRESFINE_SHIFT) | EMU_VMONAVDDCTRL_EN;
    22d0:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
    22d4:	e7c4      	b.n	2260 <emu_vmon_avdd_config+0x28>
    22d6:	bf00      	nop
    22d8:	400e3000 	.word	0x400e3000
    22dc:	0fe081b0 	.word	0x0fe081b0

000022e0 <emu_vmon_dvdd_config>:
    EMU->IFC = EMU_IFC_VMONALTAVDDRISE | EMU_IFC_VMONALTAVDDFALL;
    EMU->IEN |= EMU_IEN_VMONALTAVDDRISE | EMU_IEN_VMONALTAVDDFALL;
    EMU->VMONALTAVDDCTRL = ((uint32_t)ubLowThresh << _EMU_VMONALTAVDDCTRL_THRESFINE_SHIFT) | EMU_VMONALTAVDDCTRL_EN;
}
void emu_vmon_dvdd_config(uint8_t ubEnable, float fLowThresh, float *pfLowThresh)
{
    22e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22e2:	460f      	mov	r7, r1
    if(!ubEnable)
    22e4:	b958      	cbnz	r0, 22fe <emu_vmon_dvdd_config+0x1e>
    {
        EMU->VMONDVDDCTRL &= ~EMU_VMONDVDDCTRL_EN;
    22e6:	4b17      	ldr	r3, [pc, #92]	; (2344 <emu_vmon_dvdd_config+0x64>)
    22e8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    22ec:	f022 0201 	bic.w	r2, r2, #1
    22f0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        EMU->IEN &= ~(EMU_IEN_VMONDVDDRISE | EMU_IEN_VMONDVDDFALL);
    22f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    22f6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
    22fa:	631a      	str	r2, [r3, #48]	; 0x30
        *pfLowThresh = emu_vmon_thresh_get(ubThresh1V86, ubThresh2V98, ubLowThresh);

    EMU->IFC = EMU_IFC_VMONDVDDRISE | EMU_IFC_VMONDVDDFALL;
    EMU->IEN |= EMU_IEN_VMONDVDDRISE | EMU_IEN_VMONDVDDFALL;
    EMU->VMONDVDDCTRL = ((uint32_t)ubLowThresh << _EMU_VMONDVDDCTRL_THRESFINE_SHIFT) | EMU_VMONDVDDCTRL_EN;
}
    22fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint8_t ubThresh1V86 = (DEVINFO->VMONCAL1 >> 0) & 0xFF;
    22fe:	4b12      	ldr	r3, [pc, #72]	; (2348 <emu_vmon_dvdd_config+0x68>)
    2300:	f8d3 5144 	ldr.w	r5, [r3, #324]	; 0x144
    uint8_t ubThresh2V98 = (DEVINFO->VMONCAL1 >> 8) & 0xFF;
    2304:	f8d3 6144 	ldr.w	r6, [r3, #324]	; 0x144
    uint8_t ubThresh1V86 = (DEVINFO->VMONCAL1 >> 0) & 0xFF;
    2308:	b2ed      	uxtb	r5, r5
    uint8_t ubThresh2V98 = (DEVINFO->VMONCAL1 >> 8) & 0xFF;
    230a:	f3c6 2607 	ubfx	r6, r6, #8, #8
    uint8_t ubLowThresh = emu_vmon_thresh_calc(ubThresh1V86, ubThresh2V98, fLowThresh);
    230e:	4631      	mov	r1, r6
    2310:	4628      	mov	r0, r5
    2312:	f7ff fecf 	bl	20b4 <emu_vmon_thresh_calc>
    2316:	4604      	mov	r4, r0
    if(pfLowThresh)
    2318:	b137      	cbz	r7, 2328 <emu_vmon_dvdd_config+0x48>
        *pfLowThresh = emu_vmon_thresh_get(ubThresh1V86, ubThresh2V98, ubLowThresh);
    231a:	4602      	mov	r2, r0
    231c:	4631      	mov	r1, r6
    231e:	4628      	mov	r0, r5
    2320:	f7ff fe9a 	bl	2058 <emu_vmon_thresh_get>
    2324:	ed87 0a00 	vstr	s0, [r7]
    EMU->IFC = EMU_IFC_VMONDVDDRISE | EMU_IFC_VMONDVDDFALL;
    2328:	4b06      	ldr	r3, [pc, #24]	; (2344 <emu_vmon_dvdd_config+0x64>)
    232a:	2230      	movs	r2, #48	; 0x30
    232c:	62da      	str	r2, [r3, #44]	; 0x2c
    EMU->IEN |= EMU_IEN_VMONDVDDRISE | EMU_IEN_VMONDVDDFALL;
    232e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    EMU->VMONDVDDCTRL = ((uint32_t)ubLowThresh << _EMU_VMONDVDDCTRL_THRESFINE_SHIFT) | EMU_VMONDVDDCTRL_EN;
    2330:	0224      	lsls	r4, r4, #8
    EMU->IEN |= EMU_IEN_VMONDVDDRISE | EMU_IEN_VMONDVDDFALL;
    2332:	f042 0230 	orr.w	r2, r2, #48	; 0x30
    EMU->VMONDVDDCTRL = ((uint32_t)ubLowThresh << _EMU_VMONDVDDCTRL_THRESFINE_SHIFT) | EMU_VMONDVDDCTRL_EN;
    2336:	f044 0401 	orr.w	r4, r4, #1
    EMU->IEN |= EMU_IEN_VMONDVDDRISE | EMU_IEN_VMONDVDDFALL;
    233a:	631a      	str	r2, [r3, #48]	; 0x30
    EMU->VMONDVDDCTRL = ((uint32_t)ubLowThresh << _EMU_VMONDVDDCTRL_THRESFINE_SHIFT) | EMU_VMONDVDDCTRL_EN;
    233c:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
    2340:	e7dc      	b.n	22fc <emu_vmon_dvdd_config+0x1c>
    2342:	bf00      	nop
    2344:	400e3000 	.word	0x400e3000
    2348:	0fe081b0 	.word	0x0fe081b0

0000234c <emu_vmon_iovdd_config>:
void emu_vmon_iovdd_config(uint8_t ubEnable, float fLowThresh, float *pfLowThresh)
{
    234c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    234e:	460f      	mov	r7, r1
    if(!ubEnable)
    2350:	b958      	cbnz	r0, 236a <emu_vmon_iovdd_config+0x1e>
    {
        EMU->VMONIO0CTRL &= ~EMU_VMONIO0CTRL_EN;
    2352:	4b17      	ldr	r3, [pc, #92]	; (23b0 <emu_vmon_iovdd_config+0x64>)
    2354:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    2358:	f022 0201 	bic.w	r2, r2, #1
    235c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        EMU->IEN &= ~(EMU_IEN_VMONIO0RISE | EMU_IEN_VMONIO0FALL);
    2360:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2362:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
    2366:	631a      	str	r2, [r3, #48]	; 0x30
        *pfLowThresh = emu_vmon_thresh_get(ubThresh1V86, ubThresh2V98, ubLowThresh);

    EMU->IFC = EMU_IFC_VMONIO0RISE | EMU_IFC_VMONIO0FALL;
    EMU->IEN |= EMU_IEN_VMONIO0RISE | EMU_IEN_VMONIO0FALL;
    EMU->VMONIO0CTRL = ((uint32_t)ubLowThresh << _EMU_VMONIO0CTRL_THRESFINE_SHIFT) | EMU_VMONIO0CTRL_EN;
    2368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint8_t ubThresh1V86 = (DEVINFO->VMONCAL1 >> 16) & 0xFF;
    236a:	4b12      	ldr	r3, [pc, #72]	; (23b4 <emu_vmon_iovdd_config+0x68>)
    236c:	f8d3 5144 	ldr.w	r5, [r3, #324]	; 0x144
    uint8_t ubThresh2V98 = (DEVINFO->VMONCAL1 >> 24) & 0xFF;
    2370:	f8d3 6144 	ldr.w	r6, [r3, #324]	; 0x144
    uint8_t ubThresh1V86 = (DEVINFO->VMONCAL1 >> 16) & 0xFF;
    2374:	f3c5 4507 	ubfx	r5, r5, #16, #8
    uint8_t ubThresh2V98 = (DEVINFO->VMONCAL1 >> 24) & 0xFF;
    2378:	0e36      	lsrs	r6, r6, #24
    uint8_t ubLowThresh = emu_vmon_thresh_calc(ubThresh1V86, ubThresh2V98, fLowThresh);
    237a:	4631      	mov	r1, r6
    237c:	4628      	mov	r0, r5
    237e:	f7ff fe99 	bl	20b4 <emu_vmon_thresh_calc>
    2382:	4604      	mov	r4, r0
    if(pfLowThresh)
    2384:	b137      	cbz	r7, 2394 <emu_vmon_iovdd_config+0x48>
        *pfLowThresh = emu_vmon_thresh_get(ubThresh1V86, ubThresh2V98, ubLowThresh);
    2386:	4602      	mov	r2, r0
    2388:	4631      	mov	r1, r6
    238a:	4628      	mov	r0, r5
    238c:	f7ff fe64 	bl	2058 <emu_vmon_thresh_get>
    2390:	ed87 0a00 	vstr	s0, [r7]
    EMU->IFC = EMU_IFC_VMONIO0RISE | EMU_IFC_VMONIO0FALL;
    2394:	4b06      	ldr	r3, [pc, #24]	; (23b0 <emu_vmon_iovdd_config+0x64>)
    2396:	22c0      	movs	r2, #192	; 0xc0
    2398:	62da      	str	r2, [r3, #44]	; 0x2c
    EMU->IEN |= EMU_IEN_VMONIO0RISE | EMU_IEN_VMONIO0FALL;
    239a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    EMU->VMONIO0CTRL = ((uint32_t)ubLowThresh << _EMU_VMONIO0CTRL_THRESFINE_SHIFT) | EMU_VMONIO0CTRL_EN;
    239c:	0224      	lsls	r4, r4, #8
    EMU->IEN |= EMU_IEN_VMONIO0RISE | EMU_IEN_VMONIO0FALL;
    239e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
    EMU->VMONIO0CTRL = ((uint32_t)ubLowThresh << _EMU_VMONIO0CTRL_THRESFINE_SHIFT) | EMU_VMONIO0CTRL_EN;
    23a2:	f044 0401 	orr.w	r4, r4, #1
    EMU->IEN |= EMU_IEN_VMONIO0RISE | EMU_IEN_VMONIO0FALL;
    23a6:	631a      	str	r2, [r3, #48]	; 0x30
    EMU->VMONIO0CTRL = ((uint32_t)ubLowThresh << _EMU_VMONIO0CTRL_THRESFINE_SHIFT) | EMU_VMONIO0CTRL_EN;
    23a8:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
    23ac:	e7dc      	b.n	2368 <emu_vmon_iovdd_config+0x1c>
    23ae:	bf00      	nop
    23b0:	400e3000 	.word	0x400e3000
    23b4:	0fe081b0 	.word	0x0fe081b0

000023b8 <gpio_init>:
#include "gpio.h"

void gpio_init()
{
    CMU->HFBUSCLKEN0 |= CMU_HFBUSCLKEN0_GPIO;
    23b8:	4a28      	ldr	r2, [pc, #160]	; (245c <gpio_init+0xa4>)
    23ba:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
    23be:	f043 0320 	orr.w	r3, r3, #32
    23c2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

    // Port A
    GPIO->P[0].CTRL   = GPIO_P_CTRL_DRIVESTRENGTHALT_STRONG | (5 << _GPIO_P_CTRL_SLEWRATEALT_SHIFT)
    23c6:	4b26      	ldr	r3, [pc, #152]	; (2460 <gpio_init+0xa8>)
    23c8:	f04f 1150 	mov.w	r1, #5242960	; 0x500050
                      | GPIO_P_CTRL_DRIVESTRENGTH_STRONG | (5 << _GPIO_P_CTRL_SLEWRATE_SHIFT);
    GPIO->P[0].MODEL  = GPIO_P_MODEL_MODE0_PUSHPULL  // GPIO - LED
    23cc:	2204      	movs	r2, #4
    GPIO->P[0].CTRL   = GPIO_P_CTRL_DRIVESTRENGTHALT_STRONG | (5 << _GPIO_P_CTRL_SLEWRATEALT_SHIFT)
    23ce:	6019      	str	r1, [r3, #0]
                      | GPIO_P_MODEH_MODE15_DISABLED;
    GPIO->P[0].DOUT   = 0;
    GPIO->P[0].OVTDIS = 0;

    // Port B
    GPIO->P[1].CTRL   = GPIO_P_CTRL_DRIVESTRENGTHALT_STRONG | (7 << _GPIO_P_CTRL_SLEWRATEALT_SHIFT)
    23d0:	f04f 1070 	mov.w	r0, #7340144	; 0x700070
    GPIO->P[0].MODEL  = GPIO_P_MODEL_MODE0_PUSHPULL  // GPIO - LED
    23d4:	605a      	str	r2, [r3, #4]
    GPIO->P[0].MODEH  = GPIO_P_MODEH_MODE8_DISABLED
    23d6:	2200      	movs	r2, #0
    23d8:	609a      	str	r2, [r3, #8]
    GPIO->P[0].DOUT   = 0;
    23da:	60da      	str	r2, [r3, #12]
    GPIO->P[0].OVTDIS = 0;
    23dc:	629a      	str	r2, [r3, #40]	; 0x28
    GPIO->P[1].CTRL   = GPIO_P_CTRL_DRIVESTRENGTHALT_STRONG | (7 << _GPIO_P_CTRL_SLEWRATEALT_SHIFT)
    23de:	6318      	str	r0, [r3, #48]	; 0x30
                      | GPIO_P_MODEL_MODE3_DISABLED
                      | GPIO_P_MODEL_MODE4_DISABLED
                      | GPIO_P_MODEL_MODE5_DISABLED
                      | GPIO_P_MODEL_MODE6_DISABLED
                      | GPIO_P_MODEL_MODE7_DISABLED;
    GPIO->P[1].MODEH  = GPIO_P_MODEH_MODE8_DISABLED
    23e0:	f44f 203b 	mov.w	r0, #765952	; 0xbb000
    GPIO->P[1].MODEL  = GPIO_P_MODEL_MODE0_DISABLED
    23e4:	635a      	str	r2, [r3, #52]	; 0x34
    GPIO->P[1].MODEH  = GPIO_P_MODEH_MODE8_DISABLED
    23e6:	6398      	str	r0, [r3, #56]	; 0x38
                      | GPIO_P_MODEH_MODE11_WIREDANDPULLUPFILTER // I2C1_SDA - Location 1
                      | GPIO_P_MODEH_MODE12_WIREDANDPULLUPFILTER // I2C1_SCL - Location 1
                      | GPIO_P_MODEH_MODE13_DISABLED
                      | GPIO_P_MODEH_MODE14_DISABLED
                      | GPIO_P_MODEH_MODE15_DISABLED;
    GPIO->P[1].DOUT   = BIT(11) | BIT(12);
    23e8:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
    23ec:	63d8      	str	r0, [r3, #60]	; 0x3c
                      | GPIO_P_MODEL_MODE3_DISABLED
                      | GPIO_P_MODEL_MODE4_DISABLED
                      | GPIO_P_MODEL_MODE5_DISABLED
                      | GPIO_P_MODEL_MODE6_DISABLED
                      | GPIO_P_MODEL_MODE7_DISABLED;
    GPIO->P[3].MODEH  = GPIO_P_MODEH_MODE8_DISABLED
    23ee:	481d      	ldr	r0, [pc, #116]	; (2464 <gpio_init+0xac>)
    GPIO->P[1].OVTDIS = 0;
    23f0:	659a      	str	r2, [r3, #88]	; 0x58
    GPIO->P[2].CTRL   = GPIO_P_CTRL_DRIVESTRENGTHALT_STRONG | (5 << _GPIO_P_CTRL_SLEWRATEALT_SHIFT)
    23f2:	6619      	str	r1, [r3, #96]	; 0x60
    GPIO->P[2].MODEL  = GPIO_P_MODEL_MODE0_DISABLED
    23f4:	665a      	str	r2, [r3, #100]	; 0x64
    GPIO->P[2].MODEH  = GPIO_P_MODEH_MODE8_DISABLED
    23f6:	669a      	str	r2, [r3, #104]	; 0x68
    GPIO->P[2].DOUT   = 0;
    23f8:	66da      	str	r2, [r3, #108]	; 0x6c
    GPIO->P[2].OVTDIS = 0;
    23fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    GPIO->P[3].CTRL   = GPIO_P_CTRL_DRIVESTRENGTHALT_STRONG | (5 << _GPIO_P_CTRL_SLEWRATEALT_SHIFT)
    23fe:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
    GPIO->P[3].MODEL  = GPIO_P_MODEL_MODE0_DISABLED
    2402:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    GPIO->P[3].MODEH  = GPIO_P_MODEH_MODE8_DISABLED
    2406:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
                      | GPIO_P_MODEH_MODE11_PUSHPULL // QSPI0_DQ2 - Location 0
                      | GPIO_P_MODEH_MODE12_PUSHPULL // QSPI0_DQ3 - Location 0
                      | GPIO_P_MODEH_MODE13_DISABLED
                      | GPIO_P_MODEH_MODE14_DISABLED
                      | GPIO_P_MODEH_MODE15_DISABLED;
    GPIO->P[3].DOUT   = 0;
    240a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    GPIO->P[3].OVTDIS = 0;
    240e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

    // Port E
    GPIO->P[4].CTRL   = GPIO_P_CTRL_DRIVESTRENGTHALT_STRONG | (5 << _GPIO_P_CTRL_SLEWRATEALT_SHIFT)
    2412:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
                      | GPIO_P_CTRL_DRIVESTRENGTH_STRONG | (5 << _GPIO_P_CTRL_SLEWRATE_SHIFT);
    GPIO->P[4].MODEL  = GPIO_P_MODEL_MODE0_DISABLED
    2416:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
                      | GPIO_P_MODEL_MODE3_DISABLED
                      | GPIO_P_MODEL_MODE4_DISABLED
                      | GPIO_P_MODEL_MODE5_DISABLED
                      | GPIO_P_MODEL_MODE6_DISABLED
                      | GPIO_P_MODEL_MODE7_DISABLED;
    GPIO->P[4].MODEH  = GPIO_P_MODEH_MODE8_DISABLED
    241a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                      | GPIO_P_MODEH_MODE11_DISABLED
                      | GPIO_P_MODEH_MODE12_DISABLED
                      | GPIO_P_MODEH_MODE13_DISABLED
                      | GPIO_P_MODEH_MODE14_DISABLED
                      | GPIO_P_MODEH_MODE15_DISABLED;
    GPIO->P[4].DOUT   = 0;
    241e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    GPIO->P[4].OVTDIS = 0;
    2422:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

    // Port F
    GPIO->P[5].CTRL   = GPIO_P_CTRL_DRIVESTRENGTHALT_STRONG | (5 << _GPIO_P_CTRL_SLEWRATEALT_SHIFT)
    2426:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
                      | GPIO_P_CTRL_DRIVESTRENGTH_STRONG | (5 << _GPIO_P_CTRL_SLEWRATE_SHIFT);
    GPIO->P[5].MODEL  = GPIO_P_MODEL_MODE0_PUSHPULL  // DBG_SWCLK - Location 0
    242a:	490f      	ldr	r1, [pc, #60]	; (2468 <gpio_init+0xb0>)
    242c:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
                      | GPIO_P_MODEH_MODE11_DISABLED
                      | GPIO_P_MODEH_MODE12_DISABLED
                      | GPIO_P_MODEH_MODE13_DISABLED
                      | GPIO_P_MODEH_MODE14_DISABLED
                      | GPIO_P_MODEH_MODE15_DISABLED;
    GPIO->P[5].DOUT   = BIT(7);
    2430:	2180      	movs	r1, #128	; 0x80
    GPIO->P[5].MODEH  = GPIO_P_MODEH_MODE8_DISABLED
    2432:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    GPIO->P[5].DOUT   = BIT(7);
    2436:	f8c3 10fc 	str.w	r1, [r3, #252]	; 0xfc
    GPIO->P[5].OVTDIS = 0;
    243a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

    // Debugger Route
    GPIO->ROUTEPEN &= ~(GPIO_ROUTEPEN_TDIPEN | GPIO_ROUTEPEN_TDOPEN); // Disable JTAG
    243e:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
    2442:	f021 010c 	bic.w	r1, r1, #12
    2446:	f8c3 1440 	str.w	r1, [r3, #1088]	; 0x440
    GPIO->ROUTEPEN |= GPIO_ROUTEPEN_SWVPEN; // Enable SWO
    244a:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
    244e:	f041 0110 	orr.w	r1, r1, #16
    2452:	f8c3 1440 	str.w	r1, [r3, #1088]	; 0x440
    GPIO->ROUTELOC0 = GPIO_ROUTELOC0_SWVLOC_LOC0; // SWO on PF2
    2456:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
    245a:	4770      	bx	lr
    245c:	400e4000 	.word	0x400e4000
    2460:	40088000 	.word	0x40088000
    2464:	00044440 	.word	0x00044440
    2468:	44000444 	.word	0x44000444

0000246c <get_device_name>:

    return ulFreeRAM;
}

void get_device_name(char *pszDeviceName, uint32_t ulDeviceNameSize)
{
    246c:	b570      	push	{r4, r5, r6, lr}
    uint8_t ubFamily = (DEVINFO->PART & _DEVINFO_PART_DEVICE_FAMILY_MASK) >> _DEVINFO_PART_DEVICE_FAMILY_SHIFT;
    246e:	4ca2      	ldr	r4, [pc, #648]	; (26f8 <get_device_name+0x28c>)
    2470:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    2472:	f3c2 4207 	ubfx	r2, r2, #16, #8
    const char* szFamily = "?";

    if(ubFamily == 0x10)
    2476:	2a10      	cmp	r2, #16
{
    2478:	b086      	sub	sp, #24
    if(ubFamily == 0x10)
    247a:	f000 80cc 	beq.w	2616 <get_device_name+0x1aa>
        szFamily = "EFR32MG1P";
    else if(ubFamily == 0x11)
    247e:	2a11      	cmp	r2, #17
    2480:	f000 80cb 	beq.w	261a <get_device_name+0x1ae>
        szFamily = "EFR32MG1B";
    else if(ubFamily == 0x12)
    2484:	2a12      	cmp	r2, #18
    2486:	f000 80ca 	beq.w	261e <get_device_name+0x1b2>
        szFamily = "EFR32MG1V";
    else if(ubFamily == 0x13)
    248a:	2a13      	cmp	r2, #19
    248c:	f000 80c9 	beq.w	2622 <get_device_name+0x1b6>
        szFamily = "EFR32BG1P";
    else if(ubFamily == 0x14)
    2490:	2a14      	cmp	r2, #20
    2492:	f000 80c8 	beq.w	2626 <get_device_name+0x1ba>
        szFamily = "EFR32BG1B";
    else if(ubFamily == 0x15)
    2496:	2a15      	cmp	r2, #21
    2498:	f000 80c7 	beq.w	262a <get_device_name+0x1be>
        szFamily = "EFR32BG1V";
    else if(ubFamily == 0x19)
    249c:	2a19      	cmp	r2, #25
    249e:	f000 80c6 	beq.w	262e <get_device_name+0x1c2>
        szFamily = "EFR32FG1P";
    else if(ubFamily == 0x1A)
    24a2:	2a1a      	cmp	r2, #26
    24a4:	f000 80c5 	beq.w	2632 <get_device_name+0x1c6>
        szFamily = "EFR32FG1B";
    else if(ubFamily == 0x1B)
    24a8:	2a1b      	cmp	r2, #27
    24aa:	f000 80c4 	beq.w	2636 <get_device_name+0x1ca>
        szFamily = "EFR32FG1V";
    else if(ubFamily == 0x1C)
    24ae:	2a1c      	cmp	r2, #28
    24b0:	f000 80c3 	beq.w	263a <get_device_name+0x1ce>
        szFamily = "EFR32MG12P";
    else if(ubFamily == 0x1D)
    24b4:	2a1d      	cmp	r2, #29
    24b6:	f000 80c2 	beq.w	263e <get_device_name+0x1d2>
        szFamily = "EFR32MG12B";
    else if(ubFamily == 0x1E)
    24ba:	2a1e      	cmp	r2, #30
    24bc:	f000 80c1 	beq.w	2642 <get_device_name+0x1d6>
        szFamily = "EFR32MG12V";
    else if(ubFamily == 0x1F)
    24c0:	2a1f      	cmp	r2, #31
    24c2:	f000 80c0 	beq.w	2646 <get_device_name+0x1da>
        szFamily = "EFR32BG12P";
    else if(ubFamily == 0x20)
    24c6:	2a20      	cmp	r2, #32
    24c8:	f000 80bf 	beq.w	264a <get_device_name+0x1de>
        szFamily = "EFR32BG12B";
    else if(ubFamily == 0x21)
    24cc:	2a21      	cmp	r2, #33	; 0x21
    24ce:	f000 80be 	beq.w	264e <get_device_name+0x1e2>
        szFamily = "EFR32BG12V";
    else if(ubFamily == 0x25)
    24d2:	2a25      	cmp	r2, #37	; 0x25
    24d4:	f000 80bd 	beq.w	2652 <get_device_name+0x1e6>
        szFamily = "EFR32FG12P";
    else if(ubFamily == 0x26)
    24d8:	2a26      	cmp	r2, #38	; 0x26
    24da:	f000 80bc 	beq.w	2656 <get_device_name+0x1ea>
        szFamily = "EFR32FG12B";
    else if(ubFamily == 0x27)
    24de:	2a27      	cmp	r2, #39	; 0x27
    24e0:	f000 80bb 	beq.w	265a <get_device_name+0x1ee>
        szFamily = "EFR32FG12V";
    else if(ubFamily == 0x28)
    24e4:	2a28      	cmp	r2, #40	; 0x28
    24e6:	f000 80ba 	beq.w	265e <get_device_name+0x1f2>
        szFamily = "EFR32MG13P";
    else if(ubFamily == 0x29)
    24ea:	2a29      	cmp	r2, #41	; 0x29
    24ec:	f000 80b9 	beq.w	2662 <get_device_name+0x1f6>
        szFamily = "EFR32MG13B";
    else if(ubFamily == 0x2A)
    24f0:	2a2a      	cmp	r2, #42	; 0x2a
    24f2:	f000 80b8 	beq.w	2666 <get_device_name+0x1fa>
        szFamily = "EFR32MG13V";
    else if(ubFamily == 0x2B)
    24f6:	2a2b      	cmp	r2, #43	; 0x2b
    24f8:	f000 80b7 	beq.w	266a <get_device_name+0x1fe>
        szFamily = "EFR32BG13P";
    else if(ubFamily == 0x2C)
    24fc:	2a2c      	cmp	r2, #44	; 0x2c
    24fe:	f000 80b6 	beq.w	266e <get_device_name+0x202>
        szFamily = "EFR32BG13B";
    else if(ubFamily == 0x2D)
    2502:	2a2d      	cmp	r2, #45	; 0x2d
    2504:	f000 80b5 	beq.w	2672 <get_device_name+0x206>
        szFamily = "EFR32BG13V";
    else if(ubFamily == 0x2E)
    2508:	2a2e      	cmp	r2, #46	; 0x2e
    250a:	f000 80b4 	beq.w	2676 <get_device_name+0x20a>
        szFamily = "EFR32ZG13P";
    else if(ubFamily == 0x31)
    250e:	2a31      	cmp	r2, #49	; 0x31
    2510:	f000 80b3 	beq.w	267a <get_device_name+0x20e>
        szFamily = "EFR32FG13P";
    else if(ubFamily == 0x32)
    2514:	2a32      	cmp	r2, #50	; 0x32
    2516:	f000 80b2 	beq.w	267e <get_device_name+0x212>
        szFamily = "EFR32FG13B";
    else if(ubFamily == 0x33)
    251a:	2a33      	cmp	r2, #51	; 0x33
    251c:	f000 80b1 	beq.w	2682 <get_device_name+0x216>
        szFamily = "EFR32FG13V";
    else if(ubFamily == 0x34)
    2520:	2a34      	cmp	r2, #52	; 0x34
    2522:	f000 80b0 	beq.w	2686 <get_device_name+0x21a>
        szFamily = "EFR32MG14P";
    else if(ubFamily == 0x35)
    2526:	2a35      	cmp	r2, #53	; 0x35
    2528:	f000 80af 	beq.w	268a <get_device_name+0x21e>
        szFamily = "EFR32MG14B";
    else if(ubFamily == 0x36)
    252c:	2a36      	cmp	r2, #54	; 0x36
    252e:	f000 80ae 	beq.w	268e <get_device_name+0x222>
        szFamily = "EFR32MG14V";
    else if(ubFamily == 0x37)
    2532:	2a37      	cmp	r2, #55	; 0x37
    2534:	f000 80ad 	beq.w	2692 <get_device_name+0x226>
        szFamily = "EFR32BG14P";
    else if(ubFamily == 0x38)
    2538:	2a38      	cmp	r2, #56	; 0x38
    253a:	f000 80ac 	beq.w	2696 <get_device_name+0x22a>
        szFamily = "EFR32BG14B";
    else if(ubFamily == 0x39)
    253e:	2a39      	cmp	r2, #57	; 0x39
    2540:	f000 80ab 	beq.w	269a <get_device_name+0x22e>
        szFamily = "EFR32BG14V";
    else if(ubFamily == 0x3A)
    2544:	2a3a      	cmp	r2, #58	; 0x3a
    2546:	f000 80aa 	beq.w	269e <get_device_name+0x232>
        szFamily = "EFR32ZG14P";
    else if(ubFamily == 0x3D)
    254a:	2a3d      	cmp	r2, #61	; 0x3d
    254c:	f000 80a9 	beq.w	26a2 <get_device_name+0x236>
        szFamily = "EFR32FG14P";
    else if(ubFamily == 0x3E)
    2550:	2a3e      	cmp	r2, #62	; 0x3e
    2552:	f000 80a8 	beq.w	26a6 <get_device_name+0x23a>
        szFamily = "EFR32FG14B";
    else if(ubFamily == 0x3F)
    2556:	2a3f      	cmp	r2, #63	; 0x3f
    2558:	f000 80a7 	beq.w	26aa <get_device_name+0x23e>
        szFamily = "EFR32FG14V";
    else if(ubFamily == 0x47)
    255c:	2a47      	cmp	r2, #71	; 0x47
    255e:	f000 80a6 	beq.w	26ae <get_device_name+0x242>
        szFamily = "EFM32G";
    else if(ubFamily == 0x47)
        szFamily = "G";
    else if(ubFamily == 0x48)
    2562:	2a48      	cmp	r2, #72	; 0x48
    2564:	f000 80a5 	beq.w	26b2 <get_device_name+0x246>
        szFamily = "EFM32GG";
    else if(ubFamily == 0x48)
        szFamily = "GG";
    else if(ubFamily == 0x49)
    2568:	2a49      	cmp	r2, #73	; 0x49
    256a:	f000 80a4 	beq.w	26b6 <get_device_name+0x24a>
        szFamily = "TG";
    else if(ubFamily == 0x49)
        szFamily = "EFM32TG";
    else if(ubFamily == 0x4A)
    256e:	2a4a      	cmp	r2, #74	; 0x4a
    2570:	f000 80a3 	beq.w	26ba <get_device_name+0x24e>
        szFamily = "EFM32LG";
    else if(ubFamily == 0x4A)
        szFamily = "LG";
    else if(ubFamily == 0x4B)
    2574:	2a4b      	cmp	r2, #75	; 0x4b
    2576:	f000 80a2 	beq.w	26be <get_device_name+0x252>
        szFamily = "EFM32WG";
    else if(ubFamily == 0x4B)
        szFamily = "WG";
    else if(ubFamily == 0x4C)
    257a:	2a4c      	cmp	r2, #76	; 0x4c
    257c:	f000 80a1 	beq.w	26c2 <get_device_name+0x256>
        szFamily = "ZG";
    else if(ubFamily == 0x4C)
        szFamily = "EFM32ZG";
    else if(ubFamily == 0x4D)
    2580:	2a4d      	cmp	r2, #77	; 0x4d
    2582:	f000 80a0 	beq.w	26c6 <get_device_name+0x25a>
        szFamily = "HG";
    else if(ubFamily == 0x4D)
        szFamily = "EFM32HG";
    else if(ubFamily == 0x51)
    2586:	2a51      	cmp	r2, #81	; 0x51
    2588:	f000 809f 	beq.w	26ca <get_device_name+0x25e>
        szFamily = "EFM32PG1B";
    else if(ubFamily == 0x53)
    258c:	2a53      	cmp	r2, #83	; 0x53
    258e:	f000 809e 	beq.w	26ce <get_device_name+0x262>
        szFamily = "EFM32JG1B";
    else if(ubFamily == 0x55)
    2592:	2a55      	cmp	r2, #85	; 0x55
    2594:	f000 809d 	beq.w	26d2 <get_device_name+0x266>
        szFamily = "EFM32PG12B";
    else if(ubFamily == 0x57)
    2598:	2a57      	cmp	r2, #87	; 0x57
    259a:	f000 809c 	beq.w	26d6 <get_device_name+0x26a>
        szFamily = "EFM32JG12B";
    else if(ubFamily == 0x64)
    259e:	2a64      	cmp	r2, #100	; 0x64
    25a0:	f000 809b 	beq.w	26da <get_device_name+0x26e>
        szFamily = "EFM32GG11B";
    else if(ubFamily == 0x67)
    25a4:	2a67      	cmp	r2, #103	; 0x67
    25a6:	f000 809a 	beq.w	26de <get_device_name+0x272>
        szFamily = "EFM32TG11B";
    else if(ubFamily == 0x6A)
    25aa:	2a6a      	cmp	r2, #106	; 0x6a
    25ac:	f000 8099 	beq.w	26e2 <get_device_name+0x276>
        szFamily = "EFM32GG12B";
    else if(ubFamily == 0x78)
    25b0:	2a78      	cmp	r2, #120	; 0x78
    25b2:	f000 8098 	beq.w	26e6 <get_device_name+0x27a>
        szFamily = "EZR32LG";
    else if(ubFamily == 0x79)
    25b6:	2a79      	cmp	r2, #121	; 0x79
    25b8:	f000 8097 	beq.w	26ea <get_device_name+0x27e>
        szFamily = "EZR32WG";
    else if(ubFamily == 0x7A)
        szFamily = "EZR32HG";
    25bc:	4d4f      	ldr	r5, [pc, #316]	; (26fc <get_device_name+0x290>)
    25be:	4b50      	ldr	r3, [pc, #320]	; (2700 <get_device_name+0x294>)
    25c0:	2a7a      	cmp	r2, #122	; 0x7a
    25c2:	bf18      	it	ne
    25c4:	462b      	movne	r3, r5
    
    uint8_t ubPackage = (DEVINFO->MEMINFO & _DEVINFO_MEMINFO_PKGTYPE_MASK) >> _DEVINFO_MEMINFO_PKGTYPE_SHIFT;
    25c6:	6b62      	ldr	r2, [r4, #52]	; 0x34
    25c8:	f3c2 2207 	ubfx	r2, r2, #8, #8
    char cPackage = '?';
    
    if(ubPackage == 74)
    25cc:	2a4a      	cmp	r2, #74	; 0x4a
    25ce:	f000 808e 	beq.w	26ee <get_device_name+0x282>
        cPackage = '?';
    else if(ubPackage == 76)
    25d2:	2a4c      	cmp	r2, #76	; 0x4c
    25d4:	d005      	beq.n	25e2 <get_device_name+0x176>
        cPackage = 'L';
    else if(ubPackage == 77)
    25d6:	2a4d      	cmp	r2, #77	; 0x4d
    25d8:	d003      	beq.n	25e2 <get_device_name+0x176>
        cPackage = 'M';
    else if(ubPackage == 81)
        cPackage = 'Q';
    25da:	2a51      	cmp	r2, #81	; 0x51
    25dc:	bf14      	ite	ne
    25de:	223f      	movne	r2, #63	; 0x3f
    25e0:	2251      	moveq	r2, #81	; 0x51

    uint8_t ubTempGrade = (DEVINFO->MEMINFO & _DEVINFO_MEMINFO_TEMPGRADE_MASK) >> _DEVINFO_MEMINFO_TEMPGRADE_SHIFT;
    25e2:	6b65      	ldr	r5, [r4, #52]	; 0x34
    char cTempGrade = '?';

    if(ubTempGrade == 0)
    25e4:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    25e8:	f000 8083 	beq.w	26f2 <get_device_name+0x286>
        cTempGrade = 'G';
    else if(ubTempGrade == 1)
        cTempGrade = 'I';
    else if(ubTempGrade == 2)
        cTempGrade = '?';
    25ec:	2d01      	cmp	r5, #1
    25ee:	bf0c      	ite	eq
    25f0:	2649      	moveq	r6, #73	; 0x49
    25f2:	263f      	movne	r6, #63	; 0x3f
    else if(ubTempGrade == 3)
        cTempGrade = '?';

    uint16_t usPartNumber = (DEVINFO->PART & _DEVINFO_PART_DEVICE_NUMBER_MASK) >> _DEVINFO_PART_DEVICE_NUMBER_SHIFT;
    25f4:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
    uint8_t ubPinCount = (DEVINFO->MEMINFO & _DEVINFO_MEMINFO_PINCOUNT_MASK) >> _DEVINFO_MEMINFO_PINCOUNT_SHIFT;
    25f6:	6b64      	ldr	r4, [r4, #52]	; 0x34

    snprintf(pszDeviceName, ulDeviceNameSize, "%s%huF%hu%c%c%hhu", szFamily, usPartNumber, FLASH_SIZE >> 10, cTempGrade, cPackage, ubPinCount);
    25f8:	9602      	str	r6, [sp, #8]
    25fa:	f3c4 4407 	ubfx	r4, r4, #16, #8
    25fe:	e9cd 2403 	strd	r2, r4, [sp, #12]
    2602:	b2ad      	uxth	r5, r5
    2604:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2608:	9201      	str	r2, [sp, #4]
    260a:	9500      	str	r5, [sp, #0]
    260c:	4a3d      	ldr	r2, [pc, #244]	; (2704 <get_device_name+0x298>)
    260e:	f001 fe65 	bl	42dc <snprintf>
}
    2612:	b006      	add	sp, #24
    2614:	bd70      	pop	{r4, r5, r6, pc}
        szFamily = "EFR32MG1P";
    2616:	4b3c      	ldr	r3, [pc, #240]	; (2708 <get_device_name+0x29c>)
    2618:	e7d5      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "EFR32MG1B";
    261a:	4b3c      	ldr	r3, [pc, #240]	; (270c <get_device_name+0x2a0>)
    261c:	e7d3      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "EFR32MG1V";
    261e:	4b3c      	ldr	r3, [pc, #240]	; (2710 <get_device_name+0x2a4>)
    2620:	e7d1      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "EFR32BG1P";
    2622:	4b3c      	ldr	r3, [pc, #240]	; (2714 <get_device_name+0x2a8>)
    2624:	e7cf      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "EFR32BG1B";
    2626:	4b3c      	ldr	r3, [pc, #240]	; (2718 <get_device_name+0x2ac>)
    2628:	e7cd      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "EFR32BG1V";
    262a:	4b3c      	ldr	r3, [pc, #240]	; (271c <get_device_name+0x2b0>)
    262c:	e7cb      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "EFR32FG1P";
    262e:	4b3c      	ldr	r3, [pc, #240]	; (2720 <get_device_name+0x2b4>)
    2630:	e7c9      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "EFR32FG1B";
    2632:	4b3c      	ldr	r3, [pc, #240]	; (2724 <get_device_name+0x2b8>)
    2634:	e7c7      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "EFR32FG1V";
    2636:	4b3c      	ldr	r3, [pc, #240]	; (2728 <get_device_name+0x2bc>)
    2638:	e7c5      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "EFR32MG12P";
    263a:	4b3c      	ldr	r3, [pc, #240]	; (272c <get_device_name+0x2c0>)
    263c:	e7c3      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "EFR32MG12B";
    263e:	4b3c      	ldr	r3, [pc, #240]	; (2730 <get_device_name+0x2c4>)
    2640:	e7c1      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "EFR32MG12V";
    2642:	4b3c      	ldr	r3, [pc, #240]	; (2734 <get_device_name+0x2c8>)
    2644:	e7bf      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "EFR32BG12P";
    2646:	4b3c      	ldr	r3, [pc, #240]	; (2738 <get_device_name+0x2cc>)
    2648:	e7bd      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "EFR32BG12B";
    264a:	4b3c      	ldr	r3, [pc, #240]	; (273c <get_device_name+0x2d0>)
    264c:	e7bb      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "EFR32BG12V";
    264e:	4b3c      	ldr	r3, [pc, #240]	; (2740 <get_device_name+0x2d4>)
    2650:	e7b9      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "EFR32FG12P";
    2652:	4b3c      	ldr	r3, [pc, #240]	; (2744 <get_device_name+0x2d8>)
    2654:	e7b7      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "EFR32FG12B";
    2656:	4b3c      	ldr	r3, [pc, #240]	; (2748 <get_device_name+0x2dc>)
    2658:	e7b5      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "EFR32FG12V";
    265a:	4b3c      	ldr	r3, [pc, #240]	; (274c <get_device_name+0x2e0>)
    265c:	e7b3      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "EFR32MG13P";
    265e:	4b3c      	ldr	r3, [pc, #240]	; (2750 <get_device_name+0x2e4>)
    2660:	e7b1      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "EFR32MG13B";
    2662:	4b3c      	ldr	r3, [pc, #240]	; (2754 <get_device_name+0x2e8>)
    2664:	e7af      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "EFR32MG13V";
    2666:	4b3c      	ldr	r3, [pc, #240]	; (2758 <get_device_name+0x2ec>)
    2668:	e7ad      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "EFR32BG13P";
    266a:	4b3c      	ldr	r3, [pc, #240]	; (275c <get_device_name+0x2f0>)
    266c:	e7ab      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "EFR32BG13B";
    266e:	4b3c      	ldr	r3, [pc, #240]	; (2760 <get_device_name+0x2f4>)
    2670:	e7a9      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "EFR32BG13V";
    2672:	4b3c      	ldr	r3, [pc, #240]	; (2764 <get_device_name+0x2f8>)
    2674:	e7a7      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "EFR32ZG13P";
    2676:	4b3c      	ldr	r3, [pc, #240]	; (2768 <get_device_name+0x2fc>)
    2678:	e7a5      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "EFR32FG13P";
    267a:	4b3c      	ldr	r3, [pc, #240]	; (276c <get_device_name+0x300>)
    267c:	e7a3      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "EFR32FG13B";
    267e:	4b3c      	ldr	r3, [pc, #240]	; (2770 <get_device_name+0x304>)
    2680:	e7a1      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "EFR32FG13V";
    2682:	4b3c      	ldr	r3, [pc, #240]	; (2774 <get_device_name+0x308>)
    2684:	e79f      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "EFR32MG14P";
    2686:	4b3c      	ldr	r3, [pc, #240]	; (2778 <get_device_name+0x30c>)
    2688:	e79d      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "EFR32MG14B";
    268a:	4b3c      	ldr	r3, [pc, #240]	; (277c <get_device_name+0x310>)
    268c:	e79b      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "EFR32MG14V";
    268e:	4b3c      	ldr	r3, [pc, #240]	; (2780 <get_device_name+0x314>)
    2690:	e799      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "EFR32BG14P";
    2692:	4b3c      	ldr	r3, [pc, #240]	; (2784 <get_device_name+0x318>)
    2694:	e797      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "EFR32BG14B";
    2696:	4b3c      	ldr	r3, [pc, #240]	; (2788 <get_device_name+0x31c>)
    2698:	e795      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "EFR32BG14V";
    269a:	4b3c      	ldr	r3, [pc, #240]	; (278c <get_device_name+0x320>)
    269c:	e793      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "EFR32ZG14P";
    269e:	4b3c      	ldr	r3, [pc, #240]	; (2790 <get_device_name+0x324>)
    26a0:	e791      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "EFR32FG14P";
    26a2:	4b3c      	ldr	r3, [pc, #240]	; (2794 <get_device_name+0x328>)
    26a4:	e78f      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "EFR32FG14B";
    26a6:	4b3c      	ldr	r3, [pc, #240]	; (2798 <get_device_name+0x32c>)
    26a8:	e78d      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "EFR32FG14V";
    26aa:	4b3c      	ldr	r3, [pc, #240]	; (279c <get_device_name+0x330>)
    26ac:	e78b      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "EFM32G";
    26ae:	4b3c      	ldr	r3, [pc, #240]	; (27a0 <get_device_name+0x334>)
    26b0:	e789      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "EFM32GG";
    26b2:	4b3c      	ldr	r3, [pc, #240]	; (27a4 <get_device_name+0x338>)
    26b4:	e787      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "TG";
    26b6:	4b3c      	ldr	r3, [pc, #240]	; (27a8 <get_device_name+0x33c>)
    26b8:	e785      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "EFM32LG";
    26ba:	4b3c      	ldr	r3, [pc, #240]	; (27ac <get_device_name+0x340>)
    26bc:	e783      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "EFM32WG";
    26be:	4b3c      	ldr	r3, [pc, #240]	; (27b0 <get_device_name+0x344>)
    26c0:	e781      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "ZG";
    26c2:	4b3c      	ldr	r3, [pc, #240]	; (27b4 <get_device_name+0x348>)
    26c4:	e77f      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "HG";
    26c6:	4b3c      	ldr	r3, [pc, #240]	; (27b8 <get_device_name+0x34c>)
    26c8:	e77d      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "EFM32PG1B";
    26ca:	4b3c      	ldr	r3, [pc, #240]	; (27bc <get_device_name+0x350>)
    26cc:	e77b      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "EFM32JG1B";
    26ce:	4b3c      	ldr	r3, [pc, #240]	; (27c0 <get_device_name+0x354>)
    26d0:	e779      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "EFM32PG12B";
    26d2:	4b3c      	ldr	r3, [pc, #240]	; (27c4 <get_device_name+0x358>)
    26d4:	e777      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "EFM32JG12B";
    26d6:	4b3c      	ldr	r3, [pc, #240]	; (27c8 <get_device_name+0x35c>)
    26d8:	e775      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "EFM32GG11B";
    26da:	4b3c      	ldr	r3, [pc, #240]	; (27cc <get_device_name+0x360>)
    26dc:	e773      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "EFM32TG11B";
    26de:	4b3c      	ldr	r3, [pc, #240]	; (27d0 <get_device_name+0x364>)
    26e0:	e771      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "EFM32GG12B";
    26e2:	4b3c      	ldr	r3, [pc, #240]	; (27d4 <get_device_name+0x368>)
    26e4:	e76f      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "EZR32LG";
    26e6:	4b3c      	ldr	r3, [pc, #240]	; (27d8 <get_device_name+0x36c>)
    26e8:	e76d      	b.n	25c6 <get_device_name+0x15a>
        szFamily = "EZR32WG";
    26ea:	4b3c      	ldr	r3, [pc, #240]	; (27dc <get_device_name+0x370>)
    26ec:	e76b      	b.n	25c6 <get_device_name+0x15a>
        cPackage = '?';
    26ee:	223f      	movs	r2, #63	; 0x3f
    26f0:	e777      	b.n	25e2 <get_device_name+0x176>
        cTempGrade = 'G';
    26f2:	2647      	movs	r6, #71	; 0x47
    26f4:	e77e      	b.n	25f4 <get_device_name+0x188>
    26f6:	bf00      	nop
    26f8:	0fe081b0 	.word	0x0fe081b0
    26fc:	000047f8 	.word	0x000047f8
    2700:	00004a09 	.word	0x00004a09
    2704:	00004a11 	.word	0x00004a11
    2708:	000047fa 	.word	0x000047fa
    270c:	00004804 	.word	0x00004804
    2710:	0000480e 	.word	0x0000480e
    2714:	00004818 	.word	0x00004818
    2718:	00004822 	.word	0x00004822
    271c:	0000482c 	.word	0x0000482c
    2720:	00004836 	.word	0x00004836
    2724:	00004840 	.word	0x00004840
    2728:	0000484a 	.word	0x0000484a
    272c:	00004854 	.word	0x00004854
    2730:	0000485f 	.word	0x0000485f
    2734:	0000486a 	.word	0x0000486a
    2738:	00004875 	.word	0x00004875
    273c:	00004880 	.word	0x00004880
    2740:	0000488b 	.word	0x0000488b
    2744:	00004896 	.word	0x00004896
    2748:	000048a1 	.word	0x000048a1
    274c:	000048ac 	.word	0x000048ac
    2750:	000048b7 	.word	0x000048b7
    2754:	000048c2 	.word	0x000048c2
    2758:	000048cd 	.word	0x000048cd
    275c:	000048d8 	.word	0x000048d8
    2760:	000048e3 	.word	0x000048e3
    2764:	000048ee 	.word	0x000048ee
    2768:	000048f9 	.word	0x000048f9
    276c:	00004904 	.word	0x00004904
    2770:	0000490f 	.word	0x0000490f
    2774:	0000491a 	.word	0x0000491a
    2778:	00004925 	.word	0x00004925
    277c:	00004930 	.word	0x00004930
    2780:	0000493b 	.word	0x0000493b
    2784:	00004946 	.word	0x00004946
    2788:	00004951 	.word	0x00004951
    278c:	0000495c 	.word	0x0000495c
    2790:	00004967 	.word	0x00004967
    2794:	00004972 	.word	0x00004972
    2798:	0000497d 	.word	0x0000497d
    279c:	00004990 	.word	0x00004990
    27a0:	000049a3 	.word	0x000049a3
    27a4:	000049b5 	.word	0x000049b5
    27a8:	000049c8 	.word	0x000049c8
    27ac:	000049d6 	.word	0x000049d6
    27b0:	000049e9 	.word	0x000049e9
    27b4:	000049fc 	.word	0x000049fc
    27b8:	00004a0e 	.word	0x00004a0e
    27bc:	000049ff 	.word	0x000049ff
    27c0:	000047ee 	.word	0x000047ee
    27c4:	000049f1 	.word	0x000049f1
    27c8:	000049de 	.word	0x000049de
    27cc:	000049cb 	.word	0x000049cb
    27d0:	000049bd 	.word	0x000049bd
    27d4:	000049aa 	.word	0x000049aa
    27d8:	0000499b 	.word	0x0000499b
    27dc:	00004988 	.word	0x00004988

000027e0 <init>:

    return usRevision;
}

int init()
{
    27e0:	b570      	push	{r4, r5, r6, lr}
    27e2:	ed2d 8b04 	vpush	{d8-d9}
    27e6:	b08c      	sub	sp, #48	; 0x30
    emu_init(); // Init EMU
    27e8:	f7ff fce2 	bl	21b0 <emu_init>
    cmu_hfxo_startup_calib(0x200, 0x087); // Config HFXO Startup for 1280 uA, 20.04 pF
    cmu_hfxo_steady_calib(0x006, 0x087); // Config HFXO Steady state for 12 uA, 20.04 pF

    cmu_init(); // Inic Clocks

    cmu_ushfrco_calib(1, USHFRCO_CALIB_8M, 8000000); // Enable and calibrate USHFRCO for 8 MHz
    27ec:	4cd4      	ldr	r4, [pc, #848]	; (2b40 <init+0x360>)
    cmu_hfxo_startup_calib(0x200, 0x087); // Config HFXO Startup for 1280 uA, 20.04 pF
    27ee:	2187      	movs	r1, #135	; 0x87
    27f0:	f44f 7000 	mov.w	r0, #512	; 0x200
    27f4:	f7fe fe54 	bl	14a0 <cmu_hfxo_startup_calib>
    cmu_hfxo_steady_calib(0x006, 0x087); // Config HFXO Steady state for 12 uA, 20.04 pF
    27f8:	2187      	movs	r1, #135	; 0x87
    27fa:	2006      	movs	r0, #6
    27fc:	f7fe fe8e 	bl	151c <cmu_hfxo_steady_calib>
    cmu_init(); // Inic Clocks
    2800:	f7fe fd30 	bl	1264 <cmu_init>
    cmu_ushfrco_calib(1, USHFRCO_CALIB_8M, 8000000); // Enable and calibrate USHFRCO for 8 MHz
    2804:	f8d4 126c 	ldr.w	r1, [r4, #620]	; 0x26c
    2808:	4ace      	ldr	r2, [pc, #824]	; (2b44 <init+0x364>)
    280a:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
    280e:	2001      	movs	r0, #1
    2810:	f7fe fdf6 	bl	1400 <cmu_ushfrco_calib>
    cmu_auxhfrco_calib(1, AUXHFRCO_CALIB_32M, 32000000); // Enable and calibrate AUXHFRCO for 32 MHz
    2814:	4acc      	ldr	r2, [pc, #816]	; (2b48 <init+0x368>)
    2816:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
    281a:	2001      	movs	r0, #1
    281c:	f7fe fe1c 	bl	1458 <cmu_auxhfrco_calib>

    cmu_update_clocks(); // Update Clocks
    2820:	f7fe fab6 	bl	d90 <cmu_update_clocks>

    dbg_init(); // Init Debug module
    2824:	f7fe ff32 	bl	168c <dbg_init>
    dbg_swo_config(BIT(0) | BIT(1), 2000000); // Init SWO channels 0 and 1 at 2 MHz
    2828:	49c8      	ldr	r1, [pc, #800]	; (2b4c <init+0x36c>)
    282a:	2003      	movs	r0, #3
    282c:	f7fe ff36 	bl	169c <dbg_swo_config>

    msc_init(); // Init Flash, RAM and caches
    2830:	f7ff f9af 	bl	1b92 <msc_init>

    systick_init(); // Init system tick
    2834:	f000 fdf6 	bl	3424 <systick_init>

    gpio_init(); // Init GPIOs
    2838:	f7ff fdbe 	bl	23b8 <gpio_init>
    rtcc_init(); // Init RTCC
    283c:	f000 fdae 	bl	339c <rtcc_init>
    crypto_init(); // Init Crypto engine
    2840:	f7fe ff72 	bl	1728 <crypto_init>
    crc_init(); // Init CRC calculation unit
    2844:	f7fe ff0e 	bl	1664 <crc_init>
    adc_init(); // Init ADCs
    2848:	f000 fefe 	bl	3648 <adc_init>
    qspi_init(); // Init QSPI memory
    284c:	f7ff fbb8 	bl	1fc0 <qspi_init>
    
    float fAVDDHighThresh, fAVDDLowThresh;
    float fDVDDHighThresh, fDVDDLowThresh;
    float fIOVDDHighThresh, fIOVDDLowThresh;

    emu_vmon_avdd_config(1, 3.1f, &fAVDDLowThresh, 3.22f, &fAVDDHighThresh); // Enable AVDD monitor
    2850:	eddf 0abf 	vldr	s1, [pc, #764]	; 2b50 <init+0x370>
    2854:	ed9f 0abf 	vldr	s0, [pc, #764]	; 2b54 <init+0x374>
    2858:	466a      	mov	r2, sp
    285a:	a901      	add	r1, sp, #4
    285c:	2001      	movs	r0, #1
    285e:	f7ff fceb 	bl	2238 <emu_vmon_avdd_config>
    emu_vmon_dvdd_config(1, 2.5f, &fDVDDLowThresh); // Enable DVDD monitor
    2862:	a902      	add	r1, sp, #8
    2864:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
    2868:	2001      	movs	r0, #1
    286a:	f7ff fd39 	bl	22e0 <emu_vmon_dvdd_config>
    emu_vmon_iovdd_config(1, 3.15f, &fIOVDDLowThresh); // Enable IOVDD monitor
    286e:	ed9f 0aba 	vldr	s0, [pc, #744]	; 2b58 <init+0x378>
    2872:	a903      	add	r1, sp, #12
    2874:	2001      	movs	r0, #1
    2876:	f7ff fd69 	bl	234c <emu_vmon_iovdd_config>

    fDVDDHighThresh = fDVDDLowThresh + 0.026f; // Hysteresis from datasheet
    287a:	eddf 7ab8 	vldr	s15, [pc, #736]	; 2b5c <init+0x37c>
    287e:	eddd 9a02 	vldr	s19, [sp, #8]
    fIOVDDHighThresh = fIOVDDLowThresh + 0.026f; // Hysteresis from datasheet
    2882:	ed9d 9a03 	vldr	s18, [sp, #12]

    i2c1_init(I2C_NORMAL, 1, 1); // Init I2C1 at 100 kHz on location 1
    2886:	2201      	movs	r2, #1
    2888:	4611      	mov	r1, r2
    288a:	2000      	movs	r0, #0
    fDVDDHighThresh = fDVDDLowThresh + 0.026f; // Hysteresis from datasheet
    288c:	ee79 9aa7 	vadd.f32	s19, s19, s15
    fIOVDDHighThresh = fIOVDDLowThresh + 0.026f; // Hysteresis from datasheet
    2890:	ee39 9a27 	vadd.f32	s18, s18, s15
    i2c1_init(I2C_NORMAL, 1, 1); // Init I2C1 at 100 kHz on location 1
    2894:	f000 fdf2 	bl	347c <i2c1_init>

    char szDeviceName[32];

    get_device_name(szDeviceName, 32);
    2898:	a804      	add	r0, sp, #16
    289a:	2120      	movs	r1, #32
    289c:	f7ff fde6 	bl	246c <get_device_name>

    DBGPRINTLN_CTX("Device: %s", szDeviceName);
    28a0:	aa04      	add	r2, sp, #16
    28a2:	49af      	ldr	r1, [pc, #700]	; (2b60 <init+0x380>)
    28a4:	48af      	ldr	r0, [pc, #700]	; (2b64 <init+0x384>)
    28a6:	f001 fd05 	bl	42b4 <printf>
    usRevision = ((ROMTABLE->PID0 & _ROMTABLE_PID0_REVMAJOR_MASK) >> _ROMTABLE_PID0_REVMAJOR_SHIFT) << 8;
    28aa:	49af      	ldr	r1, [pc, #700]	; (2b68 <init+0x388>)
    DBGPRINTLN_CTX("Device Revision: 0x%04X", get_device_revision());
    28ac:	48af      	ldr	r0, [pc, #700]	; (2b6c <init+0x38c>)
    usRevision = ((ROMTABLE->PID0 & _ROMTABLE_PID0_REVMAJOR_MASK) >> _ROMTABLE_PID0_REVMAJOR_SHIFT) << 8;
    28ae:	690b      	ldr	r3, [r1, #16]
    usRevision |= ((ROMTABLE->PID2 & _ROMTABLE_PID2_REVMINORMSB_MASK) >> _ROMTABLE_PID2_REVMINORMSB_SHIFT) << 4;
    28b0:	698a      	ldr	r2, [r1, #24]
    usRevision |= (ROMTABLE->PID3 & _ROMTABLE_PID3_REVMINORLSB_MASK) >> _ROMTABLE_PID3_REVMINORLSB_SHIFT;
    28b2:	69c9      	ldr	r1, [r1, #28]
    usRevision = ((ROMTABLE->PID0 & _ROMTABLE_PID0_REVMAJOR_MASK) >> _ROMTABLE_PID0_REVMAJOR_SHIFT) << 8;
    28b4:	021b      	lsls	r3, r3, #8
    usRevision |= (ROMTABLE->PID3 & _ROMTABLE_PID3_REVMINORLSB_MASK) >> _ROMTABLE_PID3_REVMINORLSB_SHIFT;
    28b6:	f3c1 1103 	ubfx	r1, r1, #4, #4
    usRevision = ((ROMTABLE->PID0 & _ROMTABLE_PID0_REVMAJOR_MASK) >> _ROMTABLE_PID0_REVMAJOR_SHIFT) << 8;
    28ba:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    28be:	430b      	orrs	r3, r1
    usRevision |= ((ROMTABLE->PID2 & _ROMTABLE_PID2_REVMINORMSB_MASK) >> _ROMTABLE_PID2_REVMINORMSB_SHIFT) << 4;
    28c0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    DBGPRINTLN_CTX("Device Revision: 0x%04X", get_device_revision());
    28c4:	431a      	orrs	r2, r3
    28c6:	49a6      	ldr	r1, [pc, #664]	; (2b60 <init+0x380>)
    28c8:	f001 fcf4 	bl	42b4 <printf>
    DBGPRINTLN_CTX("Calibration temperature: %hhu C", (DEVINFO->CAL & _DEVINFO_CAL_TEMP_MASK) >> _DEVINFO_CAL_TEMP_SHIFT);
    28cc:	6822      	ldr	r2, [r4, #0]
    28ce:	49a4      	ldr	r1, [pc, #656]	; (2b60 <init+0x380>)
    28d0:	48a7      	ldr	r0, [pc, #668]	; (2b70 <init+0x390>)
    28d2:	f3c2 4207 	ubfx	r2, r2, #16, #8
    28d6:	f001 fced 	bl	42b4 <printf>
    DBGPRINTLN_CTX("Flash Size: %hu kB", FLASH_SIZE >> 10);
    28da:	f44f 6200 	mov.w	r2, #2048	; 0x800
    28de:	49a0      	ldr	r1, [pc, #640]	; (2b60 <init+0x380>)
    28e0:	48a4      	ldr	r0, [pc, #656]	; (2b74 <init+0x394>)
    28e2:	f001 fce7 	bl	42b4 <printf>
    DBGPRINTLN_CTX("RAM Size: %hu kB", SRAM_SIZE >> 10);
    28e6:	f44f 7200 	mov.w	r2, #512	; 0x200
    28ea:	499d      	ldr	r1, [pc, #628]	; (2b60 <init+0x380>)
    28ec:	48a2      	ldr	r0, [pc, #648]	; (2b78 <init+0x398>)
    28ee:	f001 fce1 	bl	42b4 <printf>
    void *pCurrentHeap = malloc(1);
    28f2:	2001      	movs	r0, #1
    28f4:	f001 fd36 	bl	4364 <malloc>
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
    28f8:	f3ef 8508 	mrs	r5, MSP
    uint32_t ulFreeRAM = (uint32_t)__get_MSP() - (uint32_t)pCurrentHeap;
    28fc:	1a2d      	subs	r5, r5, r0
    free(pCurrentHeap);
    28fe:	f001 fd39 	bl	4374 <free>
    DBGPRINTLN_CTX("Free RAM: %lu B", get_free_ram());
    2902:	462a      	mov	r2, r5
    2904:	4996      	ldr	r1, [pc, #600]	; (2b60 <init+0x380>)
    2906:	489d      	ldr	r0, [pc, #628]	; (2b7c <init+0x39c>)
    DBGPRINTLN_CTX("Unique ID: %08X-%08X", DEVINFO->UNIQUEH, DEVINFO->UNIQUEL);

    DBGPRINTLN_CTX("CMU - HFXO Clock: %.1f MHz!", (float)HFXO_VALUE / 1000000);
    DBGPRINTLN_CTX("CMU - HFRCO Clock: %.1f MHz!", (float)HFRCO_VALUE / 1000000);
    2908:	eddf 8a9d 	vldr	s17, [pc, #628]	; 2b80 <init+0x3a0>
    DBGPRINTLN_CTX("CMU - USHFRCO Clock: %.1f MHz!", (float)USHFRCO_VALUE / 1000000);
    DBGPRINTLN_CTX("CMU - AUXHFRCO Clock: %.1f MHz!", (float)AUXHFRCO_VALUE / 1000000);
    DBGPRINTLN_CTX("CMU - LFXO Clock: %.3f kHz!", (float)LFXO_VALUE / 1000);
    DBGPRINTLN_CTX("CMU - LFRCO Clock: %.3f kHz!", (float)LFRCO_VALUE / 1000);
    290c:	ed9f 8a9d 	vldr	s16, [pc, #628]	; 2b84 <init+0x3a4>
    DBGPRINTLN_CTX("CMU - RTCC Clock: %.3f kHz!", (float)RTCC_CLOCK_FREQ / 1000);

    DBGPRINTLN_CTX("EMU - AVDD Fall Threshold: %.2f mV!", fAVDDLowThresh * 1000);
    DBGPRINTLN_CTX("EMU - AVDD Rise Threshold: %.2f mV!", fAVDDHighThresh * 1000);
    DBGPRINTLN_CTX("EMU - AVDD Voltage: %.2f mV", adc_get_avdd());
    DBGPRINTLN_CTX("EMU - AVDD Status: %s", g_ubAVDDLow ? "LOW" : "OK");
    2910:	4d9d      	ldr	r5, [pc, #628]	; (2b88 <init+0x3a8>)
    DBGPRINTLN_CTX("Scanning I2C bus 1...");

    for(uint8_t a = 0x08; a < 0x78; a++)
    {
        if(i2c1_write(a, 0, 0, I2C_STOP))
            DBGPRINTLN_CTX("  Address 0x%02X ACKed!", a);
    2912:	4e9e      	ldr	r6, [pc, #632]	; (2b8c <init+0x3ac>)
    DBGPRINTLN_CTX("Free RAM: %lu B", get_free_ram());
    2914:	f001 fcce 	bl	42b4 <printf>
    DBGPRINTLN_CTX("Unique ID: %08X-%08X", DEVINFO->UNIQUEH, DEVINFO->UNIQUEL);
    2918:	6c62      	ldr	r2, [r4, #68]	; 0x44
    291a:	4991      	ldr	r1, [pc, #580]	; (2b60 <init+0x380>)
    291c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    291e:	489c      	ldr	r0, [pc, #624]	; (2b90 <init+0x3b0>)
    DBGPRINTLN_CTX("EMU - AVDD Status: %s", g_ubAVDDLow ? "LOW" : "OK");
    2920:	4c9c      	ldr	r4, [pc, #624]	; (2b94 <init+0x3b4>)
    DBGPRINTLN_CTX("Unique ID: %08X-%08X", DEVINFO->UNIQUEH, DEVINFO->UNIQUEL);
    2922:	f001 fcc7 	bl	42b4 <printf>
    DBGPRINTLN_CTX("CMU - HFXO Clock: %.1f MHz!", (float)HFXO_VALUE / 1000000);
    2926:	2200      	movs	r2, #0
    2928:	4b9b      	ldr	r3, [pc, #620]	; (2b98 <init+0x3b8>)
    292a:	498d      	ldr	r1, [pc, #564]	; (2b60 <init+0x380>)
    292c:	489b      	ldr	r0, [pc, #620]	; (2b9c <init+0x3bc>)
    292e:	f001 fcc1 	bl	42b4 <printf>
    DBGPRINTLN_CTX("CMU - HFRCO Clock: %.1f MHz!", (float)HFRCO_VALUE / 1000000);
    2932:	4b9b      	ldr	r3, [pc, #620]	; (2ba0 <init+0x3c0>)
    2934:	edd3 7a00 	vldr	s15, [r3]
    2938:	eef8 7a67 	vcvt.f32.u32	s15, s15
    293c:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    2940:	ee17 0a90 	vmov	r0, s15
    2944:	f7fd fd68 	bl	418 <__aeabi_f2d>
    2948:	4602      	mov	r2, r0
    294a:	460b      	mov	r3, r1
    294c:	4895      	ldr	r0, [pc, #596]	; (2ba4 <init+0x3c4>)
    294e:	4984      	ldr	r1, [pc, #528]	; (2b60 <init+0x380>)
    2950:	f001 fcb0 	bl	42b4 <printf>
    DBGPRINTLN_CTX("CMU - USHFRCO Clock: %.1f MHz!", (float)USHFRCO_VALUE / 1000000);
    2954:	4b94      	ldr	r3, [pc, #592]	; (2ba8 <init+0x3c8>)
    2956:	edd3 7a00 	vldr	s15, [r3]
    295a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    295e:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    2962:	ee17 0a90 	vmov	r0, s15
    2966:	f7fd fd57 	bl	418 <__aeabi_f2d>
    296a:	4602      	mov	r2, r0
    296c:	460b      	mov	r3, r1
    296e:	488f      	ldr	r0, [pc, #572]	; (2bac <init+0x3cc>)
    2970:	497b      	ldr	r1, [pc, #492]	; (2b60 <init+0x380>)
    2972:	f001 fc9f 	bl	42b4 <printf>
    DBGPRINTLN_CTX("CMU - AUXHFRCO Clock: %.1f MHz!", (float)AUXHFRCO_VALUE / 1000000);
    2976:	4b8e      	ldr	r3, [pc, #568]	; (2bb0 <init+0x3d0>)
    2978:	edd3 7a00 	vldr	s15, [r3]
    297c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2980:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    2984:	ee17 0a90 	vmov	r0, s15
    2988:	f7fd fd46 	bl	418 <__aeabi_f2d>
    298c:	4602      	mov	r2, r0
    298e:	460b      	mov	r3, r1
    2990:	4888      	ldr	r0, [pc, #544]	; (2bb4 <init+0x3d4>)
    2992:	4973      	ldr	r1, [pc, #460]	; (2b60 <init+0x380>)
    2994:	f001 fc8e 	bl	42b4 <printf>
    DBGPRINTLN_CTX("CMU - LFXO Clock: %.3f kHz!", (float)LFXO_VALUE / 1000);
    2998:	a367      	add	r3, pc, #412	; (adr r3, 2b38 <init+0x358>)
    299a:	e9d3 2300 	ldrd	r2, r3, [r3]
    299e:	4970      	ldr	r1, [pc, #448]	; (2b60 <init+0x380>)
    29a0:	4885      	ldr	r0, [pc, #532]	; (2bb8 <init+0x3d8>)
    29a2:	f001 fc87 	bl	42b4 <printf>
    DBGPRINTLN_CTX("CMU - LFRCO Clock: %.3f kHz!", (float)LFRCO_VALUE / 1000);
    29a6:	4b85      	ldr	r3, [pc, #532]	; (2bbc <init+0x3dc>)
    29a8:	edd3 7a00 	vldr	s15, [r3]
    29ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
    29b0:	eec7 7a88 	vdiv.f32	s15, s15, s16
    29b4:	ee17 0a90 	vmov	r0, s15
    29b8:	f7fd fd2e 	bl	418 <__aeabi_f2d>
    29bc:	4602      	mov	r2, r0
    29be:	460b      	mov	r3, r1
    29c0:	487f      	ldr	r0, [pc, #508]	; (2bc0 <init+0x3e0>)
    29c2:	4967      	ldr	r1, [pc, #412]	; (2b60 <init+0x380>)
    29c4:	f001 fc76 	bl	42b4 <printf>
    DBGPRINTLN_CTX("CMU - ULFRCO Clock: %.3f kHz!", (float)ULFRCO_VALUE / 1000);
    29c8:	4b7e      	ldr	r3, [pc, #504]	; (2bc4 <init+0x3e4>)
    29ca:	edd3 7a00 	vldr	s15, [r3]
    29ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
    29d2:	eec7 7a88 	vdiv.f32	s15, s15, s16
    29d6:	ee17 0a90 	vmov	r0, s15
    29da:	f7fd fd1d 	bl	418 <__aeabi_f2d>
    29de:	4602      	mov	r2, r0
    29e0:	460b      	mov	r3, r1
    29e2:	4879      	ldr	r0, [pc, #484]	; (2bc8 <init+0x3e8>)
    29e4:	495e      	ldr	r1, [pc, #376]	; (2b60 <init+0x380>)
    29e6:	f001 fc65 	bl	42b4 <printf>
    DBGPRINTLN_CTX("CMU - HFSRC Clock: %.1f MHz!", (float)HFSRC_CLOCK_FREQ / 1000000);
    29ea:	4b78      	ldr	r3, [pc, #480]	; (2bcc <init+0x3ec>)
    29ec:	edd3 7a00 	vldr	s15, [r3]
    29f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
    29f4:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    29f8:	ee17 0a90 	vmov	r0, s15
    29fc:	f7fd fd0c 	bl	418 <__aeabi_f2d>
    2a00:	4602      	mov	r2, r0
    2a02:	460b      	mov	r3, r1
    2a04:	4872      	ldr	r0, [pc, #456]	; (2bd0 <init+0x3f0>)
    2a06:	4956      	ldr	r1, [pc, #344]	; (2b60 <init+0x380>)
    2a08:	f001 fc54 	bl	42b4 <printf>
    DBGPRINTLN_CTX("CMU - HF Clock: %.1f MHz!", (float)HF_CLOCK_FREQ / 1000000);
    2a0c:	4b71      	ldr	r3, [pc, #452]	; (2bd4 <init+0x3f4>)
    2a0e:	edd3 7a00 	vldr	s15, [r3]
    2a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2a16:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    2a1a:	ee17 0a90 	vmov	r0, s15
    2a1e:	f7fd fcfb 	bl	418 <__aeabi_f2d>
    2a22:	4602      	mov	r2, r0
    2a24:	460b      	mov	r3, r1
    2a26:	486c      	ldr	r0, [pc, #432]	; (2bd8 <init+0x3f8>)
    2a28:	494d      	ldr	r1, [pc, #308]	; (2b60 <init+0x380>)
    2a2a:	f001 fc43 	bl	42b4 <printf>
    DBGPRINTLN_CTX("CMU - HFBUS Clock: %.1f MHz!", (float)HFBUS_CLOCK_FREQ / 1000000);
    2a2e:	4b6b      	ldr	r3, [pc, #428]	; (2bdc <init+0x3fc>)
    2a30:	edd3 7a00 	vldr	s15, [r3]
    2a34:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2a38:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    2a3c:	ee17 0a90 	vmov	r0, s15
    2a40:	f7fd fcea 	bl	418 <__aeabi_f2d>
    2a44:	4602      	mov	r2, r0
    2a46:	460b      	mov	r3, r1
    2a48:	4865      	ldr	r0, [pc, #404]	; (2be0 <init+0x400>)
    2a4a:	4945      	ldr	r1, [pc, #276]	; (2b60 <init+0x380>)
    2a4c:	f001 fc32 	bl	42b4 <printf>
    DBGPRINTLN_CTX("CMU - HFCORE Clock: %.1f MHz!", (float)HFCORE_CLOCK_FREQ / 1000000);
    2a50:	4b64      	ldr	r3, [pc, #400]	; (2be4 <init+0x404>)
    2a52:	edd3 7a00 	vldr	s15, [r3]
    2a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2a5a:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    2a5e:	ee17 0a90 	vmov	r0, s15
    2a62:	f7fd fcd9 	bl	418 <__aeabi_f2d>
    2a66:	4602      	mov	r2, r0
    2a68:	460b      	mov	r3, r1
    2a6a:	485f      	ldr	r0, [pc, #380]	; (2be8 <init+0x408>)
    2a6c:	493c      	ldr	r1, [pc, #240]	; (2b60 <init+0x380>)
    2a6e:	f001 fc21 	bl	42b4 <printf>
    DBGPRINTLN_CTX("CMU - HFEXP Clock: %.1f MHz!", (float)HFEXP_CLOCK_FREQ / 1000000);
    2a72:	4b5e      	ldr	r3, [pc, #376]	; (2bec <init+0x40c>)
    2a74:	edd3 7a00 	vldr	s15, [r3]
    2a78:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2a7c:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    2a80:	ee17 0a90 	vmov	r0, s15
    2a84:	f7fd fcc8 	bl	418 <__aeabi_f2d>
    2a88:	4602      	mov	r2, r0
    2a8a:	460b      	mov	r3, r1
    2a8c:	4858      	ldr	r0, [pc, #352]	; (2bf0 <init+0x410>)
    2a8e:	4934      	ldr	r1, [pc, #208]	; (2b60 <init+0x380>)
    2a90:	f001 fc10 	bl	42b4 <printf>
    DBGPRINTLN_CTX("CMU - HFPER Clock: %.1f MHz!", (float)HFPER_CLOCK_FREQ / 1000000);
    2a94:	4b57      	ldr	r3, [pc, #348]	; (2bf4 <init+0x414>)
    2a96:	edd3 7a00 	vldr	s15, [r3]
    2a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2a9e:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    2aa2:	ee17 0a90 	vmov	r0, s15
    2aa6:	f7fd fcb7 	bl	418 <__aeabi_f2d>
    2aaa:	4602      	mov	r2, r0
    2aac:	460b      	mov	r3, r1
    2aae:	4852      	ldr	r0, [pc, #328]	; (2bf8 <init+0x418>)
    2ab0:	492b      	ldr	r1, [pc, #172]	; (2b60 <init+0x380>)
    2ab2:	f001 fbff 	bl	42b4 <printf>
    DBGPRINTLN_CTX("CMU - HFPERB Clock: %.1f MHz!", (float)HFPERB_CLOCK_FREQ / 1000000);
    2ab6:	4b51      	ldr	r3, [pc, #324]	; (2bfc <init+0x41c>)
    2ab8:	edd3 7a00 	vldr	s15, [r3]
    2abc:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2ac0:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    2ac4:	ee17 0a90 	vmov	r0, s15
    2ac8:	f7fd fca6 	bl	418 <__aeabi_f2d>
    2acc:	4602      	mov	r2, r0
    2ace:	460b      	mov	r3, r1
    2ad0:	484b      	ldr	r0, [pc, #300]	; (2c00 <init+0x420>)
    2ad2:	4923      	ldr	r1, [pc, #140]	; (2b60 <init+0x380>)
    2ad4:	f001 fbee 	bl	42b4 <printf>
    DBGPRINTLN_CTX("CMU - HFPERC Clock: %.1f MHz!", (float)HFPERC_CLOCK_FREQ / 1000000);
    2ad8:	4b4a      	ldr	r3, [pc, #296]	; (2c04 <init+0x424>)
    2ada:	edd3 7a00 	vldr	s15, [r3]
    2ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2ae2:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    2ae6:	ee17 0a90 	vmov	r0, s15
    2aea:	f7fd fc95 	bl	418 <__aeabi_f2d>
    2aee:	4602      	mov	r2, r0
    2af0:	460b      	mov	r3, r1
    2af2:	4845      	ldr	r0, [pc, #276]	; (2c08 <init+0x428>)
    2af4:	491a      	ldr	r1, [pc, #104]	; (2b60 <init+0x380>)
    2af6:	f001 fbdd 	bl	42b4 <printf>
    DBGPRINTLN_CTX("CMU - HFLE Clock: %.1f MHz!", (float)HFLE_CLOCK_FREQ / 1000000);
    2afa:	4b44      	ldr	r3, [pc, #272]	; (2c0c <init+0x42c>)
    2afc:	edd3 7a00 	vldr	s15, [r3]
    2b00:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2b04:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    2b08:	ee17 0a90 	vmov	r0, s15
    2b0c:	f7fd fc84 	bl	418 <__aeabi_f2d>
    2b10:	4602      	mov	r2, r0
    2b12:	460b      	mov	r3, r1
    2b14:	483e      	ldr	r0, [pc, #248]	; (2c10 <init+0x430>)
    2b16:	4912      	ldr	r1, [pc, #72]	; (2b60 <init+0x380>)
    2b18:	f001 fbcc 	bl	42b4 <printf>
    DBGPRINTLN_CTX("CMU - QSPI Clock: %.1f MHz!", (float)QSPI_CLOCK_FREQ / 1000000);
    2b1c:	4b3d      	ldr	r3, [pc, #244]	; (2c14 <init+0x434>)
    2b1e:	edd3 7a00 	vldr	s15, [r3]
    2b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2b26:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    2b2a:	ee17 0a90 	vmov	r0, s15
    2b2e:	f7fd fc73 	bl	418 <__aeabi_f2d>
    2b32:	4602      	mov	r2, r0
    2b34:	e070      	b.n	2c18 <init+0x438>
    2b36:	bf00      	nop
    2b38:	e0000000 	.word	0xe0000000
    2b3c:	4040624d 	.word	0x4040624d
    2b40:	0fe081b0 	.word	0x0fe081b0
    2b44:	007a1200 	.word	0x007a1200
    2b48:	01e84800 	.word	0x01e84800
    2b4c:	001e8480 	.word	0x001e8480
    2b50:	404e147b 	.word	0x404e147b
    2b54:	40466666 	.word	0x40466666
    2b58:	4049999a 	.word	0x4049999a
    2b5c:	3cd4fdf4 	.word	0x3cd4fdf4
    2b60:	000047e4 	.word	0x000047e4
    2b64:	00004a2a 	.word	0x00004a2a
    2b68:	e00fffd0 	.word	0xe00fffd0
    2b6c:	00004a3e 	.word	0x00004a3e
    2b70:	00004a5f 	.word	0x00004a5f
    2b74:	00004a88 	.word	0x00004a88
    2b78:	00004aa4 	.word	0x00004aa4
    2b7c:	00004abe 	.word	0x00004abe
    2b80:	49742400 	.word	0x49742400
    2b84:	447a0000 	.word	0x447a0000
    2b88:	00004a23 	.word	0x00004a23
    2b8c:	0000528e 	.word	0x0000528e
    2b90:	00004ad7 	.word	0x00004ad7
    2b94:	00004a27 	.word	0x00004a27
    2b98:	40200000 	.word	0x40200000
    2b9c:	00004af5 	.word	0x00004af5
    2ba0:	20000004 	.word	0x20000004
    2ba4:	00004b1a 	.word	0x00004b1a
    2ba8:	20000010 	.word	0x20000010
    2bac:	00004b40 	.word	0x00004b40
    2bb0:	20000000 	.word	0x20000000
    2bb4:	00004b68 	.word	0x00004b68
    2bb8:	00004b91 	.word	0x00004b91
    2bbc:	20000008 	.word	0x20000008
    2bc0:	00004bb6 	.word	0x00004bb6
    2bc4:	2000000c 	.word	0x2000000c
    2bc8:	00004bdc 	.word	0x00004bdc
    2bcc:	200000d4 	.word	0x200000d4
    2bd0:	00004c03 	.word	0x00004c03
    2bd4:	200000fc 	.word	0x200000fc
    2bd8:	00004c29 	.word	0x00004c29
    2bdc:	200000d8 	.word	0x200000d8
    2be0:	00004c4c 	.word	0x00004c4c
    2be4:	200000c0 	.word	0x200000c0
    2be8:	00004c72 	.word	0x00004c72
    2bec:	200000e4 	.word	0x200000e4
    2bf0:	00004c99 	.word	0x00004c99
    2bf4:	200000f4 	.word	0x200000f4
    2bf8:	00004cbf 	.word	0x00004cbf
    2bfc:	200000e8 	.word	0x200000e8
    2c00:	00004ce5 	.word	0x00004ce5
    2c04:	200000e0 	.word	0x200000e0
    2c08:	00004d0c 	.word	0x00004d0c
    2c0c:	200000ac 	.word	0x200000ac
    2c10:	00004d33 	.word	0x00004d33
    2c14:	200000dc 	.word	0x200000dc
    2c18:	460b      	mov	r3, r1
    2c1a:	48d6      	ldr	r0, [pc, #856]	; (2f74 <init+0x794>)
    2c1c:	49d6      	ldr	r1, [pc, #856]	; (2f78 <init+0x798>)
    2c1e:	f001 fb49 	bl	42b4 <printf>
    DBGPRINTLN_CTX("CMU - SDIO Clock: %.1f MHz!", (float)SDIO_CLOCK_FREQ / 1000000);
    2c22:	4bd6      	ldr	r3, [pc, #856]	; (2f7c <init+0x79c>)
    2c24:	edd3 7a00 	vldr	s15, [r3]
    2c28:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2c2c:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    2c30:	ee17 0a90 	vmov	r0, s15
    2c34:	f7fd fbf0 	bl	418 <__aeabi_f2d>
    2c38:	4602      	mov	r2, r0
    2c3a:	460b      	mov	r3, r1
    2c3c:	48d0      	ldr	r0, [pc, #832]	; (2f80 <init+0x7a0>)
    2c3e:	49ce      	ldr	r1, [pc, #824]	; (2f78 <init+0x798>)
    2c40:	f001 fb38 	bl	42b4 <printf>
    DBGPRINTLN_CTX("CMU - USB Clock: %.1f MHz!", (float)USB_CLOCK_FREQ / 1000000);
    2c44:	4bcf      	ldr	r3, [pc, #828]	; (2f84 <init+0x7a4>)
    2c46:	edd3 7a00 	vldr	s15, [r3]
    2c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2c4e:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    2c52:	ee17 0a90 	vmov	r0, s15
    2c56:	f7fd fbdf 	bl	418 <__aeabi_f2d>
    2c5a:	4602      	mov	r2, r0
    2c5c:	460b      	mov	r3, r1
    2c5e:	48ca      	ldr	r0, [pc, #808]	; (2f88 <init+0x7a8>)
    2c60:	49c5      	ldr	r1, [pc, #788]	; (2f78 <init+0x798>)
    2c62:	f001 fb27 	bl	42b4 <printf>
    DBGPRINTLN_CTX("CMU - ADC0 Clock: %.1f MHz!", (float)ADC0_CLOCK_FREQ / 1000000);
    2c66:	4bc9      	ldr	r3, [pc, #804]	; (2f8c <init+0x7ac>)
    2c68:	edd3 7a00 	vldr	s15, [r3]
    2c6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2c70:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    2c74:	ee17 0a90 	vmov	r0, s15
    2c78:	f7fd fbce 	bl	418 <__aeabi_f2d>
    2c7c:	4602      	mov	r2, r0
    2c7e:	460b      	mov	r3, r1
    2c80:	48c3      	ldr	r0, [pc, #780]	; (2f90 <init+0x7b0>)
    2c82:	49bd      	ldr	r1, [pc, #756]	; (2f78 <init+0x798>)
    2c84:	f001 fb16 	bl	42b4 <printf>
    DBGPRINTLN_CTX("CMU - ADC1 Clock: %.1f MHz!", (float)ADC1_CLOCK_FREQ / 1000000);
    2c88:	4bc2      	ldr	r3, [pc, #776]	; (2f94 <init+0x7b4>)
    2c8a:	edd3 7a00 	vldr	s15, [r3]
    2c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2c92:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    2c96:	ee17 0a90 	vmov	r0, s15
    2c9a:	f7fd fbbd 	bl	418 <__aeabi_f2d>
    2c9e:	4602      	mov	r2, r0
    2ca0:	460b      	mov	r3, r1
    2ca2:	48bd      	ldr	r0, [pc, #756]	; (2f98 <init+0x7b8>)
    2ca4:	49b4      	ldr	r1, [pc, #720]	; (2f78 <init+0x798>)
    2ca6:	f001 fb05 	bl	42b4 <printf>
    DBGPRINTLN_CTX("CMU - DBG Clock: %.1f MHz!", (float)DBG_CLOCK_FREQ / 1000000);
    2caa:	4bbc      	ldr	r3, [pc, #752]	; (2f9c <init+0x7bc>)
    2cac:	edd3 7a00 	vldr	s15, [r3]
    2cb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2cb4:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    2cb8:	ee17 0a90 	vmov	r0, s15
    2cbc:	f7fd fbac 	bl	418 <__aeabi_f2d>
    2cc0:	4602      	mov	r2, r0
    2cc2:	460b      	mov	r3, r1
    2cc4:	48b6      	ldr	r0, [pc, #728]	; (2fa0 <init+0x7c0>)
    2cc6:	49ac      	ldr	r1, [pc, #688]	; (2f78 <init+0x798>)
    2cc8:	f001 faf4 	bl	42b4 <printf>
    DBGPRINTLN_CTX("CMU - AUX Clock: %.1f MHz!", (float)AUX_CLOCK_FREQ / 1000000);
    2ccc:	4bb5      	ldr	r3, [pc, #724]	; (2fa4 <init+0x7c4>)
    2cce:	edd3 7a00 	vldr	s15, [r3]
    2cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2cd6:	eec7 7aa8 	vdiv.f32	s15, s15, s17
    2cda:	ee17 0a90 	vmov	r0, s15
    2cde:	f7fd fb9b 	bl	418 <__aeabi_f2d>
    2ce2:	4602      	mov	r2, r0
    2ce4:	460b      	mov	r3, r1
    2ce6:	48b0      	ldr	r0, [pc, #704]	; (2fa8 <init+0x7c8>)
    2ce8:	49a3      	ldr	r1, [pc, #652]	; (2f78 <init+0x798>)
    2cea:	f001 fae3 	bl	42b4 <printf>
    DBGPRINTLN_CTX("CMU - LFA Clock: %.3f kHz!", (float)LFA_CLOCK_FREQ / 1000);
    2cee:	4baf      	ldr	r3, [pc, #700]	; (2fac <init+0x7cc>)
    2cf0:	edd3 7a00 	vldr	s15, [r3]
    2cf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2cf8:	eec7 7a88 	vdiv.f32	s15, s15, s16
    2cfc:	ee17 0a90 	vmov	r0, s15
    2d00:	f7fd fb8a 	bl	418 <__aeabi_f2d>
    2d04:	4602      	mov	r2, r0
    2d06:	460b      	mov	r3, r1
    2d08:	48a9      	ldr	r0, [pc, #676]	; (2fb0 <init+0x7d0>)
    2d0a:	499b      	ldr	r1, [pc, #620]	; (2f78 <init+0x798>)
    2d0c:	f001 fad2 	bl	42b4 <printf>
    DBGPRINTLN_CTX("CMU - LESENSE Clock: %.3f kHz!", (float)LESENSE_CLOCK_FREQ / 1000);
    2d10:	4ba8      	ldr	r3, [pc, #672]	; (2fb4 <init+0x7d4>)
    2d12:	edd3 7a00 	vldr	s15, [r3]
    2d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2d1a:	eec7 7a88 	vdiv.f32	s15, s15, s16
    2d1e:	ee17 0a90 	vmov	r0, s15
    2d22:	f7fd fb79 	bl	418 <__aeabi_f2d>
    2d26:	4602      	mov	r2, r0
    2d28:	460b      	mov	r3, r1
    2d2a:	48a3      	ldr	r0, [pc, #652]	; (2fb8 <init+0x7d8>)
    2d2c:	4992      	ldr	r1, [pc, #584]	; (2f78 <init+0x798>)
    2d2e:	f001 fac1 	bl	42b4 <printf>
    DBGPRINTLN_CTX("CMU - RTC Clock: %.3f kHz!", (float)RTC_CLOCK_FREQ / 1000);
    2d32:	4ba2      	ldr	r3, [pc, #648]	; (2fbc <init+0x7dc>)
    2d34:	edd3 7a00 	vldr	s15, [r3]
    2d38:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2d3c:	eec7 7a88 	vdiv.f32	s15, s15, s16
    2d40:	ee17 0a90 	vmov	r0, s15
    2d44:	f7fd fb68 	bl	418 <__aeabi_f2d>
    2d48:	4602      	mov	r2, r0
    2d4a:	460b      	mov	r3, r1
    2d4c:	489c      	ldr	r0, [pc, #624]	; (2fc0 <init+0x7e0>)
    2d4e:	498a      	ldr	r1, [pc, #552]	; (2f78 <init+0x798>)
    2d50:	f001 fab0 	bl	42b4 <printf>
    DBGPRINTLN_CTX("CMU - LCD Clock: %.3f kHz!", (float)LCD_CLOCK_FREQ / 1000);
    2d54:	4b9b      	ldr	r3, [pc, #620]	; (2fc4 <init+0x7e4>)
    2d56:	edd3 7a00 	vldr	s15, [r3]
    2d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2d5e:	eec7 7a88 	vdiv.f32	s15, s15, s16
    2d62:	ee17 0a90 	vmov	r0, s15
    2d66:	f7fd fb57 	bl	418 <__aeabi_f2d>
    2d6a:	4602      	mov	r2, r0
    2d6c:	460b      	mov	r3, r1
    2d6e:	4896      	ldr	r0, [pc, #600]	; (2fc8 <init+0x7e8>)
    2d70:	4981      	ldr	r1, [pc, #516]	; (2f78 <init+0x798>)
    2d72:	f001 fa9f 	bl	42b4 <printf>
    DBGPRINTLN_CTX("CMU - LETIMER0 Clock: %.3f kHz!", (float)LETIMER0_CLOCK_FREQ / 1000);
    2d76:	4b95      	ldr	r3, [pc, #596]	; (2fcc <init+0x7ec>)
    2d78:	edd3 7a00 	vldr	s15, [r3]
    2d7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2d80:	eec7 7a88 	vdiv.f32	s15, s15, s16
    2d84:	ee17 0a90 	vmov	r0, s15
    2d88:	f7fd fb46 	bl	418 <__aeabi_f2d>
    2d8c:	4602      	mov	r2, r0
    2d8e:	460b      	mov	r3, r1
    2d90:	488f      	ldr	r0, [pc, #572]	; (2fd0 <init+0x7f0>)
    2d92:	4979      	ldr	r1, [pc, #484]	; (2f78 <init+0x798>)
    2d94:	f001 fa8e 	bl	42b4 <printf>
    DBGPRINTLN_CTX("CMU - LETIMER1 Clock: %.3f kHz!", (float)LETIMER1_CLOCK_FREQ / 1000);
    2d98:	4b8e      	ldr	r3, [pc, #568]	; (2fd4 <init+0x7f4>)
    2d9a:	edd3 7a00 	vldr	s15, [r3]
    2d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2da2:	eec7 7a88 	vdiv.f32	s15, s15, s16
    2da6:	ee17 0a90 	vmov	r0, s15
    2daa:	f7fd fb35 	bl	418 <__aeabi_f2d>
    2dae:	4602      	mov	r2, r0
    2db0:	460b      	mov	r3, r1
    2db2:	4889      	ldr	r0, [pc, #548]	; (2fd8 <init+0x7f8>)
    2db4:	4970      	ldr	r1, [pc, #448]	; (2f78 <init+0x798>)
    2db6:	f001 fa7d 	bl	42b4 <printf>
    DBGPRINTLN_CTX("CMU - LFB Clock: %.3f kHz!", (float)LFB_CLOCK_FREQ / 1000);
    2dba:	4b88      	ldr	r3, [pc, #544]	; (2fdc <init+0x7fc>)
    2dbc:	edd3 7a00 	vldr	s15, [r3]
    2dc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2dc4:	eec7 7a88 	vdiv.f32	s15, s15, s16
    2dc8:	ee17 0a90 	vmov	r0, s15
    2dcc:	f7fd fb24 	bl	418 <__aeabi_f2d>
    2dd0:	4602      	mov	r2, r0
    2dd2:	460b      	mov	r3, r1
    2dd4:	4882      	ldr	r0, [pc, #520]	; (2fe0 <init+0x800>)
    2dd6:	4968      	ldr	r1, [pc, #416]	; (2f78 <init+0x798>)
    2dd8:	f001 fa6c 	bl	42b4 <printf>
    DBGPRINTLN_CTX("CMU - LEUART0 Clock: %.3f kHz!", (float)LEUART0_CLOCK_FREQ / 1000);
    2ddc:	4b81      	ldr	r3, [pc, #516]	; (2fe4 <init+0x804>)
    2dde:	edd3 7a00 	vldr	s15, [r3]
    2de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2de6:	eec7 7a88 	vdiv.f32	s15, s15, s16
    2dea:	ee17 0a90 	vmov	r0, s15
    2dee:	f7fd fb13 	bl	418 <__aeabi_f2d>
    2df2:	4602      	mov	r2, r0
    2df4:	460b      	mov	r3, r1
    2df6:	487c      	ldr	r0, [pc, #496]	; (2fe8 <init+0x808>)
    2df8:	495f      	ldr	r1, [pc, #380]	; (2f78 <init+0x798>)
    2dfa:	f001 fa5b 	bl	42b4 <printf>
    DBGPRINTLN_CTX("CMU - LEUART1 Clock: %.3f kHz!", (float)LEUART1_CLOCK_FREQ / 1000);
    2dfe:	4b7b      	ldr	r3, [pc, #492]	; (2fec <init+0x80c>)
    2e00:	edd3 7a00 	vldr	s15, [r3]
    2e04:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2e08:	eec7 7a88 	vdiv.f32	s15, s15, s16
    2e0c:	ee17 0a90 	vmov	r0, s15
    2e10:	f7fd fb02 	bl	418 <__aeabi_f2d>
    2e14:	4602      	mov	r2, r0
    2e16:	460b      	mov	r3, r1
    2e18:	4875      	ldr	r0, [pc, #468]	; (2ff0 <init+0x810>)
    2e1a:	4957      	ldr	r1, [pc, #348]	; (2f78 <init+0x798>)
    2e1c:	f001 fa4a 	bl	42b4 <printf>
    DBGPRINTLN_CTX("CMU - SYSTICK Clock: %.3f kHz!", (float)SYSTICK_CLOCK_FREQ / 1000);
    2e20:	4b74      	ldr	r3, [pc, #464]	; (2ff4 <init+0x814>)
    2e22:	edd3 7a00 	vldr	s15, [r3]
    2e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2e2a:	eec7 7a88 	vdiv.f32	s15, s15, s16
    2e2e:	ee17 0a90 	vmov	r0, s15
    2e32:	f7fd faf1 	bl	418 <__aeabi_f2d>
    2e36:	4602      	mov	r2, r0
    2e38:	460b      	mov	r3, r1
    2e3a:	486f      	ldr	r0, [pc, #444]	; (2ff8 <init+0x818>)
    2e3c:	494e      	ldr	r1, [pc, #312]	; (2f78 <init+0x798>)
    2e3e:	f001 fa39 	bl	42b4 <printf>
    DBGPRINTLN_CTX("CMU - CSEN Clock: %.3f kHz!", (float)CSEN_CLOCK_FREQ / 1000);
    2e42:	4b6e      	ldr	r3, [pc, #440]	; (2ffc <init+0x81c>)
    2e44:	edd3 7a00 	vldr	s15, [r3]
    2e48:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2e4c:	eec7 7a88 	vdiv.f32	s15, s15, s16
    2e50:	ee17 0a90 	vmov	r0, s15
    2e54:	f7fd fae0 	bl	418 <__aeabi_f2d>
    2e58:	4602      	mov	r2, r0
    2e5a:	460b      	mov	r3, r1
    2e5c:	4868      	ldr	r0, [pc, #416]	; (3000 <init+0x820>)
    2e5e:	4946      	ldr	r1, [pc, #280]	; (2f78 <init+0x798>)
    2e60:	f001 fa28 	bl	42b4 <printf>
    DBGPRINTLN_CTX("CMU - LFC Clock: %.3f kHz!", (float)LFC_CLOCK_FREQ / 1000);
    2e64:	4b67      	ldr	r3, [pc, #412]	; (3004 <init+0x824>)
    2e66:	edd3 7a00 	vldr	s15, [r3]
    2e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2e6e:	eec7 7a88 	vdiv.f32	s15, s15, s16
    2e72:	ee17 0a90 	vmov	r0, s15
    2e76:	f7fd facf 	bl	418 <__aeabi_f2d>
    2e7a:	4602      	mov	r2, r0
    2e7c:	460b      	mov	r3, r1
    2e7e:	4862      	ldr	r0, [pc, #392]	; (3008 <init+0x828>)
    2e80:	493d      	ldr	r1, [pc, #244]	; (2f78 <init+0x798>)
    2e82:	f001 fa17 	bl	42b4 <printf>
    DBGPRINTLN_CTX("CMU - LFE Clock: %.3f kHz!", (float)LFE_CLOCK_FREQ / 1000);
    2e86:	4b61      	ldr	r3, [pc, #388]	; (300c <init+0x82c>)
    2e88:	edd3 7a00 	vldr	s15, [r3]
    2e8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2e90:	eec7 7a88 	vdiv.f32	s15, s15, s16
    2e94:	ee17 0a90 	vmov	r0, s15
    2e98:	f7fd fabe 	bl	418 <__aeabi_f2d>
    2e9c:	4602      	mov	r2, r0
    2e9e:	460b      	mov	r3, r1
    2ea0:	485b      	ldr	r0, [pc, #364]	; (3010 <init+0x830>)
    2ea2:	4935      	ldr	r1, [pc, #212]	; (2f78 <init+0x798>)
    2ea4:	f001 fa06 	bl	42b4 <printf>
    DBGPRINTLN_CTX("CMU - RTCC Clock: %.3f kHz!", (float)RTCC_CLOCK_FREQ / 1000);
    2ea8:	4b5a      	ldr	r3, [pc, #360]	; (3014 <init+0x834>)
    2eaa:	edd3 7a00 	vldr	s15, [r3]
    2eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
    2eb2:	eec7 7a88 	vdiv.f32	s15, s15, s16
    2eb6:	ee17 0a90 	vmov	r0, s15
    2eba:	f7fd faad 	bl	418 <__aeabi_f2d>
    2ebe:	4602      	mov	r2, r0
    2ec0:	460b      	mov	r3, r1
    2ec2:	4855      	ldr	r0, [pc, #340]	; (3018 <init+0x838>)
    2ec4:	492c      	ldr	r1, [pc, #176]	; (2f78 <init+0x798>)
    2ec6:	f001 f9f5 	bl	42b4 <printf>
    DBGPRINTLN_CTX("EMU - AVDD Fall Threshold: %.2f mV!", fAVDDLowThresh * 1000);
    2eca:	eddd 7a01 	vldr	s15, [sp, #4]
    2ece:	ee67 7a88 	vmul.f32	s15, s15, s16
    2ed2:	ee17 0a90 	vmov	r0, s15
    2ed6:	f7fd fa9f 	bl	418 <__aeabi_f2d>
    2eda:	4602      	mov	r2, r0
    2edc:	460b      	mov	r3, r1
    2ede:	484f      	ldr	r0, [pc, #316]	; (301c <init+0x83c>)
    2ee0:	4925      	ldr	r1, [pc, #148]	; (2f78 <init+0x798>)
    2ee2:	f001 f9e7 	bl	42b4 <printf>
    DBGPRINTLN_CTX("EMU - AVDD Rise Threshold: %.2f mV!", fAVDDHighThresh * 1000);
    2ee6:	eddd 7a00 	vldr	s15, [sp]
    2eea:	ee67 7a88 	vmul.f32	s15, s15, s16
    2eee:	ee17 0a90 	vmov	r0, s15
    2ef2:	f7fd fa91 	bl	418 <__aeabi_f2d>
    2ef6:	4602      	mov	r2, r0
    2ef8:	460b      	mov	r3, r1
    2efa:	4849      	ldr	r0, [pc, #292]	; (3020 <init+0x840>)
    2efc:	491e      	ldr	r1, [pc, #120]	; (2f78 <init+0x798>)
    2efe:	f001 f9d9 	bl	42b4 <printf>
    DBGPRINTLN_CTX("EMU - AVDD Voltage: %.2f mV", adc_get_avdd());
    2f02:	f000 fbc1 	bl	3688 <adc_get_avdd>
    2f06:	ee10 0a10 	vmov	r0, s0
    2f0a:	f7fd fa85 	bl	418 <__aeabi_f2d>
    2f0e:	4602      	mov	r2, r0
    2f10:	460b      	mov	r3, r1
    2f12:	4844      	ldr	r0, [pc, #272]	; (3024 <init+0x844>)
    2f14:	4918      	ldr	r1, [pc, #96]	; (2f78 <init+0x798>)
    2f16:	f001 f9cd 	bl	42b4 <printf>
    DBGPRINTLN_CTX("EMU - AVDD Status: %s", g_ubAVDDLow ? "LOW" : "OK");
    2f1a:	4b43      	ldr	r3, [pc, #268]	; (3028 <init+0x848>)
    2f1c:	4916      	ldr	r1, [pc, #88]	; (2f78 <init+0x798>)
    2f1e:	781a      	ldrb	r2, [r3, #0]
    2f20:	4842      	ldr	r0, [pc, #264]	; (302c <init+0x84c>)
    2f22:	2a00      	cmp	r2, #0
    2f24:	bf14      	ite	ne
    2f26:	462a      	movne	r2, r5
    2f28:	4622      	moveq	r2, r4
    2f2a:	f001 f9c3 	bl	42b4 <printf>
    DBGPRINTLN_CTX("EMU - DVDD Fall Threshold: %.2f mV!", fDVDDLowThresh * 1000);
    2f2e:	eddd 7a02 	vldr	s15, [sp, #8]
    2f32:	ee67 7a88 	vmul.f32	s15, s15, s16
    2f36:	ee17 0a90 	vmov	r0, s15
    2f3a:	f7fd fa6d 	bl	418 <__aeabi_f2d>
    2f3e:	4602      	mov	r2, r0
    2f40:	460b      	mov	r3, r1
    2f42:	483b      	ldr	r0, [pc, #236]	; (3030 <init+0x850>)
    2f44:	490c      	ldr	r1, [pc, #48]	; (2f78 <init+0x798>)
    2f46:	f001 f9b5 	bl	42b4 <printf>
    DBGPRINTLN_CTX("EMU - DVDD Rise Threshold: %.2f mV!", fDVDDHighThresh * 1000);
    2f4a:	ee69 7a88 	vmul.f32	s15, s19, s16
    2f4e:	ee17 0a90 	vmov	r0, s15
    2f52:	f7fd fa61 	bl	418 <__aeabi_f2d>
    2f56:	4602      	mov	r2, r0
    2f58:	460b      	mov	r3, r1
    2f5a:	4836      	ldr	r0, [pc, #216]	; (3034 <init+0x854>)
    2f5c:	4906      	ldr	r1, [pc, #24]	; (2f78 <init+0x798>)
    2f5e:	f001 f9a9 	bl	42b4 <printf>
    DBGPRINTLN_CTX("EMU - DVDD Voltage: %.2f mV", adc_get_dvdd());
    2f62:	f000 fbd5 	bl	3710 <adc_get_dvdd>
    2f66:	ee10 0a10 	vmov	r0, s0
    2f6a:	f7fd fa55 	bl	418 <__aeabi_f2d>
    2f6e:	4602      	mov	r2, r0
    2f70:	e062      	b.n	3038 <init+0x858>
    2f72:	bf00      	nop
    2f74:	00004d58 	.word	0x00004d58
    2f78:	000047e4 	.word	0x000047e4
    2f7c:	200000f8 	.word	0x200000f8
    2f80:	00004d7d 	.word	0x00004d7d
    2f84:	200000a0 	.word	0x200000a0
    2f88:	00004da2 	.word	0x00004da2
    2f8c:	200000b8 	.word	0x200000b8
    2f90:	00004dc6 	.word	0x00004dc6
    2f94:	200000c4 	.word	0x200000c4
    2f98:	00004deb 	.word	0x00004deb
    2f9c:	20000110 	.word	0x20000110
    2fa0:	00004e10 	.word	0x00004e10
    2fa4:	200000f0 	.word	0x200000f0
    2fa8:	00004e34 	.word	0x00004e34
    2fac:	200000a8 	.word	0x200000a8
    2fb0:	00004e58 	.word	0x00004e58
    2fb4:	20000100 	.word	0x20000100
    2fb8:	00004e7c 	.word	0x00004e7c
    2fbc:	20000104 	.word	0x20000104
    2fc0:	00004ea4 	.word	0x00004ea4
    2fc4:	20000108 	.word	0x20000108
    2fc8:	00004ec8 	.word	0x00004ec8
    2fcc:	2000009c 	.word	0x2000009c
    2fd0:	00004eec 	.word	0x00004eec
    2fd4:	200000b4 	.word	0x200000b4
    2fd8:	00004f15 	.word	0x00004f15
    2fdc:	200000bc 	.word	0x200000bc
    2fe0:	00004f3e 	.word	0x00004f3e
    2fe4:	2000010c 	.word	0x2000010c
    2fe8:	00004f62 	.word	0x00004f62
    2fec:	200000cc 	.word	0x200000cc
    2ff0:	00004f8a 	.word	0x00004f8a
    2ff4:	200000b0 	.word	0x200000b0
    2ff8:	00004fb2 	.word	0x00004fb2
    2ffc:	200000a4 	.word	0x200000a4
    3000:	00004fda 	.word	0x00004fda
    3004:	200000ec 	.word	0x200000ec
    3008:	00004fff 	.word	0x00004fff
    300c:	200000d0 	.word	0x200000d0
    3010:	00005023 	.word	0x00005023
    3014:	200000c8 	.word	0x200000c8
    3018:	00005047 	.word	0x00005047
    301c:	0000506c 	.word	0x0000506c
    3020:	00005099 	.word	0x00005099
    3024:	000050c6 	.word	0x000050c6
    3028:	20000080 	.word	0x20000080
    302c:	000050eb 	.word	0x000050eb
    3030:	0000510a 	.word	0x0000510a
    3034:	00005137 	.word	0x00005137
    3038:	460b      	mov	r3, r1
    303a:	4835      	ldr	r0, [pc, #212]	; (3110 <init+0x930>)
    303c:	4935      	ldr	r1, [pc, #212]	; (3114 <init+0x934>)
    303e:	f001 f939 	bl	42b4 <printf>
    DBGPRINTLN_CTX("EMU - DVDD Status: %s", g_ubDVDDLow ? "LOW" : "OK");
    3042:	4b35      	ldr	r3, [pc, #212]	; (3118 <init+0x938>)
    3044:	4933      	ldr	r1, [pc, #204]	; (3114 <init+0x934>)
    3046:	781a      	ldrb	r2, [r3, #0]
    3048:	4834      	ldr	r0, [pc, #208]	; (311c <init+0x93c>)
    304a:	2a00      	cmp	r2, #0
    304c:	bf14      	ite	ne
    304e:	462a      	movne	r2, r5
    3050:	4622      	moveq	r2, r4
    3052:	f001 f92f 	bl	42b4 <printf>
    DBGPRINTLN_CTX("EMU - IOVDD Fall Threshold: %.2f mV!", fIOVDDLowThresh * 1000);
    3056:	eddd 7a03 	vldr	s15, [sp, #12]
    305a:	ee67 7a88 	vmul.f32	s15, s15, s16
    305e:	ee17 0a90 	vmov	r0, s15
    3062:	f7fd f9d9 	bl	418 <__aeabi_f2d>
    3066:	4602      	mov	r2, r0
    3068:	460b      	mov	r3, r1
    306a:	482d      	ldr	r0, [pc, #180]	; (3120 <init+0x940>)
    306c:	4929      	ldr	r1, [pc, #164]	; (3114 <init+0x934>)
    306e:	f001 f921 	bl	42b4 <printf>
    DBGPRINTLN_CTX("EMU - IOVDD Rise Threshold: %.2f mV!", fIOVDDHighThresh * 1000);
    3072:	ee69 7a08 	vmul.f32	s15, s18, s16
    3076:	ee17 0a90 	vmov	r0, s15
    307a:	f7fd f9cd 	bl	418 <__aeabi_f2d>
    307e:	4602      	mov	r2, r0
    3080:	460b      	mov	r3, r1
    3082:	4828      	ldr	r0, [pc, #160]	; (3124 <init+0x944>)
    3084:	4923      	ldr	r1, [pc, #140]	; (3114 <init+0x934>)
    3086:	f001 f915 	bl	42b4 <printf>
    DBGPRINTLN_CTX("EMU - IOVDD Voltage: %.2f mV", adc_get_iovdd());
    308a:	f000 fb85 	bl	3798 <adc_get_iovdd>
    308e:	ee10 0a10 	vmov	r0, s0
    3092:	f7fd f9c1 	bl	418 <__aeabi_f2d>
    3096:	4602      	mov	r2, r0
    3098:	460b      	mov	r3, r1
    309a:	4823      	ldr	r0, [pc, #140]	; (3128 <init+0x948>)
    309c:	491d      	ldr	r1, [pc, #116]	; (3114 <init+0x934>)
    309e:	f001 f909 	bl	42b4 <printf>
    DBGPRINTLN_CTX("EMU - IOVDD Status: %s", g_ubIOVDDLow ? "LOW" : "OK");
    30a2:	4b22      	ldr	r3, [pc, #136]	; (312c <init+0x94c>)
    30a4:	491b      	ldr	r1, [pc, #108]	; (3114 <init+0x934>)
    30a6:	781a      	ldrb	r2, [r3, #0]
    30a8:	4821      	ldr	r0, [pc, #132]	; (3130 <init+0x950>)
    30aa:	2a00      	cmp	r2, #0
    30ac:	bf14      	ite	ne
    30ae:	462a      	movne	r2, r5
    30b0:	4622      	moveq	r2, r4
    30b2:	f001 f8ff 	bl	42b4 <printf>
    DBGPRINTLN_CTX("EMU - Core Voltage: %.2f mV", adc_get_corevdd());
    30b6:	f000 fbb3 	bl	3820 <adc_get_corevdd>
    30ba:	ee10 0a10 	vmov	r0, s0
    30be:	f7fd f9ab 	bl	418 <__aeabi_f2d>
    30c2:	4602      	mov	r2, r0
    30c4:	460b      	mov	r3, r1
    30c6:	481b      	ldr	r0, [pc, #108]	; (3134 <init+0x954>)
    30c8:	4912      	ldr	r1, [pc, #72]	; (3114 <init+0x934>)
            DBGPRINTLN_CTX("  Address 0x%02X ACKed!", a);
    30ca:	4d12      	ldr	r5, [pc, #72]	; (3114 <init+0x934>)
    DBGPRINTLN_CTX("EMU - Core Voltage: %.2f mV", adc_get_corevdd());
    30cc:	f001 f8f2 	bl	42b4 <printf>
    delay_ms(100);
    30d0:	2064      	movs	r0, #100	; 0x64
    30d2:	2100      	movs	r1, #0
    30d4:	f000 f9be 	bl	3454 <delay_ms>
    DBGPRINTLN_CTX("Scanning I2C bus 1...");
    30d8:	490e      	ldr	r1, [pc, #56]	; (3114 <init+0x934>)
    30da:	4817      	ldr	r0, [pc, #92]	; (3138 <init+0x958>)
    30dc:	f001 f8ea 	bl	42b4 <printf>
    30e0:	2408      	movs	r4, #8

void i2c1_init(uint8_t ubMode, uint8_t ubSCLLocation, uint8_t ubSDALocation);
uint8_t i2c1_transmit(uint8_t ubAddress, uint8_t* pubSrc, uint32_t ulCount, uint8_t ubStop);
static inline uint8_t i2c1_write(uint8_t ubAddress, uint8_t* pubSrc, uint32_t ulCount, uint8_t ubStop)
{
	return i2c1_transmit((ubAddress << 1) & ~0x01, pubSrc, ulCount, ubStop);
    30e2:	0060      	lsls	r0, r4, #1
    30e4:	2200      	movs	r2, #0
    30e6:	2301      	movs	r3, #1
    30e8:	4611      	mov	r1, r2
    30ea:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    30ee:	f000 fa01 	bl	34f4 <i2c1_transmit>
        if(i2c1_write(a, 0, 0, I2C_STOP))
    30f2:	b120      	cbz	r0, 30fe <init+0x91e>
            DBGPRINTLN_CTX("  Address 0x%02X ACKed!", a);
    30f4:	4622      	mov	r2, r4
    30f6:	4629      	mov	r1, r5
    30f8:	4630      	mov	r0, r6
    30fa:	f001 f8db 	bl	42b4 <printf>
    30fe:	3401      	adds	r4, #1
    for(uint8_t a = 0x08; a < 0x78; a++)
    3100:	2c78      	cmp	r4, #120	; 0x78
    3102:	d1ee      	bne.n	30e2 <init+0x902>
    }

    return 0;
}
    3104:	2000      	movs	r0, #0
    3106:	b00c      	add	sp, #48	; 0x30
    3108:	ecbd 8b04 	vpop	{d8-d9}
    310c:	bd70      	pop	{r4, r5, r6, pc}
    310e:	bf00      	nop
    3110:	00005164 	.word	0x00005164
    3114:	000047e4 	.word	0x000047e4
    3118:	20000082 	.word	0x20000082
    311c:	00005189 	.word	0x00005189
    3120:	000051a8 	.word	0x000051a8
    3124:	000051d6 	.word	0x000051d6
    3128:	00005204 	.word	0x00005204
    312c:	20000083 	.word	0x20000083
    3130:	0000522a 	.word	0x0000522a
    3134:	0000524a 	.word	0x0000524a
    3138:	0000526f 	.word	0x0000526f

0000313c <main>:
int main()
{
    313c:	b5f0      	push	{r4, r5, r6, r7, lr}
    313e:	b08b      	sub	sp, #44	; 0x2c
    3140:	23d0      	movs	r3, #208	; 0xd0
    3142:	f88d 301f 	strb.w	r3, [sp, #31]
}
static inline uint8_t i2c1_write_byte(uint8_t ubAddress, uint8_t ubData, uint8_t ubStop)
{
	return i2c1_transmit((ubAddress << 1) & ~0x01, &ubData, 1, ubStop);
    3146:	2201      	movs	r2, #1
    3148:	2300      	movs	r3, #0
    314a:	f10d 011f 	add.w	r1, sp, #31
    314e:	20ec      	movs	r0, #236	; 0xec
    3150:	f000 f9d0 	bl	34f4 <i2c1_transmit>
{
	return i2c1_transmit((ubAddress << 1) | 0x01, pubDst, ulCount, ubStop);
}
static inline uint8_t i2c1_read_byte(uint8_t ubAddress, uint8_t ubStop)
{
	uint8_t ubData = 0x00;
    3154:	2300      	movs	r3, #0
    3156:	f88d 3020 	strb.w	r3, [sp, #32]

	i2c1_transmit((ubAddress << 1) | 0x01, &ubData, 1, ubStop);
    315a:	2301      	movs	r3, #1
    315c:	461a      	mov	r2, r3
    315e:	a908      	add	r1, sp, #32
    3160:	20ed      	movs	r0, #237	; 0xed
    3162:	f000 f9c7 	bl	34f4 <i2c1_transmit>
    i2c1_write_byte(0x76, 0xD0, I2C_RESTART);
    DBGPRINTLN_CTX("BME ID %02X", i2c1_read_byte(0x76, I2C_STOP));
    3166:	f89d 2020 	ldrb.w	r2, [sp, #32]
    316a:	4973      	ldr	r1, [pc, #460]	; (3338 <main+0x1fc>)
    316c:	4873      	ldr	r0, [pc, #460]	; (333c <main+0x200>)

    // Internal flash test
    DBGPRINTLN_CTX("Initial calibration dump:");
    
    for(init_calib_t *psCalibTbl = g_psInitCalibrationTable; psCalibTbl->pulRegister; psCalibTbl++)
        DBGPRINTLN_CTX("  0x%08X -> 0x%08X", psCalibTbl->ulInitialCalibration, psCalibTbl->pulRegister);
    316e:	4e72      	ldr	r6, [pc, #456]	; (3338 <main+0x1fc>)
    3170:	4f73      	ldr	r7, [pc, #460]	; (3340 <main+0x204>)
    DBGPRINTLN_CTX("BME ID %02X", i2c1_read_byte(0x76, I2C_STOP));
    3172:	f001 f89f 	bl	42b4 <printf>
    DBGPRINTLN_CTX("Initial calibration dump:");
    3176:	4970      	ldr	r1, [pc, #448]	; (3338 <main+0x1fc>)
    3178:	4872      	ldr	r0, [pc, #456]	; (3344 <main+0x208>)
    317a:	f001 f89b 	bl	42b4 <printf>
    for(init_calib_t *psCalibTbl = g_psInitCalibrationTable; psCalibTbl->pulRegister; psCalibTbl++)
    317e:	4b72      	ldr	r3, [pc, #456]	; (3348 <main+0x20c>)
    3180:	681c      	ldr	r4, [r3, #0]
    3182:	6825      	ldr	r5, [r4, #0]
    3184:	2d00      	cmp	r5, #0
    3186:	f040 80ce 	bne.w	3326 <main+0x1ea>
    DBGPRINTLN_CTX("0x000FFFFC: %08X", *(volatile uint32_t *)0x000FFFFC);
    DBGPRINTLN_CTX("0x00100000: %08X", *(volatile uint32_t *)0x00100000);
    */

    // QSPI
    DBGPRINTLN_CTX("Flash Part ID: %06X", qspi_flash_read_jedec_id());
    318a:	f7fe febe 	bl	1f0a <qspi_flash_read_jedec_id>
    318e:	496a      	ldr	r1, [pc, #424]	; (3338 <main+0x1fc>)
    {
        GPIO->P[0].DOUT ^= BIT(0);
        
        delay_ms(500);
        
        DBGPRINTLN_CTX("ADC Temp: %.2f", adc_get_temperature());
    3190:	4c69      	ldr	r4, [pc, #420]	; (3338 <main+0x1fc>)
    3192:	4f6e      	ldr	r7, [pc, #440]	; (334c <main+0x210>)
    DBGPRINTLN_CTX("Flash Part ID: %06X", qspi_flash_read_jedec_id());
    3194:	4602      	mov	r2, r0
    3196:	486e      	ldr	r0, [pc, #440]	; (3350 <main+0x214>)
    3198:	f001 f88c 	bl	42b4 <printf>
    qspi_flash_read_security(0x0000, ubFlashUID, 8);
    319c:	4628      	mov	r0, r5
    319e:	2208      	movs	r2, #8
    31a0:	a908      	add	r1, sp, #32
    31a2:	f7fe fed2 	bl	1f4a <qspi_flash_read_security>
    DBGPRINTLN_CTX("Flash ID: %02X%02X%02X%02X%02X%02X%02X%02X", ubFlashUID[0], ubFlashUID[1], ubFlashUID[2], ubFlashUID[3], ubFlashUID[4], ubFlashUID[5], ubFlashUID[6], ubFlashUID[7]);
    31a6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    31aa:	9305      	str	r3, [sp, #20]
    31ac:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    31b0:	9304      	str	r3, [sp, #16]
    31b2:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    31b6:	9303      	str	r3, [sp, #12]
    31b8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    31bc:	9302      	str	r3, [sp, #8]
    31be:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    31c2:	9301      	str	r3, [sp, #4]
    31c4:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    31c8:	9300      	str	r3, [sp, #0]
    31ca:	f89d 2020 	ldrb.w	r2, [sp, #32]
    31ce:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    31d2:	4959      	ldr	r1, [pc, #356]	; (3338 <main+0x1fc>)
    31d4:	485f      	ldr	r0, [pc, #380]	; (3354 <main+0x218>)
        GPIO->P[0].DOUT ^= BIT(0);
    31d6:	4d60      	ldr	r5, [pc, #384]	; (3358 <main+0x21c>)
    DBGPRINTLN_CTX("Flash ID: %02X%02X%02X%02X%02X%02X%02X%02X", ubFlashUID[0], ubFlashUID[1], ubFlashUID[2], ubFlashUID[3], ubFlashUID[4], ubFlashUID[5], ubFlashUID[6], ubFlashUID[7]);
    31d8:	f001 f86c 	bl	42b4 <printf>
    DBGPRINTLN_CTX("QSPI RD: %02X", *(volatile uint8_t *)0xC0000000);
    31dc:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    31e0:	4955      	ldr	r1, [pc, #340]	; (3338 <main+0x1fc>)
    31e2:	781a      	ldrb	r2, [r3, #0]
    31e4:	485d      	ldr	r0, [pc, #372]	; (335c <main+0x220>)
    31e6:	f001 f865 	bl	42b4 <printf>
    DBGPRINTLN_CTX("QSPI RD: %02X", *(volatile uint8_t *)0xC0000001);
    31ea:	4b5d      	ldr	r3, [pc, #372]	; (3360 <main+0x224>)
    31ec:	4952      	ldr	r1, [pc, #328]	; (3338 <main+0x1fc>)
    31ee:	781a      	ldrb	r2, [r3, #0]
    31f0:	485a      	ldr	r0, [pc, #360]	; (335c <main+0x220>)
    31f2:	f001 f85f 	bl	42b4 <printf>
    DBGPRINTLN_CTX("QSPI RD: %02X", *(volatile uint8_t *)0xC0000002);
    31f6:	4b5b      	ldr	r3, [pc, #364]	; (3364 <main+0x228>)
    31f8:	494f      	ldr	r1, [pc, #316]	; (3338 <main+0x1fc>)
    31fa:	781a      	ldrb	r2, [r3, #0]
    31fc:	4857      	ldr	r0, [pc, #348]	; (335c <main+0x220>)
    31fe:	f001 f859 	bl	42b4 <printf>
    DBGPRINTLN_CTX("QSPI RD: %02X", *(volatile uint8_t *)0xC0000003);
    3202:	4b59      	ldr	r3, [pc, #356]	; (3368 <main+0x22c>)
    3204:	494c      	ldr	r1, [pc, #304]	; (3338 <main+0x1fc>)
    3206:	781a      	ldrb	r2, [r3, #0]
    3208:	4854      	ldr	r0, [pc, #336]	; (335c <main+0x220>)
    320a:	f001 f853 	bl	42b4 <printf>
    DBGPRINTLN_CTX("Boot RD: %02X", *(volatile uint8_t *)0x0FE10000);
    320e:	4b57      	ldr	r3, [pc, #348]	; (336c <main+0x230>)
    3210:	4949      	ldr	r1, [pc, #292]	; (3338 <main+0x1fc>)
    3212:	781a      	ldrb	r2, [r3, #0]
    3214:	4856      	ldr	r0, [pc, #344]	; (3370 <main+0x234>)
    3216:	f001 f84d 	bl	42b4 <printf>
    DBGPRINTLN_CTX("Data RD: %02X", *(volatile uint8_t *)0x0FE00000);
    321a:	f04f 637e 	mov.w	r3, #266338304	; 0xfe00000
    321e:	4946      	ldr	r1, [pc, #280]	; (3338 <main+0x1fc>)
    3220:	781a      	ldrb	r2, [r3, #0]
    3222:	4854      	ldr	r0, [pc, #336]	; (3374 <main+0x238>)
    3224:	f001 f846 	bl	42b4 <printf>
        GPIO->P[0].DOUT ^= BIT(0);
    3228:	68eb      	ldr	r3, [r5, #12]
    322a:	f083 0301 	eor.w	r3, r3, #1
    322e:	60eb      	str	r3, [r5, #12]
        delay_ms(500);
    3230:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    3234:	2100      	movs	r1, #0
    3236:	f000 f90d 	bl	3454 <delay_ms>
        DBGPRINTLN_CTX("ADC Temp: %.2f", adc_get_temperature());
    323a:	f000 fb35 	bl	38a8 <adc_get_temperature>
    323e:	ee10 0a10 	vmov	r0, s0
    3242:	f7fd f8e9 	bl	418 <__aeabi_f2d>
    3246:	4602      	mov	r2, r0
    3248:	460b      	mov	r3, r1
    324a:	4638      	mov	r0, r7
    324c:	4621      	mov	r1, r4
    324e:	f001 f831 	bl	42b4 <printf>
        DBGPRINTLN_CTX("EMU Temp: %.2f", emu_get_temperature());
    3252:	f7fe ffc3 	bl	21dc <emu_get_temperature>
    3256:	ee10 0a10 	vmov	r0, s0
    325a:	f7fd f8dd 	bl	418 <__aeabi_f2d>
    325e:	4602      	mov	r2, r0
    3260:	460b      	mov	r3, r1
    3262:	4845      	ldr	r0, [pc, #276]	; (3378 <main+0x23c>)
    3264:	4621      	mov	r1, r4
    3266:	f001 f825 	bl	42b4 <printf>

        DBGPRINTLN_CTX("HFXO Startup: %.2f pF", cmu_hfxo_get_startup_cap());
    326a:	f7fe f941 	bl	14f0 <cmu_hfxo_get_startup_cap>
    326e:	ee10 0a10 	vmov	r0, s0
    3272:	f7fd f8d1 	bl	418 <__aeabi_f2d>
    3276:	4602      	mov	r2, r0
    3278:	460b      	mov	r3, r1
    327a:	4840      	ldr	r0, [pc, #256]	; (337c <main+0x240>)
    327c:	4621      	mov	r1, r4
    327e:	f001 f819 	bl	42b4 <printf>
        DBGPRINTLN_CTX("HFXO Startup: %.2f uA", cmu_hfxo_get_startup_current());
    3282:	f7fe f923 	bl	14cc <cmu_hfxo_get_startup_current>
    3286:	ee10 0a10 	vmov	r0, s0
    328a:	f7fd f8c5 	bl	418 <__aeabi_f2d>
    328e:	4602      	mov	r2, r0
    3290:	460b      	mov	r3, r1
    3292:	483b      	ldr	r0, [pc, #236]	; (3380 <main+0x244>)
    3294:	4621      	mov	r1, r4
    3296:	f001 f80d 	bl	42b4 <printf>
        DBGPRINTLN_CTX("HFXO Steady: %.2f pF", cmu_hfxo_get_steady_cap());
    329a:	f7fe f967 	bl	156c <cmu_hfxo_get_steady_cap>
    329e:	ee10 0a10 	vmov	r0, s0
    32a2:	f7fd f8b9 	bl	418 <__aeabi_f2d>
    32a6:	4602      	mov	r2, r0
    32a8:	460b      	mov	r3, r1
    32aa:	4836      	ldr	r0, [pc, #216]	; (3384 <main+0x248>)
    32ac:	4621      	mov	r1, r4
    32ae:	f001 f801 	bl	42b4 <printf>
        DBGPRINTLN_CTX("HFXO Steady: %.2f uA", cmu_hfxo_get_steady_current());
    32b2:	f7fe f949 	bl	1548 <cmu_hfxo_get_steady_current>
    32b6:	ee10 0a10 	vmov	r0, s0
    32ba:	f7fd f8ad 	bl	418 <__aeabi_f2d>
    32be:	460b      	mov	r3, r1
    32c0:	4602      	mov	r2, r0
    32c2:	4621      	mov	r1, r4
    32c4:	4830      	ldr	r0, [pc, #192]	; (3388 <main+0x24c>)
    32c6:	f000 fff5 	bl	42b4 <printf>
        DBGPRINTLN_CTX("HFXO PMA [%03X]: %.2f uA", cmu_hfxo_get_pma_ibtrim(), cmu_hfxo_get_pma_current());
    32ca:	f7fe f99d 	bl	1608 <cmu_hfxo_get_pma_ibtrim>
    32ce:	4606      	mov	r6, r0
    32d0:	f7fe f9a8 	bl	1624 <cmu_hfxo_get_pma_current>
    32d4:	ee10 0a10 	vmov	r0, s0
    32d8:	f7fd f89e 	bl	418 <__aeabi_f2d>
    32dc:	4632      	mov	r2, r6
    32de:	e9cd 0100 	strd	r0, r1, [sp]
    32e2:	4621      	mov	r1, r4
    32e4:	4829      	ldr	r0, [pc, #164]	; (338c <main+0x250>)
    32e6:	f000 ffe5 	bl	42b4 <printf>
        DBGPRINTLN_CTX("HFXO PDA [%03X]: %.2f uA", cmu_hfxo_get_pda_ibtrim(1), cmu_hfxo_get_pda_current(0));
    32ea:	2001      	movs	r0, #1
    32ec:	f7fe f954 	bl	1598 <cmu_hfxo_get_pda_ibtrim>
    32f0:	4606      	mov	r6, r0
    32f2:	2000      	movs	r0, #0
    32f4:	f7fe f966 	bl	15c4 <cmu_hfxo_get_pda_current>
    32f8:	ee10 0a10 	vmov	r0, s0
    32fc:	f7fd f88c 	bl	418 <__aeabi_f2d>
    3300:	4632      	mov	r2, r6
    3302:	e9cd 0100 	strd	r0, r1, [sp]
    3306:	4621      	mov	r1, r4
    3308:	4821      	ldr	r0, [pc, #132]	; (3390 <main+0x254>)
    330a:	f000 ffd3 	bl	42b4 <printf>
       
        //sleep();

        DBGPRINTLN_CTX("RTCC Time: %lu", rtcc_get_time());
    330e:	f000 f877 	bl	3400 <rtcc_get_time>
    3312:	4621      	mov	r1, r4
    3314:	4602      	mov	r2, r0
    3316:	481f      	ldr	r0, [pc, #124]	; (3394 <main+0x258>)
    3318:	f000 ffcc 	bl	42b4 <printf>

        DBGPRINTLN_CTX("Big fag does not need debug uart anymore.");
    331c:	4621      	mov	r1, r4
    331e:	481e      	ldr	r0, [pc, #120]	; (3398 <main+0x25c>)
    3320:	f000 ffc8 	bl	42b4 <printf>
    3324:	e780      	b.n	3228 <main+0xec>
        DBGPRINTLN_CTX("  0x%08X -> 0x%08X", psCalibTbl->ulInitialCalibration, psCalibTbl->pulRegister);
    3326:	6862      	ldr	r2, [r4, #4]
    3328:	462b      	mov	r3, r5
    332a:	4631      	mov	r1, r6
    332c:	4638      	mov	r0, r7
    332e:	f000 ffc1 	bl	42b4 <printf>
    for(init_calib_t *psCalibTbl = g_psInitCalibrationTable; psCalibTbl->pulRegister; psCalibTbl++)
    3332:	3408      	adds	r4, #8
    3334:	e725      	b.n	3182 <main+0x46>
    3336:	bf00      	nop
    3338:	000047e9 	.word	0x000047e9
    333c:	000052af 	.word	0x000052af
    3340:	000052e7 	.word	0x000052e7
    3344:	000052c4 	.word	0x000052c4
    3348:	20000014 	.word	0x20000014
    334c:	00005399 	.word	0x00005399
    3350:	00005303 	.word	0x00005303
    3354:	00005320 	.word	0x00005320
    3358:	40088000 	.word	0x40088000
    335c:	00005354 	.word	0x00005354
    3360:	c0000001 	.word	0xc0000001
    3364:	c0000002 	.word	0xc0000002
    3368:	c0000003 	.word	0xc0000003
    336c:	0fe10000 	.word	0x0fe10000
    3370:	0000536b 	.word	0x0000536b
    3374:	00005382 	.word	0x00005382
    3378:	000053b1 	.word	0x000053b1
    337c:	000053c9 	.word	0x000053c9
    3380:	000053e8 	.word	0x000053e8
    3384:	00005407 	.word	0x00005407
    3388:	00005425 	.word	0x00005425
    338c:	00005443 	.word	0x00005443
    3390:	00005465 	.word	0x00005465
    3394:	00005487 	.word	0x00005487
    3398:	0000549f 	.word	0x0000549f

0000339c <rtcc_init>:
#include "rtcc.h"

void rtcc_init()
{
    339c:	b508      	push	{r3, lr}
    CMU->HFBUSCLKEN0 |= CMU_HFBUSCLKEN0_LE;
    339e:	4b16      	ldr	r3, [pc, #88]	; (33f8 <rtcc_init+0x5c>)
    33a0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
    33a4:	f042 0201 	orr.w	r2, r2, #1
    33a8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

    CMU->LFEPRESC0 = (CMU->LFEPRESC0 & ~_CMU_LFEPRESC0_RTCC_MASK) | CMU_LFEPRESC0_RTCC_DIV1;
    33ac:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    33b0:	f022 0203 	bic.w	r2, r2, #3
    33b4:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    CMU->LFECLKEN0 |= CMU_LFECLKEN0_RTCC;
    33b8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    33bc:	f042 0201 	orr.w	r2, r2, #1
    33c0:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

    cmu_update_clocks();
    33c4:	f7fd fce4 	bl	d90 <cmu_update_clocks>

    RTCC->CTRL = RTCC_CTRL_CNTMODE_NORMAL | RTCC_CTRL_OSCFDETEN | RTCC_CTRL_CNTTICK_CCV0MATCH | RTCC_CTRL_PRECCV0TOP | RTCC_CTRL_DEBUGRUN;
    33c8:	4b0c      	ldr	r3, [pc, #48]	; (33fc <rtcc_init+0x60>)
    33ca:	f249 0214 	movw	r2, #36884	; 0x9014
    33ce:	601a      	str	r2, [r3, #0]
    RTCC->PRECNT = 0;
    33d0:	2200      	movs	r2, #0
    33d2:	605a      	str	r2, [r3, #4]
    RTCC->CNT = 0;
    33d4:	609a      	str	r2, [r3, #8]

    RTCC->CC[0].CCV = 999; // Prescaler RTCC_CLOCK_FREQ / (X + 1)
    33d6:	f240 32e7 	movw	r2, #999	; 0x3e7
    33da:	645a      	str	r2, [r3, #68]	; 0x44

    RTCC->CC[1].CTRL = RTCC_CC_CTRL_COMPBASE_CNT | RTCC_CC_CTRL_MODE_OUTPUTCOMPARE;
    33dc:	2202      	movs	r2, #2
    33de:	651a      	str	r2, [r3, #80]	; 0x50

    RTCC->IFC = _RTCC_IFC_MASK;
    33e0:	f240 72ff 	movw	r2, #2047	; 0x7ff
    33e4:	621a      	str	r2, [r3, #32]
    RTCC->IEN |= RTCC_IEN_CC1;
    33e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    33e8:	f042 0204 	orr.w	r2, r2, #4
    33ec:	625a      	str	r2, [r3, #36]	; 0x24

    RTCC->CTRL |= RTCC_CTRL_ENABLE;
    33ee:	681a      	ldr	r2, [r3, #0]
    33f0:	f042 0201 	orr.w	r2, r2, #1
    33f4:	601a      	str	r2, [r3, #0]
}
    33f6:	bd08      	pop	{r3, pc}
    33f8:	400e4000 	.word	0x400e4000
    33fc:	40062000 	.word	0x40062000

00003400 <rtcc_get_time>:
uint32_t rtcc_get_time()
{
    return RTCC->CNT;
    3400:	4b01      	ldr	r3, [pc, #4]	; (3408 <rtcc_get_time+0x8>)
    3402:	6898      	ldr	r0, [r3, #8]
}
    3404:	4770      	bx	lr
    3406:	bf00      	nop
    3408:	40062000 	.word	0x40062000

0000340c <_systick_isr>:

volatile uint64_t g_ullSystemTick = 0;

void _systick_isr()
{
    g_ullSystemTick++;
    340c:	4904      	ldr	r1, [pc, #16]	; (3420 <_systick_isr+0x14>)
{
    340e:	b530      	push	{r4, r5, lr}
    g_ullSystemTick++;
    3410:	e9d1 2300 	ldrd	r2, r3, [r1]
    3414:	1c54      	adds	r4, r2, #1
    3416:	f143 0500 	adc.w	r5, r3, #0
    341a:	e9c1 4500 	strd	r4, r5, [r1]
}
    341e:	bd30      	pop	{r4, r5, pc}
    3420:	20000088 	.word	0x20000088

00003424 <systick_init>:
void systick_init()
{
    SysTick->LOAD = (HFCORE_CLOCK_FREQ / 1000) - 1; // TODO: Change this
    3424:	4b08      	ldr	r3, [pc, #32]	; (3448 <systick_init+0x24>)
    3426:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    342a:	681b      	ldr	r3, [r3, #0]
    342c:	fbb3 f3f2 	udiv	r3, r3, r2
    3430:	4a06      	ldr	r2, [pc, #24]	; (344c <systick_init+0x28>)
    3432:	3b01      	subs	r3, #1
    3434:	6053      	str	r3, [r2, #4]
    SysTick->VAL = 0;
    3436:	2300      	movs	r3, #0
    3438:	6093      	str	r3, [r2, #8]
    SysTick->CTRL = SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_CLKSOURCE_Msk;
    343a:	2307      	movs	r3, #7
    343c:	6013      	str	r3, [r2, #0]

    SCB->SHP[11] = 7 << (8 - __NVIC_PRIO_BITS); // Set priority 3,1 (min)
    343e:	4b04      	ldr	r3, [pc, #16]	; (3450 <systick_init+0x2c>)
    3440:	22e0      	movs	r2, #224	; 0xe0
    3442:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
}
    3446:	4770      	bx	lr
    3448:	200000c0 	.word	0x200000c0
    344c:	e000e010 	.word	0xe000e010
    3450:	e000ed00 	.word	0xe000ed00

00003454 <delay_ms>:
void delay_ms(uint64_t ullTicks)
{
    uint64_t ullStartTick = g_ullSystemTick;
    3454:	4b08      	ldr	r3, [pc, #32]	; (3478 <delay_ms+0x24>)
{
    3456:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    uint64_t ullStartTick = g_ullSystemTick;
    345a:	e9d3 4500 	ldrd	r4, r5, [r3]

    while(g_ullSystemTick - ullStartTick < ullTicks);
    345e:	e9d3 8900 	ldrd	r8, r9, [r3]
    3462:	ebb8 0604 	subs.w	r6, r8, r4
    3466:	eb69 0705 	sbc.w	r7, r9, r5
    346a:	428f      	cmp	r7, r1
    346c:	bf08      	it	eq
    346e:	4286      	cmpeq	r6, r0
    3470:	d3f5      	bcc.n	345e <delay_ms+0xa>
}
    3472:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3476:	bf00      	nop
    3478:	20000088 	.word	0x20000088

0000347c <i2c1_init>:
}


void i2c1_init(uint8_t ubMode, uint8_t ubSCLLocation, uint8_t ubSDALocation)
{
    if(ubSCLLocation > AFCHANLOC_MAX)
    347c:	2908      	cmp	r1, #8
{
    347e:	b510      	push	{r4, lr}
    if(ubSCLLocation > AFCHANLOC_MAX)
    3480:	d823      	bhi.n	34ca <i2c1_init+0x4e>
        return;

    if(ubSDALocation > AFCHANLOC_MAX)
    3482:	2a08      	cmp	r2, #8
    3484:	d821      	bhi.n	34ca <i2c1_init+0x4e>
        return;

	CMU->HFPERCLKEN0 |= CMU_HFPERCLKEN0_I2C1;
    3486:	4c16      	ldr	r4, [pc, #88]	; (34e0 <i2c1_init+0x64>)
    3488:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
    348c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    3490:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0

    I2C1->CTRL = I2C_CTRL_CLHR_STANDARD | I2C_CTRL_TXBIL_EMPTY;
    3494:	4b13      	ldr	r3, [pc, #76]	; (34e4 <i2c1_init+0x68>)
    3496:	2400      	movs	r4, #0
    3498:	601c      	str	r4, [r3, #0]
    I2C1->ROUTEPEN = I2C_ROUTEPEN_SCLPEN | I2C_ROUTEPEN_SDAPEN;
    I2C1->ROUTELOC0 = ((uint32_t)ubSCLLocation << _I2C_ROUTELOC0_SCLLOC_SHIFT) | ((uint32_t)ubSDALocation << _I2C_ROUTELOC0_SDALOC_SHIFT);
    349a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    I2C1->ROUTEPEN = I2C_ROUTEPEN_SCLPEN | I2C_ROUTEPEN_SDAPEN;
    349e:	2403      	movs	r4, #3
    34a0:	645c      	str	r4, [r3, #68]	; 0x44
    I2C1->ROUTELOC0 = ((uint32_t)ubSCLLocation << _I2C_ROUTELOC0_SCLLOC_SHIFT) | ((uint32_t)ubSDALocation << _I2C_ROUTELOC0_SDALOC_SHIFT);
    34a2:	649a      	str	r2, [r3, #72]	; 0x48

    if(ubMode == I2C_NORMAL)
    34a4:	b990      	cbnz	r0, 34cc <i2c1_init+0x50>
        I2C1->CLKDIV = (((HFPERC_CLOCK_FREQ / 100000) - 8) / 8) - 1;
    34a6:	4a10      	ldr	r2, [pc, #64]	; (34e8 <i2c1_init+0x6c>)
    34a8:	4910      	ldr	r1, [pc, #64]	; (34ec <i2c1_init+0x70>)
    34aa:	6812      	ldr	r2, [r2, #0]
    34ac:	fbb2 f2f1 	udiv	r2, r2, r1
    34b0:	3a08      	subs	r2, #8
    34b2:	40e2      	lsrs	r2, r4
    else if(ubMode == I2C_FAST)
        I2C1->CLKDIV = (((HFPERC_CLOCK_FREQ / 400000) - 8) / 8) - 1;
    34b4:	3a01      	subs	r2, #1
    34b6:	611a      	str	r2, [r3, #16]

    I2C1->CTRL |= I2C_CTRL_EN;
    34b8:	681a      	ldr	r2, [r3, #0]
    34ba:	f042 0201 	orr.w	r2, r2, #1
    34be:	601a      	str	r2, [r3, #0]
    I2C1->CMD = I2C_CMD_ABORT;
    34c0:	2220      	movs	r2, #32
    34c2:	605a      	str	r2, [r3, #4]

    while(I2C1->STATE & I2C_STATE_BUSY);
    34c4:	689a      	ldr	r2, [r3, #8]
    34c6:	07d2      	lsls	r2, r2, #31
    34c8:	d4fc      	bmi.n	34c4 <i2c1_init+0x48>
}
    34ca:	bd10      	pop	{r4, pc}
    else if(ubMode == I2C_FAST)
    34cc:	2801      	cmp	r0, #1
    34ce:	d1f3      	bne.n	34b8 <i2c1_init+0x3c>
        I2C1->CLKDIV = (((HFPERC_CLOCK_FREQ / 400000) - 8) / 8) - 1;
    34d0:	4a05      	ldr	r2, [pc, #20]	; (34e8 <i2c1_init+0x6c>)
    34d2:	4907      	ldr	r1, [pc, #28]	; (34f0 <i2c1_init+0x74>)
    34d4:	6812      	ldr	r2, [r2, #0]
    34d6:	fbb2 f2f1 	udiv	r2, r2, r1
    34da:	3a08      	subs	r2, #8
    34dc:	08d2      	lsrs	r2, r2, #3
    34de:	e7e9      	b.n	34b4 <i2c1_init+0x38>
    34e0:	400e4000 	.word	0x400e4000
    34e4:	40089400 	.word	0x40089400
    34e8:	200000e0 	.word	0x200000e0
    34ec:	000186a0 	.word	0x000186a0
    34f0:	00061a80 	.word	0x00061a80

000034f4 <i2c1_transmit>:
uint8_t i2c1_transmit(uint8_t ubAddress, uint8_t* pubSrc, uint32_t ulCount, uint8_t ubStop)
{
    34f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    while((I2C1->STATE & (I2C_STATE_BUSHOLD | I2C_STATE_BUSY)) == I2C_STATE_BUSY)
    34f8:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 359c <i2c1_transmit+0xa8>
{
    34fc:	4607      	mov	r7, r0
    34fe:	460e      	mov	r6, r1
    3500:	4615      	mov	r5, r2
    3502:	4698      	mov	r8, r3
    3504:	464c      	mov	r4, r9
    while((I2C1->STATE & (I2C_STATE_BUSHOLD | I2C_STATE_BUSY)) == I2C_STATE_BUSY)
    3506:	f8d9 3008 	ldr.w	r3, [r9, #8]
    350a:	f003 0311 	and.w	r3, r3, #17
    350e:	2b01      	cmp	r3, #1
    3510:	d015      	beq.n	353e <i2c1_transmit+0x4a>
        delay_ms(1);

    I2C1->CMD = I2C_CMD_START;
    3512:	2301      	movs	r3, #1
    3514:	f8c9 3004 	str.w	r3, [r9, #4]

    while((I2C1->STATE & 0xF3) != 0x53);
    3518:	68a3      	ldr	r3, [r4, #8]
    351a:	f003 03f3 	and.w	r3, r3, #243	; 0xf3
    351e:	2b53      	cmp	r3, #83	; 0x53
    3520:	d1fa      	bne.n	3518 <i2c1_transmit+0x24>

    I2C1->TXDATA = ubAddress;
    3522:	62e7      	str	r7, [r4, #44]	; 0x2c

    while((I2C1->STATE & 0xD3) != 0x93);
    3524:	68a3      	ldr	r3, [r4, #8]
    3526:	f003 03d3 	and.w	r3, r3, #211	; 0xd3
    352a:	2b93      	cmp	r3, #147	; 0x93
    352c:	d1fa      	bne.n	3524 <i2c1_transmit+0x30>

    if(I2C1->STATE & I2C_STATE_NACKED)
    352e:	68a3      	ldr	r3, [r4, #8]
    3530:	0719      	lsls	r1, r3, #28
    3532:	d509      	bpl.n	3548 <i2c1_transmit+0x54>

                while((I2C1->STATE & 0xF7) != 0xD7);

                if(I2C1->STATE & I2C_STATE_NACKED)
                {
                    I2C1->CMD = I2C_CMD_STOP;
    3534:	2302      	movs	r3, #2
    3536:	6063      	str	r3, [r4, #4]

                    return 0;
    3538:	2000      	movs	r0, #0

    if(ubStop)
        I2C1->CMD = I2C_CMD_STOP;

	return 1;
}
    353a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        delay_ms(1);
    353e:	2001      	movs	r0, #1
    3540:	2100      	movs	r1, #0
    3542:	f7ff ff87 	bl	3454 <delay_ms>
    3546:	e7de      	b.n	3506 <i2c1_transmit+0x12>
	if(ulCount)
    3548:	b195      	cbz	r5, 3570 <i2c1_transmit+0x7c>
			if (!(ubAddress & 1)) // Write
    354a:	f007 0701 	and.w	r7, r7, #1
                    I2C1->CMD = I2C_CMD_NACK;
    354e:	2308      	movs	r3, #8
                    I2C1->CMD = I2C_CMD_ACK;
    3550:	2104      	movs	r1, #4
			if (!(ubAddress & 1)) // Write
    3552:	3601      	adds	r6, #1
    3554:	b98f      	cbnz	r7, 357a <i2c1_transmit+0x86>
				I2C1->TXDATA = *(pubSrc++);
    3556:	f816 2c01 	ldrb.w	r2, [r6, #-1]
    355a:	62e2      	str	r2, [r4, #44]	; 0x2c
                while((I2C1->STATE & 0xF7) != 0xD7);
    355c:	68a2      	ldr	r2, [r4, #8]
    355e:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
    3562:	2ad7      	cmp	r2, #215	; 0xd7
    3564:	d1fa      	bne.n	355c <i2c1_transmit+0x68>
                if(I2C1->STATE & I2C_STATE_NACKED)
    3566:	68a2      	ldr	r2, [r4, #8]
    3568:	0712      	lsls	r2, r2, #28
    356a:	d4e3      	bmi.n	3534 <i2c1_transmit+0x40>
		} while(--ulCount);
    356c:	3d01      	subs	r5, #1
    356e:	d1f0      	bne.n	3552 <i2c1_transmit+0x5e>
    if(ubStop)
    3570:	f1b8 0f00 	cmp.w	r8, #0
    3574:	d10e      	bne.n	3594 <i2c1_transmit+0xa0>
	return 1;
    3576:	2001      	movs	r0, #1
    3578:	e7df      	b.n	353a <i2c1_transmit+0x46>
                while((I2C1->STATE & 0xF3) != 0xB3);
    357a:	68a2      	ldr	r2, [r4, #8]
    357c:	f002 02f3 	and.w	r2, r2, #243	; 0xf3
    3580:	2ab3      	cmp	r2, #179	; 0xb3
    3582:	d1fa      	bne.n	357a <i2c1_transmit+0x86>
				*(pubSrc++) = I2C1->RXDATA;
    3584:	69e2      	ldr	r2, [r4, #28]
    3586:	f806 2c01 	strb.w	r2, [r6, #-1]
				if (ulCount > 1)
    358a:	2d01      	cmp	r5, #1
                    I2C1->CMD = I2C_CMD_ACK;
    358c:	bf8c      	ite	hi
    358e:	6061      	strhi	r1, [r4, #4]
                    I2C1->CMD = I2C_CMD_NACK;
    3590:	6063      	strls	r3, [r4, #4]
    3592:	e7eb      	b.n	356c <i2c1_transmit+0x78>
        I2C1->CMD = I2C_CMD_STOP;
    3594:	2302      	movs	r3, #2
    3596:	6063      	str	r3, [r4, #4]
    3598:	e7ed      	b.n	3576 <i2c1_transmit+0x82>
    359a:	bf00      	nop
    359c:	40089400 	.word	0x40089400

000035a0 <_default_isr>:
extern uint32_t _end;


void _default_isr()
{
    while(1);
    35a0:	e7fe      	b.n	35a0 <_default_isr>

000035a2 <__libc_init_array>:
}

void __attribute__ ((weak)) __libc_init_array()
{

}
    35a2:	4770      	bx	lr

000035a4 <_reset_isr>:
extern int main();

#define DEFAULT_ISR "_default_isr"

void _reset_isr()
{
    35a4:	b508      	push	{r3, lr}
    uint32_t *src, *dst;

    src = &_siiram0;
    35a6:	4a1d      	ldr	r2, [pc, #116]	; (361c <_reset_isr+0x78>)
    35a8:	4b1d      	ldr	r3, [pc, #116]	; (3620 <_reset_isr+0x7c>)
    dst = &_siram0;

    while (dst < &_eiram0) // Copy RAM code
    35aa:	491e      	ldr	r1, [pc, #120]	; (3624 <_reset_isr+0x80>)
    35ac:	428b      	cmp	r3, r1
    35ae:	d327      	bcc.n	3600 <_reset_isr+0x5c>
    35b0:	4b1d      	ldr	r3, [pc, #116]	; (3628 <_reset_isr+0x84>)
        *(dst++) = *(src++);

    src = &_sidata;
    35b2:	4a1e      	ldr	r2, [pc, #120]	; (362c <_reset_isr+0x88>)
    dst = &_sdata;

    while (dst < &_edata) // Copy data
    35b4:	491e      	ldr	r1, [pc, #120]	; (3630 <_reset_isr+0x8c>)
    35b6:	428b      	cmp	r3, r1
    35b8:	d327      	bcc.n	360a <_reset_isr+0x66>
        *(dst++) = *(src++);

    src = 0;
    dst = &_sbss;
    35ba:	4b1e      	ldr	r3, [pc, #120]	; (3634 <_reset_isr+0x90>)

    while (dst < &_ebss) // Zero BSS
    35bc:	4a1e      	ldr	r2, [pc, #120]	; (3638 <_reset_isr+0x94>)
        *(dst++) = 0;
    35be:	2100      	movs	r1, #0
    while (dst < &_ebss) // Zero BSS
    35c0:	4293      	cmp	r3, r2
    35c2:	d327      	bcc.n	3614 <_reset_isr+0x70>

    __libc_init_array();
    35c4:	f7ff ffed 	bl	35a2 <__libc_init_array>

    SCB->VTOR = (uint32_t)&_svect; // ISR Vectors offset
    35c8:	4b1c      	ldr	r3, [pc, #112]	; (363c <_reset_isr+0x98>)
    35ca:	4a1d      	ldr	r2, [pc, #116]	; (3640 <_reset_isr+0x9c>)
    35cc:	609a      	str	r2, [r3, #8]
    SCB->AIRCR = 0x05FA0000 | (5 << 8); // Interrupt priority - 2 bits Group, 1 bit Sub-group
    35ce:	4a1d      	ldr	r2, [pc, #116]	; (3644 <_reset_isr+0xa0>)
    35d0:	60da      	str	r2, [r3, #12]
    SCB->SHCSR = SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk; // Enable separate fault handlers
    35d2:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
    35d6:	625a      	str	r2, [r3, #36]	; 0x24
    SCB->SCR |= SCB_SCR_SEVONPEND_Msk; // Pending disabled interrupt generates event
    35d8:	691a      	ldr	r2, [r3, #16]
    35da:	f042 0210 	orr.w	r2, r2, #16
    35de:	611a      	str	r2, [r3, #16]
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk; // Enable division by zero faults
    35e0:	695a      	ldr	r2, [r3, #20]
    35e2:	f042 0210 	orr.w	r2, r2, #16
    35e6:	615a      	str	r2, [r3, #20]
    SCB->CPACR |= 0xF << 20; // Enable CP10 & CP11 (FPU) in priv. and non priv. mode
    35e8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    35ec:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    35f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    init();
    35f4:	f7ff f8f4 	bl	27e0 <init>
    main();
    35f8:	f7ff fda0 	bl	313c <main>
  __ASM volatile ("cpsid i" : : : "memory");
    35fc:	b672      	cpsid	i

    __disable_irq();
    while(1);
    35fe:	e7fe      	b.n	35fe <_reset_isr+0x5a>
        *(dst++) = *(src++);
    3600:	f852 0b04 	ldr.w	r0, [r2], #4
    3604:	f843 0b04 	str.w	r0, [r3], #4
    3608:	e7d0      	b.n	35ac <_reset_isr+0x8>
        *(dst++) = *(src++);
    360a:	f852 0b04 	ldr.w	r0, [r2], #4
    360e:	f843 0b04 	str.w	r0, [r3], #4
    3612:	e7d0      	b.n	35b6 <_reset_isr+0x12>
        *(dst++) = 0;
    3614:	f843 1b04 	str.w	r1, [r3], #4
    3618:	e7d2      	b.n	35c0 <_reset_isr+0x1c>
    361a:	bf00      	nop
    361c:	00005530 	.word	0x00005530
    3620:	10000000 	.word	0x10000000
    3624:	10000000 	.word	0x10000000
    3628:	20000000 	.word	0x20000000
    362c:	00005530 	.word	0x00005530
    3630:	2000007c 	.word	0x2000007c
    3634:	20000080 	.word	0x20000080
    3638:	20000124 	.word	0x20000124
    363c:	e000ed00 	.word	0xe000ed00
    3640:	00000000 	.word	0x00000000
    3644:	05fa0500 	.word	0x05fa0500

00003648 <adc_init>:
#include "adc.h"

void adc_init()
{
    3648:	b508      	push	{r3, lr}
    CMU->HFPERCLKEN0 |= CMU_HFPERCLKEN0_ADC0;
    364a:	4b0b      	ldr	r3, [pc, #44]	; (3678 <adc_init+0x30>)
    364c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    3650:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    3654:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    CMU->HFPERCLKEN0 |= CMU_HFPERCLKEN0_ADC1;
    3658:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    365c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
    3660:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    
    CMU->ADCCTRL = CMU_ADCCTRL_ADC0CLKINV | CMU_ADCCTRL_ADC0CLKSEL_AUXHFRCO | (3 << _CMU_ADCCTRL_ADC0CLKDIV_SHIFT) | CMU_ADCCTRL_ADC1CLKINV | CMU_ADCCTRL_ADC1CLKSEL_AUXHFRCO | (3 << _CMU_ADCCTRL_ADC1CLKDIV_SHIFT);
    3664:	4a05      	ldr	r2, [pc, #20]	; (367c <adc_init+0x34>)
    3666:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    
    cmu_update_clocks();
    366a:	f7fd fb91 	bl	d90 <cmu_update_clocks>

    // ADC_CLK is 8 MHz
    // adc_sar_clk is 100 kHz (ADC_CLK / (PRESC + 1)) PRESC = 79
    // TIMEBASE period is 1 us (1 MHz) (ADC_CLK / (TIMEBASE + 1)) TIMEBASE = 7
    ADC0->CTRL = ADC_CTRL_CHCONREFWARMIDLE_KEEPPREV | ADC_CTRL_CHCONMODE_MAXSETTLE | ADC_CTRL_OVSRSEL_X16 | (7 << _ADC_CTRL_TIMEBASE_SHIFT) | (79 << _ADC_CTRL_PRESC_SHIFT) | ADC_CTRL_ASYNCCLKEN_ALWAYSON | ADC_CTRL_ADCCLKMODE_ASYNC | ADC_CTRL_WARMUPMODE_NORMAL;
    366e:	4b04      	ldr	r3, [pc, #16]	; (3680 <adc_init+0x38>)
    3670:	4a04      	ldr	r2, [pc, #16]	; (3684 <adc_init+0x3c>)
    3672:	601a      	str	r2, [r3, #0]
}
    3674:	bd08      	pop	{r3, pc}
    3676:	bf00      	nop
    3678:	400e4000 	.word	0x400e4000
    367c:	01130113 	.word	0x01130113
    3680:	40082000 	.word	0x40082000
    3684:	83074fc0 	.word	0x83074fc0

00003688 <adc_get_avdd>:
float adc_get_avdd()
{
    while(ADC0->STATUS & (ADC_STATUS_WARM | ADC_STATUS_SCANREFWARM | ADC_STATUS_SINGLEREFWARM)); // Wait for ADC to cool down
    3688:	4b1b      	ldr	r3, [pc, #108]	; (36f8 <adc_get_avdd+0x70>)
    368a:	68da      	ldr	r2, [r3, #12]
    368c:	f412 5f98 	tst.w	r2, #4864	; 0x1300
    3690:	d1fb      	bne.n	368a <adc_get_avdd+0x2>

    ADC0->SINGLECTRL = ADC_SINGLECTRL_AT_64CYCLES | ADC_SINGLECTRL_NEGSEL_VSS | ADC_SINGLECTRL_POSSEL_AVDD | ADC_SINGLECTRL_REF_5V | ADC_SINGLECTRL_RES_OVS;
    3692:	4a1a      	ldr	r2, [pc, #104]	; (36fc <adc_get_avdd+0x74>)
    3694:	611a      	str	r2, [r3, #16]
    ADC0->SINGLECTRLX = ADC_SINGLECTRLX_FIFOOFACT_OVERWRITE | (0 << _ADC_SINGLECTRLX_DVL_SHIFT);
    3696:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    369a:	615a      	str	r2, [r3, #20]
    ADC0->CAL &= ~(_ADC_CAL_SINGLEGAIN_MASK | _ADC_CAL_SINGLEOFFSET_MASK | _ADC_CAL_SINGLEOFFSETINV_MASK);
    369c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    369e:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
    36a2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    36a6:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->CAL |= (DEVINFO->ADC0CAL1 & 0x7FFF0000) >> 16; // Calibration for 5V reference
    36a8:	4a15      	ldr	r2, [pc, #84]	; (3700 <adc_get_avdd+0x78>)
    36aa:	6e52      	ldr	r2, [r2, #100]	; 0x64
    36ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
    36ae:	f3c2 420e 	ubfx	r2, r2, #16, #15
    36b2:	430a      	orrs	r2, r1
    36b4:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    36b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    36b8:	4912      	ldr	r1, [pc, #72]	; (3704 <adc_get_avdd+0x7c>)
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    36ba:	f022 020f 	bic.w	r2, r2, #15
    36be:	631a      	str	r2, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    36c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    36c2:	f022 020f 	bic.w	r2, r2, #15
    36c6:	630a      	str	r2, [r1, #48]	; 0x30

    ADC0->CMD |= ADC_CMD_SINGLESTART;
    36c8:	689a      	ldr	r2, [r3, #8]
    36ca:	f042 0201 	orr.w	r2, r2, #1
    36ce:	609a      	str	r2, [r3, #8]

    while(!(ADC0->IF & ADC_IF_SINGLE));
    36d0:	4b09      	ldr	r3, [pc, #36]	; (36f8 <adc_get_avdd+0x70>)
    36d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    36d4:	07d2      	lsls	r2, r2, #31
    36d6:	d5fc      	bpl.n	36d2 <adc_get_avdd+0x4a>

    float fADCCode = ADC0->SINGLEDATA >> 4;
    36d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    float fAVDD = fADCCode * 5000.f / 4096.f;
    36da:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 3708 <adc_get_avdd+0x80>
    float fADCCode = ADC0->SINGLEDATA >> 4;
    36de:	091b      	lsrs	r3, r3, #4
    36e0:	ee07 3a90 	vmov	s15, r3
    36e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    float fAVDD = fADCCode * 5000.f / 4096.f;
    36e8:	ee67 7a80 	vmul.f32	s15, s15, s0

    return fAVDD;
}
    36ec:	ed9f 0a07 	vldr	s0, [pc, #28]	; 370c <adc_get_avdd+0x84>
    36f0:	ee27 0a80 	vmul.f32	s0, s15, s0
    36f4:	4770      	bx	lr
    36f6:	bf00      	nop
    36f8:	40082000 	.word	0x40082000
    36fc:	07ffe078 	.word	0x07ffe078
    3700:	0fe081b0 	.word	0x0fe081b0
    3704:	40082400 	.word	0x40082400
    3708:	459c4000 	.word	0x459c4000
    370c:	39800000 	.word	0x39800000

00003710 <adc_get_dvdd>:
float adc_get_dvdd()
{
    while(ADC0->STATUS & (ADC_STATUS_WARM | ADC_STATUS_SCANREFWARM | ADC_STATUS_SINGLEREFWARM)); // Wait for ADC to cool down
    3710:	4b1b      	ldr	r3, [pc, #108]	; (3780 <adc_get_dvdd+0x70>)
    3712:	68da      	ldr	r2, [r3, #12]
    3714:	f412 5f98 	tst.w	r2, #4864	; 0x1300
    3718:	d1fb      	bne.n	3712 <adc_get_dvdd+0x2>

    ADC0->SINGLECTRL = ADC_SINGLECTRL_AT_64CYCLES | ADC_SINGLECTRL_NEGSEL_VSS | ADC_SINGLECTRL_POSSEL_DVDD | ADC_SINGLECTRL_REF_5V | ADC_SINGLECTRL_RES_OVS;
    371a:	4a1a      	ldr	r2, [pc, #104]	; (3784 <adc_get_dvdd+0x74>)
    371c:	611a      	str	r2, [r3, #16]
    ADC0->SINGLECTRLX = ADC_SINGLECTRLX_FIFOOFACT_OVERWRITE | (0 << _ADC_SINGLECTRLX_DVL_SHIFT);
    371e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    3722:	615a      	str	r2, [r3, #20]
    ADC0->CAL &= ~(_ADC_CAL_SINGLEGAIN_MASK | _ADC_CAL_SINGLEOFFSET_MASK | _ADC_CAL_SINGLEOFFSETINV_MASK);
    3724:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    3726:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
    372a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    372e:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->CAL |= (DEVINFO->ADC0CAL1 & 0x7FFF0000) >> 16; // Calibration for 5V reference
    3730:	4a15      	ldr	r2, [pc, #84]	; (3788 <adc_get_dvdd+0x78>)
    3732:	6e52      	ldr	r2, [r2, #100]	; 0x64
    3734:	6b59      	ldr	r1, [r3, #52]	; 0x34
    3736:	f3c2 420e 	ubfx	r2, r2, #16, #15
    373a:	430a      	orrs	r2, r1
    373c:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    373e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    3740:	4912      	ldr	r1, [pc, #72]	; (378c <adc_get_dvdd+0x7c>)
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    3742:	f022 020f 	bic.w	r2, r2, #15
    3746:	631a      	str	r2, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    3748:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    374a:	f022 020f 	bic.w	r2, r2, #15
    374e:	630a      	str	r2, [r1, #48]	; 0x30

    ADC0->CMD |= ADC_CMD_SINGLESTART;
    3750:	689a      	ldr	r2, [r3, #8]
    3752:	f042 0201 	orr.w	r2, r2, #1
    3756:	609a      	str	r2, [r3, #8]

    while(!(ADC0->IF & ADC_IF_SINGLE));
    3758:	4b09      	ldr	r3, [pc, #36]	; (3780 <adc_get_dvdd+0x70>)
    375a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    375c:	07d2      	lsls	r2, r2, #31
    375e:	d5fc      	bpl.n	375a <adc_get_dvdd+0x4a>

    float fADCCode = ADC0->SINGLEDATA >> 4;
    3760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    float fDVDD = fADCCode * 5000.f / 4096.f;
    3762:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 3790 <adc_get_dvdd+0x80>
    float fADCCode = ADC0->SINGLEDATA >> 4;
    3766:	091b      	lsrs	r3, r3, #4
    3768:	ee07 3a90 	vmov	s15, r3
    376c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    float fDVDD = fADCCode * 5000.f / 4096.f;
    3770:	ee67 7a80 	vmul.f32	s15, s15, s0

    return fDVDD;
}
    3774:	ed9f 0a07 	vldr	s0, [pc, #28]	; 3794 <adc_get_dvdd+0x84>
    3778:	ee27 0a80 	vmul.f32	s0, s15, s0
    377c:	4770      	bx	lr
    377e:	bf00      	nop
    3780:	40082000 	.word	0x40082000
    3784:	07ffe278 	.word	0x07ffe278
    3788:	0fe081b0 	.word	0x0fe081b0
    378c:	40082400 	.word	0x40082400
    3790:	459c4000 	.word	0x459c4000
    3794:	39800000 	.word	0x39800000

00003798 <adc_get_iovdd>:
float adc_get_iovdd()
{
    while(ADC0->STATUS & (ADC_STATUS_WARM | ADC_STATUS_SCANREFWARM | ADC_STATUS_SINGLEREFWARM)); // Wait for ADC to cool down
    3798:	4b1b      	ldr	r3, [pc, #108]	; (3808 <adc_get_iovdd+0x70>)
    379a:	68da      	ldr	r2, [r3, #12]
    379c:	f412 5f98 	tst.w	r2, #4864	; 0x1300
    37a0:	d1fb      	bne.n	379a <adc_get_iovdd+0x2>

    ADC0->SINGLECTRL = ADC_SINGLECTRL_AT_64CYCLES | ADC_SINGLECTRL_NEGSEL_VSS | ADC_SINGLECTRL_POSSEL_IOVDD | ADC_SINGLECTRL_REF_5V | ADC_SINGLECTRL_RES_OVS;
    37a2:	4a1a      	ldr	r2, [pc, #104]	; (380c <adc_get_iovdd+0x74>)
    37a4:	611a      	str	r2, [r3, #16]
    ADC0->SINGLECTRLX = ADC_SINGLECTRLX_FIFOOFACT_OVERWRITE | (0 << _ADC_SINGLECTRLX_DVL_SHIFT);
    37a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    37aa:	615a      	str	r2, [r3, #20]
    ADC0->CAL &= ~(_ADC_CAL_SINGLEGAIN_MASK | _ADC_CAL_SINGLEOFFSET_MASK | _ADC_CAL_SINGLEOFFSETINV_MASK);
    37ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    37ae:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
    37b2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    37b6:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->CAL |= (DEVINFO->ADC0CAL1 & 0x7FFF0000) >> 16; // Calibration for 5V reference
    37b8:	4a15      	ldr	r2, [pc, #84]	; (3810 <adc_get_iovdd+0x78>)
    37ba:	6e52      	ldr	r2, [r2, #100]	; 0x64
    37bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
    37be:	f3c2 420e 	ubfx	r2, r2, #16, #15
    37c2:	430a      	orrs	r2, r1
    37c4:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    37c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    37c8:	4912      	ldr	r1, [pc, #72]	; (3814 <adc_get_iovdd+0x7c>)
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    37ca:	f022 020f 	bic.w	r2, r2, #15
    37ce:	631a      	str	r2, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    37d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    37d2:	f022 020f 	bic.w	r2, r2, #15
    37d6:	630a      	str	r2, [r1, #48]	; 0x30

    ADC0->CMD |= ADC_CMD_SINGLESTART;
    37d8:	689a      	ldr	r2, [r3, #8]
    37da:	f042 0201 	orr.w	r2, r2, #1
    37de:	609a      	str	r2, [r3, #8]

    while(!(ADC0->IF & ADC_IF_SINGLE));
    37e0:	4b09      	ldr	r3, [pc, #36]	; (3808 <adc_get_iovdd+0x70>)
    37e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    37e4:	07d2      	lsls	r2, r2, #31
    37e6:	d5fc      	bpl.n	37e2 <adc_get_iovdd+0x4a>

    float fADCCode = ADC0->SINGLEDATA >> 4;
    37e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    float fIOVDD = fADCCode * 5000.f / 4096.f;
    37ea:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 3818 <adc_get_iovdd+0x80>
    float fADCCode = ADC0->SINGLEDATA >> 4;
    37ee:	091b      	lsrs	r3, r3, #4
    37f0:	ee07 3a90 	vmov	s15, r3
    37f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    float fIOVDD = fADCCode * 5000.f / 4096.f;
    37f8:	ee67 7a80 	vmul.f32	s15, s15, s0

    return fIOVDD;
}
    37fc:	ed9f 0a07 	vldr	s0, [pc, #28]	; 381c <adc_get_iovdd+0x84>
    3800:	ee27 0a80 	vmul.f32	s0, s15, s0
    3804:	4770      	bx	lr
    3806:	bf00      	nop
    3808:	40082000 	.word	0x40082000
    380c:	07ffe578 	.word	0x07ffe578
    3810:	0fe081b0 	.word	0x0fe081b0
    3814:	40082400 	.word	0x40082400
    3818:	459c4000 	.word	0x459c4000
    381c:	39800000 	.word	0x39800000

00003820 <adc_get_corevdd>:
float adc_get_corevdd()
{
    while(ADC0->STATUS & (ADC_STATUS_WARM | ADC_STATUS_SCANREFWARM | ADC_STATUS_SINGLEREFWARM)); // Wait for ADC to cool down
    3820:	4b1b      	ldr	r3, [pc, #108]	; (3890 <adc_get_corevdd+0x70>)
    3822:	68da      	ldr	r2, [r3, #12]
    3824:	f412 5f98 	tst.w	r2, #4864	; 0x1300
    3828:	d1fb      	bne.n	3822 <adc_get_corevdd+0x2>

    ADC0->SINGLECTRL = ADC_SINGLECTRL_AT_64CYCLES | ADC_SINGLECTRL_NEGSEL_VSS | ADC_SINGLECTRL_POSSEL_DECOUPLE | ADC_SINGLECTRL_REF_2V5 | ADC_SINGLECTRL_RES_OVS;
    382a:	4a1a      	ldr	r2, [pc, #104]	; (3894 <adc_get_corevdd+0x74>)
    382c:	611a      	str	r2, [r3, #16]
    ADC0->SINGLECTRLX = ADC_SINGLECTRLX_FIFOOFACT_OVERWRITE | (0 << _ADC_SINGLECTRLX_DVL_SHIFT);
    382e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    3832:	615a      	str	r2, [r3, #20]
    ADC0->CAL &= ~(_ADC_CAL_SINGLEGAIN_MASK | _ADC_CAL_SINGLEOFFSET_MASK | _ADC_CAL_SINGLEOFFSETINV_MASK);
    3834:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    3836:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
    383a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    383e:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->CAL |= (DEVINFO->ADC0CAL0 & 0x7FFF0000) >> 16; // Calibration for 2V5 reference
    3840:	4a15      	ldr	r2, [pc, #84]	; (3898 <adc_get_corevdd+0x78>)
    3842:	6e12      	ldr	r2, [r2, #96]	; 0x60
    3844:	6b59      	ldr	r1, [r3, #52]	; 0x34
    3846:	f3c2 420e 	ubfx	r2, r2, #16, #15
    384a:	430a      	orrs	r2, r1
    384c:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    384e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    3850:	4912      	ldr	r1, [pc, #72]	; (389c <adc_get_corevdd+0x7c>)
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    3852:	f022 020f 	bic.w	r2, r2, #15
    3856:	631a      	str	r2, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_HIGHACC;
    3858:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    385a:	f022 020f 	bic.w	r2, r2, #15
    385e:	630a      	str	r2, [r1, #48]	; 0x30

    ADC0->CMD |= ADC_CMD_SINGLESTART;
    3860:	689a      	ldr	r2, [r3, #8]
    3862:	f042 0201 	orr.w	r2, r2, #1
    3866:	609a      	str	r2, [r3, #8]

    while(!(ADC0->IF & ADC_IF_SINGLE));
    3868:	4b09      	ldr	r3, [pc, #36]	; (3890 <adc_get_corevdd+0x70>)
    386a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    386c:	07d2      	lsls	r2, r2, #31
    386e:	d5fc      	bpl.n	386a <adc_get_corevdd+0x4a>

    float fADCCode = ADC0->SINGLEDATA >> 4;
    3870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    float fDECOUPLE = fADCCode * 2500.f / 4096.f;
    3872:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 38a0 <adc_get_corevdd+0x80>
    float fADCCode = ADC0->SINGLEDATA >> 4;
    3876:	091b      	lsrs	r3, r3, #4
    3878:	ee07 3a90 	vmov	s15, r3
    387c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    float fDECOUPLE = fADCCode * 2500.f / 4096.f;
    3880:	ee67 7a80 	vmul.f32	s15, s15, s0

    return fDECOUPLE;
}
    3884:	ed9f 0a07 	vldr	s0, [pc, #28]	; 38a4 <adc_get_corevdd+0x84>
    3888:	ee27 0a80 	vmul.f32	s0, s15, s0
    388c:	4770      	bx	lr
    388e:	bf00      	nop
    3890:	40082000 	.word	0x40082000
    3894:	07ffe438 	.word	0x07ffe438
    3898:	0fe081b0 	.word	0x0fe081b0
    389c:	40082400 	.word	0x40082400
    38a0:	451c4000 	.word	0x451c4000
    38a4:	39800000 	.word	0x39800000

000038a8 <adc_get_temperature>:
float adc_get_temperature()
{
    38a8:	b510      	push	{r4, lr}
    while(ADC0->STATUS & (ADC_STATUS_WARM | ADC_STATUS_SCANREFWARM | ADC_STATUS_SINGLEREFWARM)); // Wait for ADC to cool down
    38aa:	4b26      	ldr	r3, [pc, #152]	; (3944 <adc_get_temperature+0x9c>)
    38ac:	68da      	ldr	r2, [r3, #12]
    38ae:	f412 5f98 	tst.w	r2, #4864	; 0x1300
    38b2:	d1fb      	bne.n	38ac <adc_get_temperature+0x4>

    ADC0->SINGLECTRL = ADC_SINGLECTRL_AT_256CYCLES | ADC_SINGLECTRL_NEGSEL_VSS | ADC_SINGLECTRL_POSSEL_TEMP | ADC_SINGLECTRL_REF_1V25 | ADC_SINGLECTRL_RES_OVS;
    38b4:	4a24      	ldr	r2, [pc, #144]	; (3948 <adc_get_temperature+0xa0>)
    38b6:	611a      	str	r2, [r3, #16]
    ADC0->SINGLECTRLX = ADC_SINGLECTRLX_FIFOOFACT_OVERWRITE | (0 << _ADC_SINGLECTRLX_DVL_SHIFT);
    38b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    38bc:	615a      	str	r2, [r3, #20]
    ADC0->CAL &= ~(_ADC_CAL_SINGLEGAIN_MASK | _ADC_CAL_SINGLEOFFSET_MASK | _ADC_CAL_SINGLEOFFSETINV_MASK);
    38be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    ADC0->CAL |= (DEVINFO->ADC0CAL0 & 0x00007FFF) >> 0; // Calibration for 1V25 reference
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_LOWACC;
    38c0:	4c22      	ldr	r4, [pc, #136]	; (394c <adc_get_temperature+0xa4>)
    ADC0->CAL &= ~(_ADC_CAL_SINGLEGAIN_MASK | _ADC_CAL_SINGLEOFFSET_MASK | _ADC_CAL_SINGLEOFFSETINV_MASK);
    38c2:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
    38c6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    38ca:	635a      	str	r2, [r3, #52]	; 0x34
    ADC0->CAL |= (DEVINFO->ADC0CAL0 & 0x00007FFF) >> 0; // Calibration for 1V25 reference
    38cc:	4a20      	ldr	r2, [pc, #128]	; (3950 <adc_get_temperature+0xa8>)
    38ce:	6e11      	ldr	r1, [r2, #96]	; 0x60
    38d0:	6b58      	ldr	r0, [r3, #52]	; 0x34
    38d2:	f3c1 010e 	ubfx	r1, r1, #0, #15
    38d6:	4301      	orrs	r1, r0
    38d8:	6359      	str	r1, [r3, #52]	; 0x34
    ADC0->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_LOWACC;
    38da:	6b18      	ldr	r0, [r3, #48]	; 0x30
    38dc:	4020      	ands	r0, r4
    38de:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
    38e2:	6318      	str	r0, [r3, #48]	; 0x30
    ADC1->BIASPROG = (ADC0->BIASPROG & ~_ADC_BIASPROG_ADCBIASPROG_MASK) | ADC_BIASPROG_GPBIASACC_LOWACC;
    38e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
    38e6:	481b      	ldr	r0, [pc, #108]	; (3954 <adc_get_temperature+0xac>)
    38e8:	4021      	ands	r1, r4
    38ea:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
    38ee:	6301      	str	r1, [r0, #48]	; 0x30

    ADC0->CMD |= ADC_CMD_SINGLESTART;
    38f0:	6899      	ldr	r1, [r3, #8]
    38f2:	f041 0101 	orr.w	r1, r1, #1
    38f6:	6099      	str	r1, [r3, #8]

    while(!(ADC0->IF & ADC_IF_SINGLE));
    38f8:	4613      	mov	r3, r2
    38fa:	4a12      	ldr	r2, [pc, #72]	; (3944 <adc_get_temperature+0x9c>)
    38fc:	6b91      	ldr	r1, [r2, #56]	; 0x38
    38fe:	07c9      	lsls	r1, r1, #31
    3900:	d5fc      	bpl.n	38fc <adc_get_temperature+0x54>

    float fADCCode = ADC0->SINGLEDATA >> 4;
    3902:	6c91      	ldr	r1, [r2, #72]	; 0x48
    float fCalibrationTemp = (DEVINFO->CAL & _DEVINFO_CAL_TEMP_MASK) >> _DEVINFO_CAL_TEMP_SHIFT;
    3904:	681a      	ldr	r2, [r3, #0]
    float fADCCalibrationTemp = (DEVINFO->ADC0CAL3 & _DEVINFO_ADC0CAL3_TEMPREAD1V25_MASK) >> _DEVINFO_ADC0CAL3_TEMPREAD1V25_SHIFT;
    3906:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    float fADCTemp = fCalibrationTemp - (fADCCalibrationTemp - fADCCode) * 1250.f / (4096.f * -1.84f);
    3908:	eddf 6a13 	vldr	s13, [pc, #76]	; 3958 <adc_get_temperature+0xb0>
    float fADCCalibrationTemp = (DEVINFO->ADC0CAL3 & _DEVINFO_ADC0CAL3_TEMPREAD1V25_MASK) >> _DEVINFO_ADC0CAL3_TEMPREAD1V25_SHIFT;
    390c:	f3c3 130b 	ubfx	r3, r3, #4, #12
    3910:	ee07 3a90 	vmov	s15, r3
    float fADCCode = ADC0->SINGLEDATA >> 4;
    3914:	090b      	lsrs	r3, r1, #4
    float fADCCalibrationTemp = (DEVINFO->ADC0CAL3 & _DEVINFO_ADC0CAL3_TEMPREAD1V25_MASK) >> _DEVINFO_ADC0CAL3_TEMPREAD1V25_SHIFT;
    3916:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    float fADCCode = ADC0->SINGLEDATA >> 4;
    391a:	ee07 3a90 	vmov	s15, r3
    391e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    float fCalibrationTemp = (DEVINFO->CAL & _DEVINFO_CAL_TEMP_MASK) >> _DEVINFO_CAL_TEMP_SHIFT;
    3922:	f3c2 4307 	ubfx	r3, r2, #16, #8
    float fADCTemp = fCalibrationTemp - (fADCCalibrationTemp - fADCCode) * 1250.f / (4096.f * -1.84f);
    3926:	ee77 7a67 	vsub.f32	s15, s14, s15
    392a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 395c <adc_get_temperature+0xb4>
    392e:	ee67 7a87 	vmul.f32	s15, s15, s14
    float fCalibrationTemp = (DEVINFO->CAL & _DEVINFO_CAL_TEMP_MASK) >> _DEVINFO_CAL_TEMP_SHIFT;
    3932:	ee00 3a10 	vmov	s0, r3
    float fADCTemp = fCalibrationTemp - (fADCCalibrationTemp - fADCCode) * 1250.f / (4096.f * -1.84f);
    3936:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    float fCalibrationTemp = (DEVINFO->CAL & _DEVINFO_CAL_TEMP_MASK) >> _DEVINFO_CAL_TEMP_SHIFT;
    393a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0

    return fADCTemp;
}
    393e:	ee37 0a00 	vadd.f32	s0, s14, s0
    3942:	bd10      	pop	{r4, pc}
    3944:	40082000 	.word	0x40082000
    3948:	09fff318 	.word	0x09fff318
    394c:	fffefff0 	.word	0xfffefff0
    3950:	0fe081b0 	.word	0x0fe081b0
    3954:	40082400 	.word	0x40082400
    3958:	45eb851f 	.word	0x45eb851f
    395c:	449c4000 	.word	0x449c4000

00003960 <_out_buffer>:


// internal buffer output
static inline void _out_buffer(char character, char* buffer, size_t idx, size_t maxlen)
{
  if (idx < maxlen) {
    3960:	429a      	cmp	r2, r3
    buffer[idx] = character;
    3962:	bf38      	it	cc
    3964:	5488      	strbcc	r0, [r1, r2]
  }
}
    3966:	4770      	bx	lr

00003968 <_out_null>:

// internal null output
static inline void _out_null(char character, char* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
    3968:	4770      	bx	lr

0000396a <_ntoa_format>:
}


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
    396a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    396e:	469b      	mov	fp, r3
    3970:	e9dd 7311 	ldrd	r7, r3, [sp, #68]	; 0x44
    3974:	4681      	mov	r9, r0
  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3976:	f013 0002 	ands.w	r0, r3, #2
{
    397a:	468a      	mov	sl, r1
    397c:	4616      	mov	r6, r2
    397e:	e9dd 540c 	ldrd	r5, r4, [sp, #48]	; 0x30
    3982:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3986:	9001      	str	r0, [sp, #4]
{
    3988:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
    buf[len++] = '0';
    398c:	f04f 0e30 	mov.w	lr, #48	; 0x30
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3990:	d044      	beq.n	3a1c <_ntoa_format+0xb2>
  }
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3992:	f003 0003 	and.w	r0, r3, #3
    3996:	2801      	cmp	r0, #1
    buf[len++] = '0';
    3998:	f04f 0e30 	mov.w	lr, #48	; 0x30
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    399c:	d046      	beq.n	3a2c <_ntoa_format+0xc2>
  }

  // handle hash
  if (flags & FLAGS_HASH) {
    399e:	f013 0f10 	tst.w	r3, #16
    39a2:	d018      	beq.n	39d6 <_ntoa_format+0x6c>
    if (((len == prec) || (len == width)) && (len > 0U)) {
    39a4:	42a1      	cmp	r1, r4
    39a6:	d001      	beq.n	39ac <_ntoa_format+0x42>
    39a8:	42a7      	cmp	r7, r4
    39aa:	d144      	bne.n	3a36 <_ntoa_format+0xcc>
    39ac:	2c00      	cmp	r4, #0
    39ae:	d079      	beq.n	3aa4 <_ntoa_format+0x13a>
      len--;
      if ((base == 16U) && (len > 0U)) {
    39b0:	2a10      	cmp	r2, #16
      len--;
    39b2:	f104 31ff 	add.w	r1, r4, #4294967295	; 0xffffffff
      if ((base == 16U) && (len > 0U)) {
    39b6:	d147      	bne.n	3a48 <_ntoa_format+0xde>
    39b8:	2900      	cmp	r1, #0
    39ba:	d041      	beq.n	3a40 <_ntoa_format+0xd6>
        len--;
    39bc:	3c02      	subs	r4, #2
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    39be:	0699      	lsls	r1, r3, #26
    39c0:	d473      	bmi.n	3aaa <_ntoa_format+0x140>
    39c2:	2c1f      	cmp	r4, #31
    39c4:	d873      	bhi.n	3aae <_ntoa_format+0x144>
      buf[len++] = 'x';
    39c6:	2278      	movs	r2, #120	; 0x78
    }
    if ((base == 16U) &&  (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = 'X';
    39c8:	552a      	strb	r2, [r5, r4]
    39ca:	3401      	adds	r4, #1
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    39cc:	2c1f      	cmp	r4, #31
    39ce:	d86e      	bhi.n	3aae <_ntoa_format+0x144>
      buf[len++] = '0';
    39d0:	2230      	movs	r2, #48	; 0x30
    39d2:	552a      	strb	r2, [r5, r4]
    39d4:	3401      	adds	r4, #1
    }
  }

  // handle sign
  if ((len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    39d6:	42bc      	cmp	r4, r7
    39d8:	d106      	bne.n	39e8 <_ntoa_format+0x7e>
    39da:	f1bc 0f00 	cmp.w	ip, #0
    39de:	d102      	bne.n	39e6 <_ntoa_format+0x7c>
    39e0:	f013 0f0c 	tst.w	r3, #12
    39e4:	d057      	beq.n	3a96 <_ntoa_format+0x12c>
    len--;
    39e6:	1e7c      	subs	r4, r7, #1
  }
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    39e8:	2c1f      	cmp	r4, #31
    39ea:	d805      	bhi.n	39f8 <_ntoa_format+0x8e>
    if (negative) {
    39ec:	f1bc 0f00 	cmp.w	ip, #0
    39f0:	d054      	beq.n	3a9c <_ntoa_format+0x132>
      buf[len++] = '-';
    39f2:	232d      	movs	r3, #45	; 0x2d
    }
    else if (flags & FLAGS_PLUS) {
      buf[len++] = '+';  // ignore the space if the '+' exists
    }
    else if (flags & FLAGS_SPACE) {
      buf[len++] = ' ';
    39f4:	552b      	strb	r3, [r5, r4]
    39f6:	3401      	adds	r4, #1
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    39f8:	b3c0      	cbz	r0, 3a6c <_ntoa_format+0x102>
    39fa:	4425      	add	r5, r4
    39fc:	f04f 0800 	mov.w	r8, #0
      out(' ', buffer, idx++, maxlen);
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
    3a00:	4544      	cmp	r4, r8
    3a02:	eb06 0208 	add.w	r2, r6, r8
    3a06:	d135      	bne.n	3a74 <_ntoa_format+0x10a>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    3a08:	9b01      	ldr	r3, [sp, #4]
    3a0a:	2b00      	cmp	r3, #0
    3a0c:	d140      	bne.n	3a90 <_ntoa_format+0x126>
      out(' ', buffer, idx++, maxlen);
    }
  }

  return idx;
}
    3a0e:	4610      	mov	r0, r2
    3a10:	b003      	add	sp, #12
    3a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    buf[len++] = '0';
    3a16:	f805 e004 	strb.w	lr, [r5, r4]
    3a1a:	3401      	adds	r4, #1
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3a1c:	42a1      	cmp	r1, r4
    3a1e:	d9b8      	bls.n	3992 <_ntoa_format+0x28>
    3a20:	2c20      	cmp	r4, #32
    3a22:	d1f8      	bne.n	3a16 <_ntoa_format+0xac>
    3a24:	e7b5      	b.n	3992 <_ntoa_format+0x28>
    buf[len++] = '0';
    3a26:	f805 e004 	strb.w	lr, [r5, r4]
    3a2a:	3401      	adds	r4, #1
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3a2c:	42a7      	cmp	r7, r4
    3a2e:	d9b6      	bls.n	399e <_ntoa_format+0x34>
    3a30:	2c20      	cmp	r4, #32
    3a32:	d1f8      	bne.n	3a26 <_ntoa_format+0xbc>
    3a34:	e7b3      	b.n	399e <_ntoa_format+0x34>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3a36:	2a10      	cmp	r2, #16
    3a38:	d0c1      	beq.n	39be <_ntoa_format+0x54>
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    3a3a:	2c1f      	cmp	r4, #31
    3a3c:	d8dc      	bhi.n	39f8 <_ntoa_format+0x8e>
    3a3e:	e7c7      	b.n	39d0 <_ntoa_format+0x66>
    3a40:	460c      	mov	r4, r1
    3a42:	e7bc      	b.n	39be <_ntoa_format+0x54>
      buf[len++] = 'X';
    3a44:	2258      	movs	r2, #88	; 0x58
    3a46:	e7bf      	b.n	39c8 <_ntoa_format+0x5e>
      len--;
    3a48:	460c      	mov	r4, r1
    3a4a:	e7c1      	b.n	39d0 <_ntoa_format+0x66>
    else if (flags & FLAGS_SPACE) {
    3a4c:	071b      	lsls	r3, r3, #28
    3a4e:	d5d3      	bpl.n	39f8 <_ntoa_format+0x8e>
      buf[len++] = ' ';
    3a50:	2320      	movs	r3, #32
    3a52:	e7cf      	b.n	39f4 <_ntoa_format+0x8a>
      out(' ', buffer, idx++, maxlen);
    3a54:	1c56      	adds	r6, r2, #1
    3a56:	465b      	mov	r3, fp
    3a58:	4651      	mov	r1, sl
    3a5a:	2020      	movs	r0, #32
    3a5c:	47c8      	blx	r9
    3a5e:	4632      	mov	r2, r6
    for (size_t i = len; i < width; i++) {
    3a60:	eb08 0302 	add.w	r3, r8, r2
    3a64:	429f      	cmp	r7, r3
    3a66:	d8f5      	bhi.n	3a54 <_ntoa_format+0xea>
    3a68:	4616      	mov	r6, r2
    3a6a:	e7c6      	b.n	39fa <_ntoa_format+0x90>
    3a6c:	4632      	mov	r2, r6
    3a6e:	eba4 0806 	sub.w	r8, r4, r6
    3a72:	e7f5      	b.n	3a60 <_ntoa_format+0xf6>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
    3a74:	465b      	mov	r3, fp
    3a76:	4651      	mov	r1, sl
    3a78:	f815 0d01 	ldrb.w	r0, [r5, #-1]!
    3a7c:	47c8      	blx	r9
  for (size_t i = 0U; i < len; i++) {
    3a7e:	f108 0801 	add.w	r8, r8, #1
    3a82:	e7bd      	b.n	3a00 <_ntoa_format+0x96>
      out(' ', buffer, idx++, maxlen);
    3a84:	1c54      	adds	r4, r2, #1
    3a86:	465b      	mov	r3, fp
    3a88:	4651      	mov	r1, sl
    3a8a:	2020      	movs	r0, #32
    3a8c:	47c8      	blx	r9
    3a8e:	4622      	mov	r2, r4
    while (idx < width) {
    3a90:	42ba      	cmp	r2, r7
    3a92:	d3f7      	bcc.n	3a84 <_ntoa_format+0x11a>
    3a94:	e7bb      	b.n	3a0e <_ntoa_format+0xa4>
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    3a96:	2f1f      	cmp	r7, #31
    3a98:	463c      	mov	r4, r7
    3a9a:	d8ad      	bhi.n	39f8 <_ntoa_format+0x8e>
    else if (flags & FLAGS_PLUS) {
    3a9c:	075a      	lsls	r2, r3, #29
    3a9e:	d5d5      	bpl.n	3a4c <_ntoa_format+0xe2>
      buf[len++] = '+';  // ignore the space if the '+' exists
    3aa0:	232b      	movs	r3, #43	; 0x2b
    3aa2:	e7a7      	b.n	39f4 <_ntoa_format+0x8a>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3aa4:	2a10      	cmp	r2, #16
    3aa6:	d193      	bne.n	39d0 <_ntoa_format+0x66>
    3aa8:	e789      	b.n	39be <_ntoa_format+0x54>
    if ((base == 16U) &&  (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3aaa:	2c1f      	cmp	r4, #31
    3aac:	d9ca      	bls.n	3a44 <_ntoa_format+0xda>
  if ((len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    3aae:	42bc      	cmp	r4, r7
    3ab0:	d093      	beq.n	39da <_ntoa_format+0x70>
    3ab2:	e7a1      	b.n	39f8 <_ntoa_format+0x8e>

00003ab4 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    3ab4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3ab8:	b091      	sub	sp, #68	; 0x44
    3aba:	f8dd c074 	ldr.w	ip, [sp, #116]	; 0x74
    3abe:	9d18      	ldr	r5, [sp, #96]	; 0x60
    3ac0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    3ac2:	f41c 6f80 	tst.w	ip, #1024	; 0x400
    3ac6:	d000      	beq.n	3aca <_ntoa_long+0x16>
    3ac8:	b3a5      	cbz	r5, 3b34 <_ntoa_long+0x80>
    3aca:	f01c 0f20 	tst.w	ip, #32
    3ace:	f10d 0e20 	add.w	lr, sp, #32
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    3ad2:	f04f 0600 	mov.w	r6, #0
    3ad6:	bf14      	ite	ne
    3ad8:	f04f 0837 	movne.w	r8, #55	; 0x37
    3adc:	f04f 0857 	moveq.w	r8, #87	; 0x57
      const char digit = (char)(value % base);
    3ae0:	fbb5 f9f7 	udiv	r9, r5, r7
    3ae4:	fb07 5919 	mls	r9, r7, r9, r5
    3ae8:	fa5f f489 	uxtb.w	r4, r9
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    3aec:	f1b9 0f09 	cmp.w	r9, #9
    3af0:	bf94      	ite	ls
    3af2:	3430      	addls	r4, #48	; 0x30
    3af4:	4444      	addhi	r4, r8
    3af6:	b2e4      	uxtb	r4, r4
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    3af8:	42bd      	cmp	r5, r7
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    3afa:	f80e 4b01 	strb.w	r4, [lr], #1
      value /= base;
    3afe:	fbb5 f4f7 	udiv	r4, r5, r7
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    3b02:	f106 0601 	add.w	r6, r6, #1
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    3b06:	d301      	bcc.n	3b0c <_ntoa_long+0x58>
    3b08:	2e20      	cmp	r6, #32
    3b0a:	d111      	bne.n	3b30 <_ntoa_long+0x7c>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    3b0c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
    3b0e:	9405      	str	r4, [sp, #20]
    3b10:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    3b12:	f8cd c018 	str.w	ip, [sp, #24]
    3b16:	e9cd 7403 	strd	r7, r4, [sp, #12]
    3b1a:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
    3b1e:	e9cd 6401 	strd	r6, r4, [sp, #4]
    3b22:	ac08      	add	r4, sp, #32
    3b24:	9400      	str	r4, [sp, #0]
    3b26:	f7ff ff20 	bl	396a <_ntoa_format>
}
    3b2a:	b011      	add	sp, #68	; 0x44
    3b2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      value /= base;
    3b30:	4625      	mov	r5, r4
    3b32:	e7d5      	b.n	3ae0 <_ntoa_long+0x2c>
  size_t len = 0U;
    3b34:	462e      	mov	r6, r5
    3b36:	e7e9      	b.n	3b0c <_ntoa_long+0x58>

00003b38 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    3b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3b3c:	b093      	sub	sp, #76	; 0x4c
    3b3e:	4691      	mov	r9, r2
    3b40:	9d24      	ldr	r5, [sp, #144]	; 0x90
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    3b42:	056a      	lsls	r2, r5, #21
{
    3b44:	4607      	mov	r7, r0
    3b46:	4688      	mov	r8, r1
    3b48:	469a      	mov	sl, r3
  if (!(flags & FLAGS_PRECISION) || value) {
    3b4a:	d503      	bpl.n	3b54 <_ntoa_long_long+0x1c>
    3b4c:	e9dd 341c 	ldrd	r3, r4, [sp, #112]	; 0x70
    3b50:	4323      	orrs	r3, r4
    3b52:	d03b      	beq.n	3bcc <_ntoa_long_long+0x94>
    3b54:	f015 0f20 	tst.w	r5, #32
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    3b58:	bf14      	ite	ne
    3b5a:	2337      	movne	r3, #55	; 0x37
    3b5c:	2357      	moveq	r3, #87	; 0x57
    3b5e:	ae0a      	add	r6, sp, #40	; 0x28
    3b60:	2400      	movs	r4, #0
    3b62:	9309      	str	r3, [sp, #36]	; 0x24
      const char digit = (char)(value % base);
    3b64:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
    3b68:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
    3b6c:	f7fc ff8e 	bl	a8c <__aeabi_uldivmod>
    3b70:	b2d2      	uxtb	r2, r2
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    3b72:	2a09      	cmp	r2, #9
    3b74:	bf8a      	itet	hi
    3b76:	9b09      	ldrhi	r3, [sp, #36]	; 0x24
    3b78:	3230      	addls	r2, #48	; 0x30
    3b7a:	18d2      	addhi	r2, r2, r3
    3b7c:	b2d2      	uxtb	r2, r2
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    3b7e:	e9dd bc20 	ldrd	fp, ip, [sp, #128]	; 0x80
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    3b82:	f806 2b01 	strb.w	r2, [r6], #1
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    3b86:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
    3b8a:	4563      	cmp	r3, ip
    3b8c:	bf08      	it	eq
    3b8e:	455a      	cmpeq	r2, fp
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    3b90:	f104 0401 	add.w	r4, r4, #1
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    3b94:	d301      	bcc.n	3b9a <_ntoa_long_long+0x62>
    3b96:	2c20      	cmp	r4, #32
    3b98:	d115      	bne.n	3bc6 <_ntoa_long_long+0x8e>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    3b9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    3b9c:	9305      	str	r3, [sp, #20]
    3b9e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    3ba0:	9304      	str	r3, [sp, #16]
    3ba2:	9b20      	ldr	r3, [sp, #128]	; 0x80
    3ba4:	9303      	str	r3, [sp, #12]
    3ba6:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
    3baa:	9506      	str	r5, [sp, #24]
    3bac:	e9cd 4301 	strd	r4, r3, [sp, #4]
    3bb0:	ab0a      	add	r3, sp, #40	; 0x28
    3bb2:	9300      	str	r3, [sp, #0]
    3bb4:	464a      	mov	r2, r9
    3bb6:	4653      	mov	r3, sl
    3bb8:	4641      	mov	r1, r8
    3bba:	4638      	mov	r0, r7
    3bbc:	f7ff fed5 	bl	396a <_ntoa_format>
}
    3bc0:	b013      	add	sp, #76	; 0x4c
    3bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      value /= base;
    3bc6:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
    3bca:	e7cb      	b.n	3b64 <_ntoa_long_long+0x2c>
  size_t len = 0U;
    3bcc:	2400      	movs	r4, #0
    3bce:	e7e4      	b.n	3b9a <_ntoa_long_long+0x62>

00003bd0 <_out_char>:
  if (character) {
    3bd0:	b108      	cbz	r0, 3bd6 <_out_char+0x6>
    _putchar(character);
    3bd2:	f7fd bda6 	b.w	1722 <_putchar>
}
    3bd6:	4770      	bx	lr

00003bd8 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
    3bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3bdc:	b09f      	sub	sp, #124	; 0x7c
    3bde:	469a      	mov	sl, r3
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
    // use null output function
    out = _out_null;
    3be0:	1e0b      	subs	r3, r1, #0
    3be2:	930c      	str	r3, [sp, #48]	; 0x30
    3be4:	f8dd b0a0 	ldr.w	fp, [sp, #160]	; 0xa0
    3be8:	4bb5      	ldr	r3, [pc, #724]	; (3ec0 <_vsnprintf+0x2e8>)
    3bea:	bf18      	it	ne
    3bec:	4603      	movne	r3, r0
{
    3bee:	4691      	mov	r9, r2
    out = _out_null;
    3bf0:	930b      	str	r3, [sp, #44]	; 0x2c
    return 0U;
    3bf2:	2400      	movs	r4, #0
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
        format++;
        break;
    3bf4:	e34a      	b.n	428c <_vsnprintf+0x6b4>
    if (*format != '%') {
    3bf6:	2825      	cmp	r0, #37	; 0x25
    3bf8:	f10a 0a01 	add.w	sl, sl, #1
    3bfc:	d007      	beq.n	3c0e <_vsnprintf+0x36>
        out('%', buffer, idx++, maxlen);
        format++;
        break;

      default :
        out(*format, buffer, idx++, maxlen);
    3bfe:	1c65      	adds	r5, r4, #1
    3c00:	4622      	mov	r2, r4
    3c02:	464b      	mov	r3, r9
    3c04:	e9dd 410b 	ldrd	r4, r1, [sp, #44]	; 0x2c
    3c08:	47a0      	blx	r4
    3c0a:	462c      	mov	r4, r5
        format++;
        break;
    3c0c:	e33e      	b.n	428c <_vsnprintf+0x6b4>
    flags = 0U;
    3c0e:	2500      	movs	r5, #0
    3c10:	e006      	b.n	3c20 <_vsnprintf+0x48>
      switch (*format) {
    3c12:	2b2d      	cmp	r3, #45	; 0x2d
    3c14:	d016      	beq.n	3c44 <_vsnprintf+0x6c>
    3c16:	2b30      	cmp	r3, #48	; 0x30
    3c18:	d10c      	bne.n	3c34 <_vsnprintf+0x5c>
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    3c1a:	f045 0501 	orr.w	r5, r5, #1
{
    3c1e:	4692      	mov	sl, r2
      switch (*format) {
    3c20:	4652      	mov	r2, sl
    3c22:	f812 3b01 	ldrb.w	r3, [r2], #1
    3c26:	2b2b      	cmp	r3, #43	; 0x2b
    3c28:	d00f      	beq.n	3c4a <_vsnprintf+0x72>
    3c2a:	d8f2      	bhi.n	3c12 <_vsnprintf+0x3a>
    3c2c:	2b20      	cmp	r3, #32
    3c2e:	d00f      	beq.n	3c50 <_vsnprintf+0x78>
    3c30:	2b23      	cmp	r3, #35	; 0x23
    3c32:	d010      	beq.n	3c56 <_vsnprintf+0x7e>
    if (_is_digit(*format)) {
    3c34:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    3c38:	2909      	cmp	r1, #9
    3c3a:	d82e      	bhi.n	3c9a <_vsnprintf+0xc2>
  unsigned int i = 0U;
    3c3c:	2300      	movs	r3, #0
    3c3e:	930d      	str	r3, [sp, #52]	; 0x34
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    3c40:	200a      	movs	r0, #10
    3c42:	e011      	b.n	3c68 <_vsnprintf+0x90>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    3c44:	f045 0502 	orr.w	r5, r5, #2
    3c48:	e7e9      	b.n	3c1e <_vsnprintf+0x46>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    3c4a:	f045 0504 	orr.w	r5, r5, #4
    3c4e:	e7e6      	b.n	3c1e <_vsnprintf+0x46>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    3c50:	f045 0508 	orr.w	r5, r5, #8
    3c54:	e7e3      	b.n	3c1e <_vsnprintf+0x46>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    3c56:	f045 0510 	orr.w	r5, r5, #16
    3c5a:	e7e0      	b.n	3c1e <_vsnprintf+0x46>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    3c5c:	990d      	ldr	r1, [sp, #52]	; 0x34
    3c5e:	fb00 3301 	mla	r3, r0, r1, r3
    3c62:	3b30      	subs	r3, #48	; 0x30
    3c64:	930d      	str	r3, [sp, #52]	; 0x34
    3c66:	4692      	mov	sl, r2
  while (_is_digit(**str)) {
    3c68:	4652      	mov	r2, sl
    3c6a:	f812 3b01 	ldrb.w	r3, [r2], #1
    3c6e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    3c72:	2909      	cmp	r1, #9
    3c74:	d9f2      	bls.n	3c5c <_vsnprintf+0x84>
    if (*format == '.') {
    3c76:	f89a 3000 	ldrb.w	r3, [sl]
    3c7a:	2b2e      	cmp	r3, #46	; 0x2e
    3c7c:	d148      	bne.n	3d10 <_vsnprintf+0x138>
      if (_is_digit(*format)) {
    3c7e:	f89a 2001 	ldrb.w	r2, [sl, #1]
    3c82:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    3c86:	2909      	cmp	r1, #9
    3c88:	f10a 0301 	add.w	r3, sl, #1
      flags |= FLAGS_PRECISION;
    3c8c:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
      if (_is_digit(*format)) {
    3c90:	d836      	bhi.n	3d00 <_vsnprintf+0x128>
      format++;
    3c92:	469a      	mov	sl, r3
  unsigned int i = 0U;
    3c94:	2600      	movs	r6, #0
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    3c96:	210a      	movs	r1, #10
    3c98:	e013      	b.n	3cc2 <_vsnprintf+0xea>
    else if (*format == '*') {
    3c9a:	2b2a      	cmp	r3, #42	; 0x2a
    3c9c:	d109      	bne.n	3cb2 <_vsnprintf+0xda>
      const int w = va_arg(va, int);
    3c9e:	f85b 3b04 	ldr.w	r3, [fp], #4
      if (w < 0) {
    3ca2:	2b00      	cmp	r3, #0
        width = (unsigned int)-w;
    3ca4:	bfbc      	itt	lt
    3ca6:	425b      	neglt	r3, r3
        flags |= FLAGS_LEFT;    // reverse padding
    3ca8:	f045 0502 	orrlt.w	r5, r5, #2
        width = (unsigned int)w;
    3cac:	930d      	str	r3, [sp, #52]	; 0x34
      const int w = va_arg(va, int);
    3cae:	4692      	mov	sl, r2
    3cb0:	e7e1      	b.n	3c76 <_vsnprintf+0x9e>
    width = 0U;
    3cb2:	2300      	movs	r3, #0
    3cb4:	930d      	str	r3, [sp, #52]	; 0x34
    3cb6:	e7de      	b.n	3c76 <_vsnprintf+0x9e>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    3cb8:	fb01 0206 	mla	r2, r1, r6, r0
    3cbc:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
    3cc0:	469a      	mov	sl, r3
  while (_is_digit(**str)) {
    3cc2:	4653      	mov	r3, sl
    3cc4:	f813 0b01 	ldrb.w	r0, [r3], #1
    3cc8:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    3ccc:	2a09      	cmp	r2, #9
    3cce:	d9f3      	bls.n	3cb8 <_vsnprintf+0xe0>
    switch (*format) {
    3cd0:	4653      	mov	r3, sl
    3cd2:	f813 2b01 	ldrb.w	r2, [r3], #1
    3cd6:	2a6c      	cmp	r2, #108	; 0x6c
    3cd8:	d023      	beq.n	3d22 <_vsnprintf+0x14a>
    3cda:	d81b      	bhi.n	3d14 <_vsnprintf+0x13c>
    3cdc:	2a68      	cmp	r2, #104	; 0x68
    3cde:	d029      	beq.n	3d34 <_vsnprintf+0x15c>
    3ce0:	2a6a      	cmp	r2, #106	; 0x6a
    3ce2:	d031      	beq.n	3d48 <_vsnprintf+0x170>
    3ce4:	4653      	mov	r3, sl
    switch (*format) {
    3ce6:	469a      	mov	sl, r3
    3ce8:	f81a 0b01 	ldrb.w	r0, [sl], #1
    3cec:	2866      	cmp	r0, #102	; 0x66
    3cee:	d036      	beq.n	3d5e <_vsnprintf+0x186>
    3cf0:	f200 80c4 	bhi.w	3e7c <_vsnprintf+0x2a4>
    3cf4:	2858      	cmp	r0, #88	; 0x58
    3cf6:	d12a      	bne.n	3d4e <_vsnprintf+0x176>
          flags |= FLAGS_UPPERCASE;
    3cf8:	f045 0520 	orr.w	r5, r5, #32
          base = 16U;
    3cfc:	2310      	movs	r3, #16
    3cfe:	e0c7      	b.n	3e90 <_vsnprintf+0x2b8>
      else if (*format == '*') {
    3d00:	2a2a      	cmp	r2, #42	; 0x2a
    3d02:	d104      	bne.n	3d0e <_vsnprintf+0x136>
        precision = (unsigned int)va_arg(va, int);
    3d04:	f85b 6b04 	ldr.w	r6, [fp], #4
        format++;
    3d08:	f10a 0a02 	add.w	sl, sl, #2
    3d0c:	e7e0      	b.n	3cd0 <_vsnprintf+0xf8>
      format++;
    3d0e:	469a      	mov	sl, r3
    precision = 0U;
    3d10:	2600      	movs	r6, #0
    3d12:	e7dd      	b.n	3cd0 <_vsnprintf+0xf8>
    switch (*format) {
    3d14:	2a74      	cmp	r2, #116	; 0x74
    3d16:	d001      	beq.n	3d1c <_vsnprintf+0x144>
    3d18:	2a7a      	cmp	r2, #122	; 0x7a
    3d1a:	d1e3      	bne.n	3ce4 <_vsnprintf+0x10c>
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    3d1c:	f445 7580 	orr.w	r5, r5, #256	; 0x100
        break;
    3d20:	e7e1      	b.n	3ce6 <_vsnprintf+0x10e>
        if (*format == 'l') {
    3d22:	f89a 2001 	ldrb.w	r2, [sl, #1]
    3d26:	2a6c      	cmp	r2, #108	; 0x6c
    3d28:	d1f8      	bne.n	3d1c <_vsnprintf+0x144>
          flags |= FLAGS_LONG_LONG;
    3d2a:	f445 7540 	orr.w	r5, r5, #768	; 0x300
          format++;
    3d2e:	f10a 0302 	add.w	r3, sl, #2
    3d32:	e7d8      	b.n	3ce6 <_vsnprintf+0x10e>
        if (*format == 'h') {
    3d34:	f89a 2001 	ldrb.w	r2, [sl, #1]
    3d38:	2a68      	cmp	r2, #104	; 0x68
    3d3a:	d002      	beq.n	3d42 <_vsnprintf+0x16a>
        flags |= FLAGS_SHORT;
    3d3c:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    3d40:	e7d1      	b.n	3ce6 <_vsnprintf+0x10e>
          flags |= FLAGS_CHAR;
    3d42:	f045 05c0 	orr.w	r5, r5, #192	; 0xc0
    3d46:	e7f2      	b.n	3d2e <_vsnprintf+0x156>
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    3d48:	f445 7500 	orr.w	r5, r5, #512	; 0x200
        break;
    3d4c:	e7cb      	b.n	3ce6 <_vsnprintf+0x10e>
    switch (*format) {
    3d4e:	f200 8086 	bhi.w	3e5e <_vsnprintf+0x286>
    3d52:	2825      	cmp	r0, #37	; 0x25
    3d54:	f43f af53 	beq.w	3bfe <_vsnprintf+0x26>
    3d58:	2846      	cmp	r0, #70	; 0x46
    3d5a:	f47f af50 	bne.w	3bfe <_vsnprintf+0x26>
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    3d5e:	f10b 0b07 	add.w	fp, fp, #7
    3d62:	f02b 0b07 	bic.w	fp, fp, #7
    3d66:	ecbb 7b02 	vldmia	fp!, {d7}
  if (value < 0) {
    3d6a:	2200      	movs	r2, #0
    3d6c:	2300      	movs	r3, #0
    3d6e:	ec51 0b17 	vmov	r0, r1, d7
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    3d72:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
  if (value < 0) {
    3d76:	f7fc fe19 	bl	9ac <__aeabi_dcmplt>
    3d7a:	2800      	cmp	r0, #0
    3d7c:	f000 810b 	beq.w	3f96 <_vsnprintf+0x3be>
    value = 0 - value;
    3d80:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    3d84:	2000      	movs	r0, #0
    3d86:	2100      	movs	r1, #0
    3d88:	f7fc f9e6 	bl	158 <__aeabi_dsub>
    3d8c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    negative = true;
    3d90:	2301      	movs	r3, #1
    3d92:	9311      	str	r3, [sp, #68]	; 0x44
  if (!(flags & FLAGS_PRECISION)) {
    3d94:	056a      	lsls	r2, r5, #21
    3d96:	f140 8100 	bpl.w	3f9a <_vsnprintf+0x3c2>
  if (prec > 9U) {
    3d9a:	2e09      	cmp	r6, #9
    3d9c:	bf28      	it	cs
    3d9e:	2609      	movcs	r6, #9
    3da0:	9610      	str	r6, [sp, #64]	; 0x40
  int whole = (int)value;
    3da2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    3da6:	f7fc fe29 	bl	9fc <__aeabi_d2iz>
  double tmp = (value - whole) * pow10[prec];
    3daa:	9a10      	ldr	r2, [sp, #64]	; 0x40
    3dac:	4b45      	ldr	r3, [pc, #276]	; (3ec4 <_vsnprintf+0x2ec>)
    3dae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    3db2:	ed93 7b00 	vldr	d7, [r3]
  int whole = (int)value;
    3db6:	4606      	mov	r6, r0
  double tmp = (value - whole) * pow10[prec];
    3db8:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
    3dbc:	f7fc fb1a 	bl	3f4 <__aeabi_i2d>
    3dc0:	4602      	mov	r2, r0
    3dc2:	460b      	mov	r3, r1
    3dc4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    3dc8:	f7fc f9c6 	bl	158 <__aeabi_dsub>
    3dcc:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    3dd0:	f7fc fb7a 	bl	4c8 <__aeabi_dmul>
    3dd4:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
  unsigned long frac = (unsigned long)tmp;
    3dd8:	f7fc fe38 	bl	a4c <__aeabi_d2uiz>
    3ddc:	4607      	mov	r7, r0
  diff = tmp - frac;
    3dde:	f7fc faf9 	bl	3d4 <__aeabi_ui2d>
    3de2:	4602      	mov	r2, r0
    3de4:	460b      	mov	r3, r1
    3de6:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    3dea:	f7fc f9b5 	bl	158 <__aeabi_dsub>
  if (diff > 0.5) {
    3dee:	2200      	movs	r2, #0
    3df0:	4b35      	ldr	r3, [pc, #212]	; (3ec8 <_vsnprintf+0x2f0>)
  diff = tmp - frac;
    3df2:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
  if (diff > 0.5) {
    3df6:	f7fc fdf7 	bl	9e8 <__aeabi_dcmpgt>
    3dfa:	2800      	cmp	r0, #0
    3dfc:	f000 80d0 	beq.w	3fa0 <_vsnprintf+0x3c8>
    ++frac;
    3e00:	3701      	adds	r7, #1
    if (frac >= pow10[prec]) {
    3e02:	4638      	mov	r0, r7
    3e04:	f7fc fae6 	bl	3d4 <__aeabi_ui2d>
    3e08:	4602      	mov	r2, r0
    3e0a:	460b      	mov	r3, r1
    3e0c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    3e10:	f7fc fdd6 	bl	9c0 <__aeabi_dcmple>
    3e14:	b108      	cbz	r0, 3e1a <_vsnprintf+0x242>
      ++whole;
    3e16:	3601      	adds	r6, #1
      frac = 0;
    3e18:	2700      	movs	r7, #0
  if (value > thres_max) {
    3e1a:	a327      	add	r3, pc, #156	; (adr r3, 3eb8 <_vsnprintf+0x2e0>)
    3e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3e20:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    3e24:	f7fc fde0 	bl	9e8 <__aeabi_dcmpgt>
    3e28:	2800      	cmp	r0, #0
    3e2a:	f47f aee2 	bne.w	3bf2 <_vsnprintf+0x1a>
  if (prec == 0U) {
    3e2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3e30:	2b00      	cmp	r3, #0
    3e32:	f040 80d4 	bne.w	3fde <_vsnprintf+0x406>
    diff = value - (double)whole;
    3e36:	4630      	mov	r0, r6
    3e38:	f7fc fadc 	bl	3f4 <__aeabi_i2d>
    3e3c:	4602      	mov	r2, r0
    3e3e:	460b      	mov	r3, r1
    3e40:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    3e44:	f7fc f988 	bl	158 <__aeabi_dsub>
    if (diff > 0.5) {
    3e48:	2200      	movs	r2, #0
    3e4a:	4b1f      	ldr	r3, [pc, #124]	; (3ec8 <_vsnprintf+0x2f0>)
    diff = value - (double)whole;
    3e4c:	4607      	mov	r7, r0
    3e4e:	4688      	mov	r8, r1
    if (diff > 0.5) {
    3e50:	f7fc fdca 	bl	9e8 <__aeabi_dcmpgt>
    3e54:	2800      	cmp	r0, #0
    3e56:	f000 80b2 	beq.w	3fbe <_vsnprintf+0x3e6>
      ++whole;
    3e5a:	3601      	adds	r6, #1
    3e5c:	e0b9      	b.n	3fd2 <_vsnprintf+0x3fa>
    switch (*format) {
    3e5e:	2863      	cmp	r0, #99	; 0x63
    3e60:	f000 8160 	beq.w	4124 <_vsnprintf+0x54c>
    3e64:	2864      	cmp	r0, #100	; 0x64
    3e66:	d002      	beq.n	3e6e <_vsnprintf+0x296>
    3e68:	2862      	cmp	r0, #98	; 0x62
    3e6a:	f47f aec8 	bne.w	3bfe <_vsnprintf+0x26>
        else if (*format == 'b') {
    3e6e:	2862      	cmp	r0, #98	; 0x62
    3e70:	f025 0510 	bic.w	r5, r5, #16
    3e74:	f040 81da 	bne.w	422c <_vsnprintf+0x654>
          base =  2U;
    3e78:	2302      	movs	r3, #2
        if ((*format != 'i') && (*format != 'd')) {
    3e7a:	e009      	b.n	3e90 <_vsnprintf+0x2b8>
    switch (*format) {
    3e7c:	2870      	cmp	r0, #112	; 0x70
    3e7e:	f000 81b2 	beq.w	41e6 <_vsnprintf+0x60e>
    3e82:	d823      	bhi.n	3ecc <_vsnprintf+0x2f4>
    3e84:	2869      	cmp	r0, #105	; 0x69
    3e86:	d0f2      	beq.n	3e6e <_vsnprintf+0x296>
    3e88:	286f      	cmp	r0, #111	; 0x6f
    3e8a:	f47f aeb8 	bne.w	3bfe <_vsnprintf+0x26>
          base =  8U;
    3e8e:	2308      	movs	r3, #8
          if (flags & FLAGS_LONG_LONG) {
    3e90:	f415 7200 	ands.w	r2, r5, #512	; 0x200
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    3e94:	f025 010c 	bic.w	r1, r5, #12
          if (flags & FLAGS_LONG_LONG) {
    3e98:	d05d      	beq.n	3f56 <_vsnprintf+0x37e>
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
    3e9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3e9c:	9108      	str	r1, [sp, #32]
    3e9e:	e9cd 6206 	strd	r6, r2, [sp, #24]
    3ea2:	2200      	movs	r2, #0
    3ea4:	e9cd 3204 	strd	r3, r2, [sp, #16]
    3ea8:	f10b 0b07 	add.w	fp, fp, #7
    3eac:	f02b 0707 	bic.w	r7, fp, #7
    3eb0:	9202      	str	r2, [sp, #8]
    3eb2:	e8f7 2302 	ldrd	r2, r3, [r7], #8
    3eb6:	e1df      	b.n	4278 <_vsnprintf+0x6a0>
    3eb8:	ffc00000 	.word	0xffc00000
    3ebc:	41dfffff 	.word	0x41dfffff
    3ec0:	00003969 	.word	0x00003969
    3ec4:	000054d8 	.word	0x000054d8
    3ec8:	3fe00000 	.word	0x3fe00000
    switch (*format) {
    3ecc:	2875      	cmp	r0, #117	; 0x75
    3ece:	d0ce      	beq.n	3e6e <_vsnprintf+0x296>
    3ed0:	2878      	cmp	r0, #120	; 0x78
    3ed2:	f43f af13 	beq.w	3cfc <_vsnprintf+0x124>
    3ed6:	2873      	cmp	r0, #115	; 0x73
    3ed8:	f47f ae91 	bne.w	3bfe <_vsnprintf+0x26>
        char* p = va_arg(va, char*);
    3edc:	f85b 7b04 	ldr.w	r7, [fp], #4
    3ee0:	463b      	mov	r3, r7
    3ee2:	4698      	mov	r8, r3
    3ee4:	3301      	adds	r3, #1
  for (s = str; *s; ++s);
    3ee6:	f898 2000 	ldrb.w	r2, [r8]
    3eea:	2a00      	cmp	r2, #0
    3eec:	d1f9      	bne.n	3ee2 <_vsnprintf+0x30a>
        if (flags & FLAGS_PRECISION) {
    3eee:	f415 6380 	ands.w	r3, r5, #1024	; 0x400
  return (unsigned int)(s - str);
    3ef2:	eba8 0807 	sub.w	r8, r8, r7
        if (flags & FLAGS_PRECISION) {
    3ef6:	9310      	str	r3, [sp, #64]	; 0x40
    3ef8:	d002      	beq.n	3f00 <_vsnprintf+0x328>
          l = (l < precision ? l : precision);
    3efa:	45b0      	cmp	r8, r6
    3efc:	bf28      	it	cs
    3efe:	46b0      	movcs	r8, r6
        if (!(flags & FLAGS_LEFT)) {
    3f00:	f015 0302 	ands.w	r3, r5, #2
    3f04:	930e      	str	r3, [sp, #56]	; 0x38
    3f06:	f000 8147 	beq.w	4198 <_vsnprintf+0x5c0>
    3f0a:	4622      	mov	r2, r4
    3f0c:	1bd4      	subs	r4, r2, r7
    3f0e:	e14b      	b.n	41a8 <_vsnprintf+0x5d0>
          else if (flags & FLAGS_LONG) {
    3f10:	05e8      	lsls	r0, r5, #23
    3f12:	f10b 0704 	add.w	r7, fp, #4
    3f16:	d513      	bpl.n	3f40 <_vsnprintf+0x368>
            const long value = va_arg(va, long);
    3f18:	f8db 3000 	ldr.w	r3, [fp]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    3f1c:	990d      	ldr	r1, [sp, #52]	; 0x34
    3f1e:	9202      	str	r2, [sp, #8]
    3f20:	e9cd 6103 	strd	r6, r1, [sp, #12]
    3f24:	0fda      	lsrs	r2, r3, #31
    3f26:	2b00      	cmp	r3, #0
    3f28:	9505      	str	r5, [sp, #20]
    3f2a:	9201      	str	r2, [sp, #4]
    3f2c:	bfb8      	it	lt
    3f2e:	425b      	neglt	r3, r3
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    3f30:	9300      	str	r3, [sp, #0]
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    3f32:	464b      	mov	r3, r9
    3f34:	4622      	mov	r2, r4
    3f36:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	; 0x2c
    3f3a:	f7ff fdbb 	bl	3ab4 <_ntoa_long>
    3f3e:	e1a3      	b.n	4288 <_vsnprintf+0x6b0>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    3f40:	f015 0f40 	tst.w	r5, #64	; 0x40
    3f44:	f8db 3000 	ldr.w	r3, [fp]
    3f48:	d001      	beq.n	3f4e <_vsnprintf+0x376>
    3f4a:	b2db      	uxtb	r3, r3
    3f4c:	e7e6      	b.n	3f1c <_vsnprintf+0x344>
    3f4e:	0629      	lsls	r1, r5, #24
    3f50:	bf48      	it	mi
    3f52:	b21b      	sxthmi	r3, r3
    3f54:	e7e2      	b.n	3f1c <_vsnprintf+0x344>
          else if (flags & FLAGS_LONG) {
    3f56:	05e8      	lsls	r0, r5, #23
    3f58:	f10b 0704 	add.w	r7, fp, #4
    3f5c:	d508      	bpl.n	3f70 <_vsnprintf+0x398>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    3f5e:	9105      	str	r1, [sp, #20]
    3f60:	990d      	ldr	r1, [sp, #52]	; 0x34
    3f62:	e9cd 2301 	strd	r2, r3, [sp, #4]
    3f66:	e9cd 6103 	strd	r6, r1, [sp, #12]
    3f6a:	f8db 3000 	ldr.w	r3, [fp]
    3f6e:	e7df      	b.n	3f30 <_vsnprintf+0x358>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    3f70:	f015 0f40 	tst.w	r5, #64	; 0x40
    3f74:	f8db 2000 	ldr.w	r2, [fp]
    3f78:	d009      	beq.n	3f8e <_vsnprintf+0x3b6>
    3f7a:	b2d2      	uxtb	r2, r2
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    3f7c:	9105      	str	r1, [sp, #20]
    3f7e:	990d      	ldr	r1, [sp, #52]	; 0x34
    3f80:	9302      	str	r3, [sp, #8]
    3f82:	2300      	movs	r3, #0
    3f84:	e9cd 6103 	strd	r6, r1, [sp, #12]
    3f88:	e9cd 2300 	strd	r2, r3, [sp]
    3f8c:	e7d1      	b.n	3f32 <_vsnprintf+0x35a>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    3f8e:	0628      	lsls	r0, r5, #24
    3f90:	bf48      	it	mi
    3f92:	b292      	uxthmi	r2, r2
    3f94:	e7f2      	b.n	3f7c <_vsnprintf+0x3a4>
  bool negative = false;
    3f96:	9011      	str	r0, [sp, #68]	; 0x44
    3f98:	e6fc      	b.n	3d94 <_vsnprintf+0x1bc>
    prec = 6U;  // by default, precesion is 6
    3f9a:	2306      	movs	r3, #6
    3f9c:	9310      	str	r3, [sp, #64]	; 0x40
    3f9e:	e700      	b.n	3da2 <_vsnprintf+0x1ca>
  else if ((diff == 0.5) && ((frac == 0U) || (frac & 1U))) {
    3fa0:	2200      	movs	r2, #0
    3fa2:	4ba1      	ldr	r3, [pc, #644]	; (4228 <_vsnprintf+0x650>)
    3fa4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    3fa8:	f7fc fcf6 	bl	998 <__aeabi_dcmpeq>
    3fac:	2800      	cmp	r0, #0
    3fae:	f43f af34 	beq.w	3e1a <_vsnprintf+0x242>
    3fb2:	b117      	cbz	r7, 3fba <_vsnprintf+0x3e2>
    3fb4:	07fb      	lsls	r3, r7, #31
    3fb6:	f57f af30 	bpl.w	3e1a <_vsnprintf+0x242>
    ++frac;
    3fba:	3701      	adds	r7, #1
    3fbc:	e72d      	b.n	3e1a <_vsnprintf+0x242>
    else if ((diff == 0.5) && (whole & 1)) {
    3fbe:	2200      	movs	r2, #0
    3fc0:	4b99      	ldr	r3, [pc, #612]	; (4228 <_vsnprintf+0x650>)
    3fc2:	4638      	mov	r0, r7
    3fc4:	4641      	mov	r1, r8
    3fc6:	f7fc fce7 	bl	998 <__aeabi_dcmpeq>
    3fca:	b110      	cbz	r0, 3fd2 <_vsnprintf+0x3fa>
    3fcc:	07f7      	lsls	r7, r6, #31
    3fce:	f53f af44 	bmi.w	3e5a <_vsnprintf+0x282>
    3fd2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    3fd4:	ab16      	add	r3, sp, #88	; 0x58
    3fd6:	4413      	add	r3, r2
      buf[len++] = '.';
    3fd8:	4690      	mov	r8, r2
    buf[len++] = (char)(48 + (whole % 10));
    3fda:	220a      	movs	r2, #10
    3fdc:	e05c      	b.n	4098 <_vsnprintf+0x4c0>
    3fde:	aa16      	add	r2, sp, #88	; 0x58
  if (prec == 0U) {
    3fe0:	f04f 0801 	mov.w	r8, #1
      buf[len++] = (char)(48U + (frac % 10U));
    3fe4:	200a      	movs	r0, #10
    3fe6:	fbb7 f1f0 	udiv	r1, r7, r0
    3fea:	fb00 7311 	mls	r3, r0, r1, r7
    3fee:	3330      	adds	r3, #48	; 0x30
    } while ((len < PRINTF_FTOA_BUFFER_SIZE) && (frac /= 10U));
    3ff0:	f1b8 0f20 	cmp.w	r8, #32
      buf[len++] = (char)(48U + (frac % 10U));
    3ff4:	f802 3b01 	strb.w	r3, [r2], #1
    } while ((len < PRINTF_FTOA_BUFFER_SIZE) && (frac /= 10U));
    3ff8:	d01d      	beq.n	4036 <_vsnprintf+0x45e>
    3ffa:	2f09      	cmp	r7, #9
    3ffc:	f108 0301 	add.w	r3, r8, #1
    4000:	d811      	bhi.n	4026 <_vsnprintf+0x44e>
    4002:	4643      	mov	r3, r8
      buf[len++] = '0';
    4004:	aa16      	add	r2, sp, #88	; 0x58
    4006:	2130      	movs	r1, #48	; 0x30
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    4008:	9810      	ldr	r0, [sp, #64]	; 0x40
    400a:	4283      	cmp	r3, r0
    400c:	f108 0801 	add.w	r8, r8, #1
    4010:	d10c      	bne.n	402c <_vsnprintf+0x454>
      buf[len++] = '.';
    4012:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4014:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
    4018:	aa1e      	add	r2, sp, #120	; 0x78
    401a:	4413      	add	r3, r2
    401c:	461a      	mov	r2, r3
    401e:	232e      	movs	r3, #46	; 0x2e
    4020:	f802 3c20 	strb.w	r3, [r2, #-32]
    4024:	e7d5      	b.n	3fd2 <_vsnprintf+0x3fa>
    } while ((len < PRINTF_FTOA_BUFFER_SIZE) && (frac /= 10U));
    4026:	4698      	mov	r8, r3
    4028:	460f      	mov	r7, r1
    402a:	e7dc      	b.n	3fe6 <_vsnprintf+0x40e>
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    402c:	f1b8 0f1f 	cmp.w	r8, #31
      buf[len++] = '0';
    4030:	5499      	strb	r1, [r3, r2]
    4032:	4643      	mov	r3, r8
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    4034:	d9e8      	bls.n	4008 <_vsnprintf+0x430>
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    4036:	f005 0303 	and.w	r3, r5, #3
    403a:	2b01      	cmp	r3, #1
    buf[len++] = '0';
    403c:	aa16      	add	r2, sp, #88	; 0x58
    403e:	f04f 0130 	mov.w	r1, #48	; 0x30
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    4042:	d031      	beq.n	40a8 <_vsnprintf+0x4d0>
  if ((len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    4044:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4046:	4590      	cmp	r8, r2
    4048:	d107      	bne.n	405a <_vsnprintf+0x482>
    404a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    404c:	b91a      	cbnz	r2, 4056 <_vsnprintf+0x47e>
    404e:	f015 0f0c 	tst.w	r5, #12
    4052:	f000 80dd 	beq.w	4210 <_vsnprintf+0x638>
    len--;
    4056:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
    405a:	f1b8 0f1f 	cmp.w	r8, #31
    405e:	d80a      	bhi.n	4076 <_vsnprintf+0x49e>
    if (negative) {
    4060:	9a11      	ldr	r2, [sp, #68]	; 0x44
    4062:	2a00      	cmp	r2, #0
    4064:	f000 80d8 	beq.w	4218 <_vsnprintf+0x640>
      buf[len++] = '-';
    4068:	aa1e      	add	r2, sp, #120	; 0x78
    406a:	4442      	add	r2, r8
    406c:	212d      	movs	r1, #45	; 0x2d
      buf[len++] = ' ';
    406e:	f802 1c20 	strb.w	r1, [r2, #-32]
    4072:	f108 0801 	add.w	r8, r8, #1
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    4076:	b9eb      	cbnz	r3, 40b4 <_vsnprintf+0x4dc>
    4078:	4622      	mov	r2, r4
    for (size_t i = len; i < width; i++) {
    407a:	eba8 0604 	sub.w	r6, r8, r4
    407e:	e02b      	b.n	40d8 <_vsnprintf+0x500>
    buf[len++] = (char)(48 + (whole % 10));
    4080:	fb96 f1f2 	sdiv	r1, r6, r2
    4084:	fb02 6611 	mls	r6, r2, r1, r6
    4088:	3630      	adds	r6, #48	; 0x30
    408a:	f803 6b01 	strb.w	r6, [r3], #1
    408e:	f108 0801 	add.w	r8, r8, #1
    if (!(whole /= 10)) {
    4092:	460e      	mov	r6, r1
    4094:	2900      	cmp	r1, #0
    4096:	d0ce      	beq.n	4036 <_vsnprintf+0x45e>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    4098:	f1b8 0f20 	cmp.w	r8, #32
    409c:	d1f0      	bne.n	4080 <_vsnprintf+0x4a8>
    409e:	e7ca      	b.n	4036 <_vsnprintf+0x45e>
    buf[len++] = '0';
    40a0:	f808 1002 	strb.w	r1, [r8, r2]
    40a4:	f108 0801 	add.w	r8, r8, #1
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    40a8:	980d      	ldr	r0, [sp, #52]	; 0x34
    40aa:	4580      	cmp	r8, r0
    40ac:	d2ca      	bcs.n	4044 <_vsnprintf+0x46c>
    40ae:	f1b8 0f1f 	cmp.w	r8, #31
    40b2:	d9f5      	bls.n	40a0 <_vsnprintf+0x4c8>
    40b4:	ab16      	add	r3, sp, #88	; 0x58
    40b6:	4443      	add	r3, r8
    40b8:	9310      	str	r3, [sp, #64]	; 0x40
    for (size_t i = len; i < width; i++) {
    40ba:	2700      	movs	r7, #0
    40bc:	e019      	b.n	40f2 <_vsnprintf+0x51a>
    else if (flags & FLAGS_SPACE) {
    40be:	0728      	lsls	r0, r5, #28
    40c0:	d5d9      	bpl.n	4076 <_vsnprintf+0x49e>
      buf[len++] = ' ';
    40c2:	aa1e      	add	r2, sp, #120	; 0x78
    40c4:	4442      	add	r2, r8
    40c6:	2120      	movs	r1, #32
    40c8:	e7d1      	b.n	406e <_vsnprintf+0x496>
      out(' ', buffer, idx++, maxlen);
    40ca:	1c57      	adds	r7, r2, #1
    40cc:	464b      	mov	r3, r9
    40ce:	990c      	ldr	r1, [sp, #48]	; 0x30
    40d0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    40d2:	2020      	movs	r0, #32
    40d4:	47a0      	blx	r4
    40d6:	463a      	mov	r2, r7
    for (size_t i = len; i < width; i++) {
    40d8:	990d      	ldr	r1, [sp, #52]	; 0x34
    40da:	18b3      	adds	r3, r6, r2
    40dc:	4299      	cmp	r1, r3
    40de:	d8f4      	bhi.n	40ca <_vsnprintf+0x4f2>
    40e0:	4614      	mov	r4, r2
    40e2:	e7e7      	b.n	40b4 <_vsnprintf+0x4dc>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
    40e4:	9810      	ldr	r0, [sp, #64]	; 0x40
    40e6:	990c      	ldr	r1, [sp, #48]	; 0x30
    40e8:	7800      	ldrb	r0, [r0, #0]
    40ea:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    40ec:	464b      	mov	r3, r9
    40ee:	47b0      	blx	r6
  for (size_t i = 0U; i < len; i++) {
    40f0:	3701      	adds	r7, #1
    40f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    40f4:	4547      	cmp	r7, r8
    40f6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    40fa:	eb07 0204 	add.w	r2, r7, r4
    40fe:	9310      	str	r3, [sp, #64]	; 0x40
    4100:	d1f0      	bne.n	40e4 <_vsnprintf+0x50c>
  if (flags & FLAGS_LEFT) {
    4102:	07a9      	lsls	r1, r5, #30
    4104:	4614      	mov	r4, r2
    4106:	f140 80c1 	bpl.w	428c <_vsnprintf+0x6b4>
    while (idx < width) {
    410a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    410c:	42a3      	cmp	r3, r4
    410e:	f240 80bd 	bls.w	428c <_vsnprintf+0x6b4>
      out(' ', buffer, idx++, maxlen);
    4112:	1c65      	adds	r5, r4, #1
    4114:	4622      	mov	r2, r4
    4116:	464b      	mov	r3, r9
    4118:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    411a:	990c      	ldr	r1, [sp, #48]	; 0x30
    411c:	2020      	movs	r0, #32
    411e:	47a0      	blx	r4
    4120:	462c      	mov	r4, r5
    4122:	e7f2      	b.n	410a <_vsnprintf+0x532>
        if (!(flags & FLAGS_LEFT)) {
    4124:	f015 0502 	ands.w	r5, r5, #2
    4128:	d026      	beq.n	4178 <_vsnprintf+0x5a0>
    412a:	4622      	mov	r2, r4
        unsigned int l = 1U;
    412c:	2701      	movs	r7, #1
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    412e:	f85b 0b04 	ldr.w	r0, [fp], #4
    4132:	990c      	ldr	r1, [sp, #48]	; 0x30
    4134:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    4136:	464b      	mov	r3, r9
    4138:	b2c0      	uxtb	r0, r0
    413a:	1c54      	adds	r4, r2, #1
    413c:	47b0      	blx	r6
        if (flags & FLAGS_LEFT) {
    413e:	2d00      	cmp	r5, #0
    4140:	f000 80a4 	beq.w	428c <_vsnprintf+0x6b4>
          while (l++ < width) {
    4144:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4146:	42bb      	cmp	r3, r7
    4148:	f240 80a0 	bls.w	428c <_vsnprintf+0x6b4>
            out(' ', buffer, idx++, maxlen);
    414c:	1c65      	adds	r5, r4, #1
    414e:	4622      	mov	r2, r4
    4150:	464b      	mov	r3, r9
    4152:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    4154:	990c      	ldr	r1, [sp, #48]	; 0x30
    4156:	2020      	movs	r0, #32
    4158:	47a0      	blx	r4
    415a:	3701      	adds	r7, #1
    415c:	462c      	mov	r4, r5
    415e:	e7f1      	b.n	4144 <_vsnprintf+0x56c>
            out(' ', buffer, idx++, maxlen);
    4160:	464b      	mov	r3, r9
    4162:	990c      	ldr	r1, [sp, #48]	; 0x30
    4164:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    4166:	2020      	movs	r0, #32
    4168:	47b8      	blx	r7
          while (l++ < width) {
    416a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    416c:	1932      	adds	r2, r6, r4
    416e:	1cb7      	adds	r7, r6, #2
    4170:	3601      	adds	r6, #1
    4172:	42b3      	cmp	r3, r6
    4174:	d8f4      	bhi.n	4160 <_vsnprintf+0x588>
    4176:	e7da      	b.n	412e <_vsnprintf+0x556>
    4178:	462e      	mov	r6, r5
    417a:	e7f6      	b.n	416a <_vsnprintf+0x592>
            out(' ', buffer, idx++, maxlen);
    417c:	464b      	mov	r3, r9
    417e:	990c      	ldr	r1, [sp, #48]	; 0x30
    4180:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    4182:	2020      	movs	r0, #32
    4184:	47a8      	blx	r5
          while (l++ < width) {
    4186:	4643      	mov	r3, r8
    4188:	990d      	ldr	r1, [sp, #52]	; 0x34
    418a:	4299      	cmp	r1, r3
    418c:	eb04 0203 	add.w	r2, r4, r3
    4190:	f103 0801 	add.w	r8, r3, #1
    4194:	d8f2      	bhi.n	417c <_vsnprintf+0x5a4>
    4196:	e6b9      	b.n	3f0c <_vsnprintf+0x334>
    4198:	4643      	mov	r3, r8
    419a:	1ae4      	subs	r4, r4, r3
    419c:	e7f4      	b.n	4188 <_vsnprintf+0x5b0>
    419e:	461e      	mov	r6, r3
          out(*(p++), buffer, idx++, maxlen);
    41a0:	464b      	mov	r3, r9
    41a2:	e9dd 510b 	ldrd	r5, r1, [sp, #44]	; 0x2c
    41a6:	47a8      	blx	r5
    41a8:	19e2      	adds	r2, r4, r7
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    41aa:	f817 0b01 	ldrb.w	r0, [r7], #1
    41ae:	b128      	cbz	r0, 41bc <_vsnprintf+0x5e4>
    41b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    41b2:	2b00      	cmp	r3, #0
    41b4:	d0f4      	beq.n	41a0 <_vsnprintf+0x5c8>
    41b6:	1e73      	subs	r3, r6, #1
    41b8:	2e00      	cmp	r6, #0
    41ba:	d1f0      	bne.n	419e <_vsnprintf+0x5c6>
        if (flags & FLAGS_LEFT) {
    41bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    41be:	4614      	mov	r4, r2
    41c0:	2b00      	cmp	r3, #0
    41c2:	d063      	beq.n	428c <_vsnprintf+0x6b4>
    41c4:	eba8 0802 	sub.w	r8, r8, r2
    41c8:	e007      	b.n	41da <_vsnprintf+0x602>
            out(' ', buffer, idx++, maxlen);
    41ca:	1c65      	adds	r5, r4, #1
    41cc:	4622      	mov	r2, r4
    41ce:	464b      	mov	r3, r9
    41d0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    41d2:	990c      	ldr	r1, [sp, #48]	; 0x30
    41d4:	2020      	movs	r0, #32
    41d6:	47a0      	blx	r4
    41d8:	462c      	mov	r4, r5
          while (l++ < width) {
    41da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    41dc:	eb08 0304 	add.w	r3, r8, r4
    41e0:	4293      	cmp	r3, r2
    41e2:	d3f2      	bcc.n	41ca <_vsnprintf+0x5f2>
    41e4:	e052      	b.n	428c <_vsnprintf+0x6b4>
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    41e6:	2308      	movs	r3, #8
    41e8:	e9cd 6303 	strd	r6, r3, [sp, #12]
    41ec:	2210      	movs	r2, #16
    41ee:	2300      	movs	r3, #0
    41f0:	e9cd 3201 	strd	r3, r2, [sp, #4]
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
    41f4:	f045 0521 	orr.w	r5, r5, #33	; 0x21
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    41f8:	9505      	str	r5, [sp, #20]
    41fa:	f85b 3b04 	ldr.w	r3, [fp], #4
    41fe:	9300      	str	r3, [sp, #0]
    4200:	4622      	mov	r2, r4
    4202:	464b      	mov	r3, r9
    4204:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	; 0x2c
    4208:	f7ff fc54 	bl	3ab4 <_ntoa_long>
    420c:	4604      	mov	r4, r0
        break;
    420e:	e03d      	b.n	428c <_vsnprintf+0x6b4>
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
    4210:	f1b8 0f1f 	cmp.w	r8, #31
    4214:	f63f af2f 	bhi.w	4076 <_vsnprintf+0x49e>
    else if (flags & FLAGS_PLUS) {
    4218:	076e      	lsls	r6, r5, #29
    421a:	f57f af50 	bpl.w	40be <_vsnprintf+0x4e6>
      buf[len++] = '+';  // ignore the space if the '+' exists
    421e:	aa1e      	add	r2, sp, #120	; 0x78
    4220:	4442      	add	r2, r8
    4222:	212b      	movs	r1, #43	; 0x2b
    4224:	e723      	b.n	406e <_vsnprintf+0x496>
    4226:	bf00      	nop
    4228:	3fe00000 	.word	0x3fe00000
        if ((*format != 'i') && (*format != 'd')) {
    422c:	2869      	cmp	r0, #105	; 0x69
    422e:	f04f 020a 	mov.w	r2, #10
    4232:	d003      	beq.n	423c <_vsnprintf+0x664>
    4234:	2864      	cmp	r0, #100	; 0x64
          base = 10U;
    4236:	4613      	mov	r3, r2
        if ((*format != 'i') && (*format != 'd')) {
    4238:	f47f ae2a 	bne.w	3e90 <_vsnprintf+0x2b8>
          if (flags & FLAGS_LONG_LONG) {
    423c:	05af      	lsls	r7, r5, #22
    423e:	f57f ae67 	bpl.w	3f10 <_vsnprintf+0x338>
            const long long value = va_arg(va, long long);
    4242:	f10b 0b07 	add.w	fp, fp, #7
    4246:	f02b 0b07 	bic.w	fp, fp, #7
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    424a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            const long long value = va_arg(va, long long);
    424c:	f8db 1004 	ldr.w	r1, [fp, #4]
    4250:	465f      	mov	r7, fp
    4252:	f857 0b08 	ldr.w	r0, [r7], #8
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    4256:	9204      	str	r2, [sp, #16]
    4258:	e9cd 6306 	strd	r6, r3, [sp, #24]
    425c:	2300      	movs	r3, #0
    425e:	9305      	str	r3, [sp, #20]
    4260:	0fcb      	lsrs	r3, r1, #31
    4262:	9302      	str	r3, [sp, #8]
    4264:	2800      	cmp	r0, #0
    4266:	460b      	mov	r3, r1
    4268:	f173 0100 	sbcs.w	r1, r3, #0
    426c:	9508      	str	r5, [sp, #32]
    426e:	4602      	mov	r2, r0
    4270:	da02      	bge.n	4278 <_vsnprintf+0x6a0>
    4272:	4242      	negs	r2, r0
    4274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
    4278:	e9cd 2300 	strd	r2, r3, [sp]
    427c:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	; 0x2c
    4280:	464b      	mov	r3, r9
    4282:	4622      	mov	r2, r4
    4284:	f7ff fc58 	bl	3b38 <_ntoa_long_long>
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    4288:	4604      	mov	r4, r0
        break;
    428a:	46bb      	mov	fp, r7
  while (*format)
    428c:	f89a 0000 	ldrb.w	r0, [sl]
    4290:	2800      	cmp	r0, #0
    4292:	f47f acb0 	bne.w	3bf6 <_vsnprintf+0x1e>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    4296:	454c      	cmp	r4, r9
    4298:	bf2c      	ite	cs
    429a:	f109 32ff 	addcs.w	r2, r9, #4294967295	; 0xffffffff
    429e:	4622      	movcc	r2, r4
    42a0:	464b      	mov	r3, r9
    42a2:	990c      	ldr	r1, [sp, #48]	; 0x30
    42a4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    42a6:	2000      	movs	r0, #0
    42a8:	47a8      	blx	r5

  // return written chars without terminating \0
  return (int)idx;
}
    42aa:	4620      	mov	r0, r4
    42ac:	b01f      	add	sp, #124	; 0x7c
    42ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    42b2:	bf00      	nop

000042b4 <printf>:

///////////////////////////////////////////////////////////////////////////////


int printf(const char* format, ...)
{
    42b4:	b40f      	push	{r0, r1, r2, r3}
    42b6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    42b8:	aa06      	add	r2, sp, #24
  va_list va;
  va_start(va, format);
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    42ba:	a902      	add	r1, sp, #8
{
    42bc:	f852 3b04 	ldr.w	r3, [r2], #4
  va_start(va, format);
    42c0:	9203      	str	r2, [sp, #12]
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    42c2:	9200      	str	r2, [sp, #0]
    42c4:	4804      	ldr	r0, [pc, #16]	; (42d8 <printf+0x24>)
    42c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    42ca:	f7ff fc85 	bl	3bd8 <_vsnprintf>
  va_end(va);
  return ret;
}
    42ce:	b005      	add	sp, #20
    42d0:	f85d eb04 	ldr.w	lr, [sp], #4
    42d4:	b004      	add	sp, #16
    42d6:	4770      	bx	lr
    42d8:	00003bd1 	.word	0x00003bd1

000042dc <snprintf>:
  return ret;
}


int snprintf(char* buffer, size_t count, const char* format, ...)
{
    42dc:	b40c      	push	{r2, r3}
    42de:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    42e0:	aa06      	add	r2, sp, #24
    42e2:	f852 3b04 	ldr.w	r3, [r2], #4
  va_list va;
  va_start(va, format);
    42e6:	9203      	str	r2, [sp, #12]
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
    42e8:	9200      	str	r2, [sp, #0]
    42ea:	460a      	mov	r2, r1
    42ec:	4601      	mov	r1, r0
    42ee:	4804      	ldr	r0, [pc, #16]	; (4300 <snprintf+0x24>)
    42f0:	f7ff fc72 	bl	3bd8 <_vsnprintf>
  va_end(va);
  return ret;
}
    42f4:	b005      	add	sp, #20
    42f6:	f85d eb04 	ldr.w	lr, [sp], #4
    42fa:	b002      	add	sp, #8
    42fc:	4770      	bx	lr
    42fe:	bf00      	nop
    4300:	00003961 	.word	0x00003961

00004304 <roundf>:
    4304:	b082      	sub	sp, #8
    4306:	ed8d 0a01 	vstr	s0, [sp, #4]
    430a:	9901      	ldr	r1, [sp, #4]
    430c:	f3c1 53c7 	ubfx	r3, r1, #23, #8
    4310:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
    4314:	2a16      	cmp	r2, #22
    4316:	dc16      	bgt.n	4346 <roundf+0x42>
    4318:	2a00      	cmp	r2, #0
    431a:	db0d      	blt.n	4338 <roundf+0x34>
    431c:	4810      	ldr	r0, [pc, #64]	; (4360 <roundf+0x5c>)
    431e:	4110      	asrs	r0, r2
    4320:	4208      	tst	r0, r1
    4322:	d012      	beq.n	434a <roundf+0x46>
    4324:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    4328:	4113      	asrs	r3, r2
    432a:	440b      	add	r3, r1
    432c:	ea23 0300 	bic.w	r3, r3, r0
    4330:	ee00 3a10 	vmov	s0, r3
    4334:	b002      	add	sp, #8
    4336:	4770      	bx	lr
    4338:	3201      	adds	r2, #1
    433a:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
    433e:	d1f7      	bne.n	4330 <roundf+0x2c>
    4340:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
    4344:	e7f4      	b.n	4330 <roundf+0x2c>
    4346:	2a80      	cmp	r2, #128	; 0x80
    4348:	d003      	beq.n	4352 <roundf+0x4e>
    434a:	ed9d 0a01 	vldr	s0, [sp, #4]
    434e:	b002      	add	sp, #8
    4350:	4770      	bx	lr
    4352:	eddd 7a01 	vldr	s15, [sp, #4]
    4356:	ee37 0aa7 	vadd.f32	s0, s15, s15
    435a:	b002      	add	sp, #8
    435c:	4770      	bx	lr
    435e:	bf00      	nop
    4360:	007fffff 	.word	0x007fffff

00004364 <malloc>:
    4364:	4b02      	ldr	r3, [pc, #8]	; (4370 <malloc+0xc>)
    4366:	4601      	mov	r1, r0
    4368:	6818      	ldr	r0, [r3, #0]
    436a:	f000 b859 	b.w	4420 <_malloc_r>
    436e:	bf00      	nop
    4370:	20000018 	.word	0x20000018

00004374 <free>:
    4374:	4b02      	ldr	r3, [pc, #8]	; (4380 <free+0xc>)
    4376:	4601      	mov	r1, r0
    4378:	6818      	ldr	r0, [r3, #0]
    437a:	f000 b803 	b.w	4384 <_free_r>
    437e:	bf00      	nop
    4380:	20000018 	.word	0x20000018

00004384 <_free_r>:
    4384:	b538      	push	{r3, r4, r5, lr}
    4386:	4605      	mov	r5, r0
    4388:	2900      	cmp	r1, #0
    438a:	d045      	beq.n	4418 <_free_r+0x94>
    438c:	f851 3c04 	ldr.w	r3, [r1, #-4]
    4390:	1f0c      	subs	r4, r1, #4
    4392:	2b00      	cmp	r3, #0
    4394:	bfb8      	it	lt
    4396:	18e4      	addlt	r4, r4, r3
    4398:	f000 f8ac 	bl	44f4 <__malloc_lock>
    439c:	4a1f      	ldr	r2, [pc, #124]	; (441c <_free_r+0x98>)
    439e:	6813      	ldr	r3, [r2, #0]
    43a0:	4610      	mov	r0, r2
    43a2:	b933      	cbnz	r3, 43b2 <_free_r+0x2e>
    43a4:	6063      	str	r3, [r4, #4]
    43a6:	6014      	str	r4, [r2, #0]
    43a8:	4628      	mov	r0, r5
    43aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    43ae:	f000 b8a7 	b.w	4500 <__malloc_unlock>
    43b2:	42a3      	cmp	r3, r4
    43b4:	d90c      	bls.n	43d0 <_free_r+0x4c>
    43b6:	6821      	ldr	r1, [r4, #0]
    43b8:	1862      	adds	r2, r4, r1
    43ba:	4293      	cmp	r3, r2
    43bc:	bf04      	itt	eq
    43be:	681a      	ldreq	r2, [r3, #0]
    43c0:	685b      	ldreq	r3, [r3, #4]
    43c2:	6063      	str	r3, [r4, #4]
    43c4:	bf04      	itt	eq
    43c6:	1852      	addeq	r2, r2, r1
    43c8:	6022      	streq	r2, [r4, #0]
    43ca:	6004      	str	r4, [r0, #0]
    43cc:	e7ec      	b.n	43a8 <_free_r+0x24>
    43ce:	4613      	mov	r3, r2
    43d0:	685a      	ldr	r2, [r3, #4]
    43d2:	b10a      	cbz	r2, 43d8 <_free_r+0x54>
    43d4:	42a2      	cmp	r2, r4
    43d6:	d9fa      	bls.n	43ce <_free_r+0x4a>
    43d8:	6819      	ldr	r1, [r3, #0]
    43da:	1858      	adds	r0, r3, r1
    43dc:	42a0      	cmp	r0, r4
    43de:	d10b      	bne.n	43f8 <_free_r+0x74>
    43e0:	6820      	ldr	r0, [r4, #0]
    43e2:	4401      	add	r1, r0
    43e4:	1858      	adds	r0, r3, r1
    43e6:	4282      	cmp	r2, r0
    43e8:	6019      	str	r1, [r3, #0]
    43ea:	d1dd      	bne.n	43a8 <_free_r+0x24>
    43ec:	6810      	ldr	r0, [r2, #0]
    43ee:	6852      	ldr	r2, [r2, #4]
    43f0:	605a      	str	r2, [r3, #4]
    43f2:	4401      	add	r1, r0
    43f4:	6019      	str	r1, [r3, #0]
    43f6:	e7d7      	b.n	43a8 <_free_r+0x24>
    43f8:	d902      	bls.n	4400 <_free_r+0x7c>
    43fa:	230c      	movs	r3, #12
    43fc:	602b      	str	r3, [r5, #0]
    43fe:	e7d3      	b.n	43a8 <_free_r+0x24>
    4400:	6820      	ldr	r0, [r4, #0]
    4402:	1821      	adds	r1, r4, r0
    4404:	428a      	cmp	r2, r1
    4406:	bf04      	itt	eq
    4408:	6811      	ldreq	r1, [r2, #0]
    440a:	6852      	ldreq	r2, [r2, #4]
    440c:	6062      	str	r2, [r4, #4]
    440e:	bf04      	itt	eq
    4410:	1809      	addeq	r1, r1, r0
    4412:	6021      	streq	r1, [r4, #0]
    4414:	605c      	str	r4, [r3, #4]
    4416:	e7c7      	b.n	43a8 <_free_r+0x24>
    4418:	bd38      	pop	{r3, r4, r5, pc}
    441a:	bf00      	nop
    441c:	20000090 	.word	0x20000090

00004420 <_malloc_r>:
    4420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4422:	1ccd      	adds	r5, r1, #3
    4424:	f025 0503 	bic.w	r5, r5, #3
    4428:	3508      	adds	r5, #8
    442a:	2d0c      	cmp	r5, #12
    442c:	bf38      	it	cc
    442e:	250c      	movcc	r5, #12
    4430:	2d00      	cmp	r5, #0
    4432:	4606      	mov	r6, r0
    4434:	db01      	blt.n	443a <_malloc_r+0x1a>
    4436:	42a9      	cmp	r1, r5
    4438:	d903      	bls.n	4442 <_malloc_r+0x22>
    443a:	230c      	movs	r3, #12
    443c:	6033      	str	r3, [r6, #0]
    443e:	2000      	movs	r0, #0
    4440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4442:	f000 f857 	bl	44f4 <__malloc_lock>
    4446:	4921      	ldr	r1, [pc, #132]	; (44cc <_malloc_r+0xac>)
    4448:	680a      	ldr	r2, [r1, #0]
    444a:	4614      	mov	r4, r2
    444c:	b99c      	cbnz	r4, 4476 <_malloc_r+0x56>
    444e:	4f20      	ldr	r7, [pc, #128]	; (44d0 <_malloc_r+0xb0>)
    4450:	683b      	ldr	r3, [r7, #0]
    4452:	b923      	cbnz	r3, 445e <_malloc_r+0x3e>
    4454:	4621      	mov	r1, r4
    4456:	4630      	mov	r0, r6
    4458:	f000 f83c 	bl	44d4 <_sbrk_r>
    445c:	6038      	str	r0, [r7, #0]
    445e:	4629      	mov	r1, r5
    4460:	4630      	mov	r0, r6
    4462:	f000 f837 	bl	44d4 <_sbrk_r>
    4466:	1c43      	adds	r3, r0, #1
    4468:	d123      	bne.n	44b2 <_malloc_r+0x92>
    446a:	230c      	movs	r3, #12
    446c:	6033      	str	r3, [r6, #0]
    446e:	4630      	mov	r0, r6
    4470:	f000 f846 	bl	4500 <__malloc_unlock>
    4474:	e7e3      	b.n	443e <_malloc_r+0x1e>
    4476:	6823      	ldr	r3, [r4, #0]
    4478:	1b5b      	subs	r3, r3, r5
    447a:	d417      	bmi.n	44ac <_malloc_r+0x8c>
    447c:	2b0b      	cmp	r3, #11
    447e:	d903      	bls.n	4488 <_malloc_r+0x68>
    4480:	6023      	str	r3, [r4, #0]
    4482:	441c      	add	r4, r3
    4484:	6025      	str	r5, [r4, #0]
    4486:	e004      	b.n	4492 <_malloc_r+0x72>
    4488:	6863      	ldr	r3, [r4, #4]
    448a:	42a2      	cmp	r2, r4
    448c:	bf0c      	ite	eq
    448e:	600b      	streq	r3, [r1, #0]
    4490:	6053      	strne	r3, [r2, #4]
    4492:	4630      	mov	r0, r6
    4494:	f000 f834 	bl	4500 <__malloc_unlock>
    4498:	f104 000b 	add.w	r0, r4, #11
    449c:	1d23      	adds	r3, r4, #4
    449e:	f020 0007 	bic.w	r0, r0, #7
    44a2:	1ac2      	subs	r2, r0, r3
    44a4:	d0cc      	beq.n	4440 <_malloc_r+0x20>
    44a6:	1a1b      	subs	r3, r3, r0
    44a8:	50a3      	str	r3, [r4, r2]
    44aa:	e7c9      	b.n	4440 <_malloc_r+0x20>
    44ac:	4622      	mov	r2, r4
    44ae:	6864      	ldr	r4, [r4, #4]
    44b0:	e7cc      	b.n	444c <_malloc_r+0x2c>
    44b2:	1cc4      	adds	r4, r0, #3
    44b4:	f024 0403 	bic.w	r4, r4, #3
    44b8:	42a0      	cmp	r0, r4
    44ba:	d0e3      	beq.n	4484 <_malloc_r+0x64>
    44bc:	1a21      	subs	r1, r4, r0
    44be:	4630      	mov	r0, r6
    44c0:	f000 f808 	bl	44d4 <_sbrk_r>
    44c4:	3001      	adds	r0, #1
    44c6:	d1dd      	bne.n	4484 <_malloc_r+0x64>
    44c8:	e7cf      	b.n	446a <_malloc_r+0x4a>
    44ca:	bf00      	nop
    44cc:	20000090 	.word	0x20000090
    44d0:	20000094 	.word	0x20000094

000044d4 <_sbrk_r>:
    44d4:	b538      	push	{r3, r4, r5, lr}
    44d6:	4c06      	ldr	r4, [pc, #24]	; (44f0 <_sbrk_r+0x1c>)
    44d8:	2300      	movs	r3, #0
    44da:	4605      	mov	r5, r0
    44dc:	4608      	mov	r0, r1
    44de:	6023      	str	r3, [r4, #0]
    44e0:	f000 f816 	bl	4510 <_sbrk>
    44e4:	1c43      	adds	r3, r0, #1
    44e6:	d102      	bne.n	44ee <_sbrk_r+0x1a>
    44e8:	6823      	ldr	r3, [r4, #0]
    44ea:	b103      	cbz	r3, 44ee <_sbrk_r+0x1a>
    44ec:	602b      	str	r3, [r5, #0]
    44ee:	bd38      	pop	{r3, r4, r5, pc}
    44f0:	20000114 	.word	0x20000114

000044f4 <__malloc_lock>:
    44f4:	4801      	ldr	r0, [pc, #4]	; (44fc <__malloc_lock+0x8>)
    44f6:	f000 b809 	b.w	450c <__retarget_lock_acquire_recursive>
    44fa:	bf00      	nop
    44fc:	2000011c 	.word	0x2000011c

00004500 <__malloc_unlock>:
    4500:	4801      	ldr	r0, [pc, #4]	; (4508 <__malloc_unlock+0x8>)
    4502:	f000 b804 	b.w	450e <__retarget_lock_release_recursive>
    4506:	bf00      	nop
    4508:	2000011c 	.word	0x2000011c

0000450c <__retarget_lock_acquire_recursive>:
    450c:	4770      	bx	lr

0000450e <__retarget_lock_release_recursive>:
    450e:	4770      	bx	lr

00004510 <_sbrk>:
    4510:	4a04      	ldr	r2, [pc, #16]	; (4524 <_sbrk+0x14>)
    4512:	4905      	ldr	r1, [pc, #20]	; (4528 <_sbrk+0x18>)
    4514:	6813      	ldr	r3, [r2, #0]
    4516:	2b00      	cmp	r3, #0
    4518:	bf08      	it	eq
    451a:	460b      	moveq	r3, r1
    451c:	4418      	add	r0, r3
    451e:	6010      	str	r0, [r2, #0]
    4520:	4618      	mov	r0, r3
    4522:	4770      	bx	lr
    4524:	20000098 	.word	0x20000098
    4528:	20000124 	.word	0x20000124

0000452c <__FUNCTION__.7587>:
    452c:	64726168 6c756166 72745f74 5f656361     hardfault_trace_
    453c:	63617473                                 stack.

00004542 <__FUNCTION__.7600>:
    4542:	6d6d656d 67616e61 72745f65 5f656361     memmanage_trace_
    4552:	63617473                                 stack.

00004558 <__FUNCTION__.7613>:
    4558:	66737562 746c7561 6172745f 735f6563     busfault_trace_s
    4568:	6b636174                                 tack.

0000456d <__FUNCTION__.7626>:
    456d:	67617375 75616665 745f746c 65636172     usagefault_trace
    457d:	6174735f 5b006b63 205d7325 7542202d     _stack.[%s] - Bu
    458d:	61662073 21746c75 61745320 74206b63     s fault! Stack t
    459d:	65636172 000a0d3a 5d73255b 42202d20     race:...[%s] - B
    45ad:	20525346 2578305b 5d583230 5b000a0d     FSR [0x%02X]...[
    45bd:	205d7325 4642202d 5b205241 30257830     %s] - BFAR [0x%0
    45cd:	0d5d5838 255b000a 2d205d73 72614820     8X]...[%s] - Har
    45dd:	61662064 21746c75 61745320 74206b63     d fault! Stack t
    45ed:	65636172 000a0d3a 5d73255b 52202d20     race:...[%s] - R
    45fd:	305b2030 38302578 0a0d5d58 73255b00     0 [0x%08X]...[%s
    460d:	202d205d 5b203152 30257830 0d5d5838     ] - R1 [0x%08X].
    461d:	255b000a 2d205d73 20325220 2578305b     ..[%s] - R2 [0x%
    462d:	5d583830 5b000a0d 205d7325 3352202d     08X]...[%s] - R3
    463d:	78305b20 58383025 000a0d5d 5d73255b      [0x%08X]...[%s]
    464d:	52202d20 5b203231 30257830 0d5d5838      - R12 [0x%08X].
    465d:	255b000a 2d205d73 20524c20 3431525b     ..[%s] - LR [R14
    466d:	305b205d 38302578 63205d58 206c6c61     ] [0x%08X] call 
    467d:	75746572 0a0d6e72 73255b00 202d205d     return...[%s] - 
    468d:	5b204350 5d353152 78305b20 58383025     PC [R15] [0x%08X
    469d:	7270205d 6172676f 6f63206d 65746e75     ] program counte
    46ad:	000a0d72 5d73255b 50202d20 5b205253     r...[%s] - PSR [
    46bd:	30257830 205d5838 676f7270 206d6172     0x%08X] program 
    46cd:	74617473 72207375 73696765 0d726574     status register.
    46dd:	255b000a 2d205d73 2d2d2d20 2d2d2d2d     ..[%s] - -------
    46ed:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
    46fd:	2d2d2d2d 0d2d2d2d 255b000a 2d205d73     -------...[%s] -
    470d:	53464820 305b2052 38302578 0a0d5d58      HFSR [0x%08X]..
    471d:	73255b00 202d205d 52534349 78305b20     .[%s] - ICSR [0x
    472d:	58383025 000a0d5d 5d73255b 4d202d20     %08X]...[%s] - M
    473d:	5b205053 30257830 0d5d5838 255b000a     SP [0x%08X]...[%
    474d:	2d205d73 6d654d20 2079726f 616e616d     s] - Memory mana
    475d:	656d6567 6620746e 746c7561 74532021     gement fault! St
    476d:	206b6361 63617274 0a0d3a65 73255b00     ack trace:...[%s
    477d:	202d205d 53464d4d 305b2052 32302578     ] - MMFSR [0x%02
    478d:	0a0d5d58 73255b00 202d205d 41464d4d     X]...[%s] - MMFA
    479d:	305b2052 38302578 0a0d5d58 73255b00     R [0x%08X]...[%s
    47ad:	202d205d 67617355 61662065 21746c75     ] - Usage fault!
    47bd:	61745320 74206b63 65636172 000a0d3a      Stack trace:...
    47cd:	5d73255b 55202d20 20525346 2578305b     [%s] - UFSR [0x%
    47dd:	5d583430                                 04X]...

000047e4 <__FUNCTION__.9055>:
    47e4:	74696e69                                 init.

000047e9 <__FUNCTION__.9062>:
    47e9:	6e69616d 4d464500 474a3233 3f004231     main.EFM32JG1B.?
    47f9:	52464500 474d3233 45005031 32335246     .EFR32MG1P.EFR32
    4809:	4231474d 52464500 474d3233 45005631     MG1B.EFR32MG1V.E
    4819:	32335246 50314742 52464500 47423233     FR32BG1P.EFR32BG
    4829:	45004231 32335246 56314742 52464500     1B.EFR32BG1V.EFR
    4839:	47463233 45005031 32335246 42314746     32FG1P.EFR32FG1B
    4849:	52464500 47463233 45005631 32335246     .EFR32FG1V.EFR32
    4859:	3231474d 46450050 4d323352 42323147     MG12P.EFR32MG12B
    4869:	52464500 474d3233 00563231 33524645     .EFR32MG12V.EFR3
    4879:	31474232 45005032 32335246 32314742     2BG12P.EFR32BG12
    4889:	46450042 42323352 56323147 52464500     B.EFR32BG12V.EFR
    4899:	47463233 00503231 33524645 31474632     32FG12P.EFR32FG1
    48a9:	45004232 32335246 32314746 46450056     2B.EFR32FG12V.EF
    48b9:	4d323352 50333147 52464500 474d3233     R32MG13P.EFR32MG
    48c9:	00423331 33524645 31474d32 45005633     13B.EFR32MG13V.E
    48d9:	32335246 33314742 46450050 42323352     FR32BG13P.EFR32B
    48e9:	42333147 52464500 47423233 00563331     G13B.EFR32BG13V.
    48f9:	33524645 31475a32 45005033 32335246     EFR32ZG13P.EFR32
    4909:	33314746 46450050 46323352 42333147     FG13P.EFR32FG13B
    4919:	52464500 47463233 00563331 33524645     .EFR32FG13V.EFR3
    4929:	31474d32 45005034 32335246 3431474d     2MG14P.EFR32MG14
    4939:	46450042 4d323352 56343147 52464500     B.EFR32MG14V.EFR
    4949:	47423233 00503431 33524645 31474232     32BG14P.EFR32BG1
    4959:	45004234 32335246 34314742 46450056     4B.EFR32BG14V.EF
    4969:	5a323352 50343147 52464500 47463233     R32ZG14P.EFR32FG
    4979:	00503431 33524645 31474632 45004234     14P.EFR32FG14B.E
    4989:	3233525a 45004757 32335246 34314746     ZR32WG.EFR32FG14
    4999:	5a450056 4c323352 46450047 4732334d     V.EZR32LG.EFM32G
    49a9:	4d464500 47473233 00423231 334d4645     .EFM32GG12B.EFM3
    49b9:	00474732 334d4645 31475432 54004231     2GG.EFM32TG11B.T
    49c9:	46450047 4732334d 42313147 4d464500     G.EFM32GG11B.EFM
    49d9:	474c3233 4d464500 474a3233 00423231     32LG.EFM32JG12B.
    49e9:	334d4645 00475732 334d4645 31475032     EFM32WG.EFM32PG1
    49f9:	5a004232 46450047 5032334d 00423147     2B.ZG.EFM32PG1B.
    4a09:	33525a45 00474832 68257325 68254675     EZR32HG.%s%huF%h
    4a19:	25632575 68682563 4f4c0075 4b4f0057     u%c%c%hhu.LOW.OK
    4a29:	73255b00 202d205d 69766544 203a6563     .[%s] - Device: 
    4a39:	0a0d7325 73255b00 202d205d 69766544     %s...[%s] - Devi
    4a49:	52206563 73697665 3a6e6f69 25783020     ce Revision: 0x%
    4a59:	0d583430 255b000a 2d205d73 6c614320     04X...[%s] - Cal
    4a69:	61726269 6e6f6974 6d657420 61726570     ibration tempera
    4a79:	65727574 6825203a 43207568 5b000a0d     ture: %hhu C...[
    4a89:	205d7325 6c46202d 20687361 657a6953     %s] - Flash Size
    4a99:	6825203a 426b2075 5b000a0d 205d7325     : %hu kB...[%s] 
    4aa9:	4152202d 6953204d 203a657a 20756825     - RAM Size: %hu 
    4ab9:	0a0d426b 73255b00 202d205d 65657246     kB...[%s] - Free
    4ac9:	4d415220 6c25203a 0d422075 255b000a      RAM: %lu B...[%
    4ad9:	2d205d73 696e5520 20657571 203a4449     s] - Unique ID: 
    4ae9:	58383025 3830252d 000a0d58 5d73255b     %08X-%08X...[%s]
    4af9:	43202d20 2d20554d 58464820 6c43204f      - CMU - HFXO Cl
    4b09:	3a6b636f 312e2520 484d2066 0a0d217a     ock: %.1f MHz!..
    4b19:	73255b00 202d205d 20554d43 4648202d     .[%s] - CMU - HF
    4b29:	204f4352 636f6c43 25203a6b 2066312e     RCO Clock: %.1f 
    4b39:	217a484d 5b000a0d 205d7325 4d43202d     MHz!...[%s] - CM
    4b49:	202d2055 46485355 204f4352 636f6c43     U - USHFRCO Cloc
    4b59:	25203a6b 2066312e 217a484d 5b000a0d     k: %.1f MHz!...[
    4b69:	205d7325 4d43202d 202d2055 48585541     %s] - CMU - AUXH
    4b79:	4f435246 6f6c4320 203a6b63 66312e25     FRCO Clock: %.1f
    4b89:	7a484d20 000a0d21 5d73255b 43202d20      MHz!...[%s] - C
    4b99:	2d20554d 58464c20 6c43204f 3a6b636f     MU - LFXO Clock:
    4ba9:	332e2520 486b2066 0a0d217a 73255b00      %.3f kHz!...[%s
    4bb9:	202d205d 20554d43 464c202d 204f4352     ] - CMU - LFRCO 
    4bc9:	636f6c43 25203a6b 2066332e 217a486b     Clock: %.3f kHz!
    4bd9:	5b000a0d 205d7325 4d43202d 202d2055     ...[%s] - CMU - 
    4be9:	52464c55 43204f43 6b636f6c 2e25203a     ULFRCO Clock: %.
    4bf9:	6b206633 0d217a48 255b000a 2d205d73     3f kHz!...[%s] -
    4c09:	554d4320 48202d20 43525346 6f6c4320      CMU - HFSRC Clo
    4c19:	203a6b63 66312e25 7a484d20 000a0d21     ck: %.1f MHz!...
    4c29:	5d73255b 43202d20 2d20554d 20464820     [%s] - CMU - HF 
    4c39:	636f6c43 25203a6b 2066312e 217a484d     Clock: %.1f MHz!
    4c49:	5b000a0d 205d7325 4d43202d 202d2055     ...[%s] - CMU - 
    4c59:	55424648 6c432053 3a6b636f 312e2520     HFBUS Clock: %.1
    4c69:	484d2066 0a0d217a 73255b00 202d205d     f MHz!...[%s] - 
    4c79:	20554d43 4648202d 45524f43 6f6c4320     CMU - HFCORE Clo
    4c89:	203a6b63 66312e25 7a484d20 000a0d21     ck: %.1f MHz!...
    4c99:	5d73255b 43202d20 2d20554d 45464820     [%s] - CMU - HFE
    4ca9:	43205058 6b636f6c 2e25203a 4d206631     XP Clock: %.1f M
    4cb9:	0d217a48 255b000a 2d205d73 554d4320     Hz!...[%s] - CMU
    4cc9:	48202d20 52455046 6f6c4320 203a6b63      - HFPER Clock: 
    4cd9:	66312e25 7a484d20 000a0d21 5d73255b     %.1f MHz!...[%s]
    4ce9:	43202d20 2d20554d 50464820 20425245      - CMU - HFPERB 
    4cf9:	636f6c43 25203a6b 2066312e 217a484d     Clock: %.1f MHz!
    4d09:	5b000a0d 205d7325 4d43202d 202d2055     ...[%s] - CMU - 
    4d19:	45504648 43204352 6b636f6c 2e25203a     HFPERC Clock: %.
    4d29:	4d206631 0d217a48 255b000a 2d205d73     1f MHz!...[%s] -
    4d39:	554d4320 48202d20 20454c46 636f6c43      CMU - HFLE Cloc
    4d49:	25203a6b 2066312e 217a484d 5b000a0d     k: %.1f MHz!...[
    4d59:	205d7325 4d43202d 202d2055 49505351     %s] - CMU - QSPI
    4d69:	6f6c4320 203a6b63 66312e25 7a484d20      Clock: %.1f MHz
    4d79:	000a0d21 5d73255b 43202d20 2d20554d     !...[%s] - CMU -
    4d89:	49445320 6c43204f 3a6b636f 312e2520      SDIO Clock: %.1
    4d99:	484d2066 0a0d217a 73255b00 202d205d     f MHz!...[%s] - 
    4da9:	20554d43 5355202d 6c432042 3a6b636f     CMU - USB Clock:
    4db9:	312e2520 484d2066 0a0d217a 73255b00      %.1f MHz!...[%s
    4dc9:	202d205d 20554d43 4441202d 43203043     ] - CMU - ADC0 C
    4dd9:	6b636f6c 2e25203a 4d206631 0d217a48     lock: %.1f MHz!.
    4de9:	255b000a 2d205d73 554d4320 41202d20     ..[%s] - CMU - A
    4df9:	20314344 636f6c43 25203a6b 2066312e     DC1 Clock: %.1f 
    4e09:	217a484d 5b000a0d 205d7325 4d43202d     MHz!...[%s] - CM
    4e19:	202d2055 20474244 636f6c43 25203a6b     U - DBG Clock: %
    4e29:	2066312e 217a484d 5b000a0d 205d7325     .1f MHz!...[%s] 
    4e39:	4d43202d 202d2055 20585541 636f6c43     - CMU - AUX Cloc
    4e49:	25203a6b 2066312e 217a484d 5b000a0d     k: %.1f MHz!...[
    4e59:	205d7325 4d43202d 202d2055 2041464c     %s] - CMU - LFA 
    4e69:	636f6c43 25203a6b 2066332e 217a486b     Clock: %.3f kHz!
    4e79:	5b000a0d 205d7325 4d43202d 202d2055     ...[%s] - CMU - 
    4e89:	4553454c 2045534e 636f6c43 25203a6b     LESENSE Clock: %
    4e99:	2066332e 217a486b 5b000a0d 205d7325     .3f kHz!...[%s] 
    4ea9:	4d43202d 202d2055 20435452 636f6c43     - CMU - RTC Cloc
    4eb9:	25203a6b 2066332e 217a486b 5b000a0d     k: %.3f kHz!...[
    4ec9:	205d7325 4d43202d 202d2055 2044434c     %s] - CMU - LCD 
    4ed9:	636f6c43 25203a6b 2066332e 217a486b     Clock: %.3f kHz!
    4ee9:	5b000a0d 205d7325 4d43202d 202d2055     ...[%s] - CMU - 
    4ef9:	4954454c 3052454d 6f6c4320 203a6b63     LETIMER0 Clock: 
    4f09:	66332e25 7a486b20 000a0d21 5d73255b     %.3f kHz!...[%s]
    4f19:	43202d20 2d20554d 54454c20 52454d49      - CMU - LETIMER
    4f29:	6c432031 3a6b636f 332e2520 486b2066     1 Clock: %.3f kH
    4f39:	0a0d217a 73255b00 202d205d 20554d43     z!...[%s] - CMU 
    4f49:	464c202d 6c432042 3a6b636f 332e2520     - LFB Clock: %.3
    4f59:	486b2066 0a0d217a 73255b00 202d205d     f kHz!...[%s] - 
    4f69:	20554d43 454c202d 54524155 6c432030     CMU - LEUART0 Cl
    4f79:	3a6b636f 332e2520 486b2066 0a0d217a     ock: %.3f kHz!..
    4f89:	73255b00 202d205d 20554d43 454c202d     .[%s] - CMU - LE
    4f99:	54524155 6c432031 3a6b636f 332e2520     UART1 Clock: %.3
    4fa9:	486b2066 0a0d217a 73255b00 202d205d     f kHz!...[%s] - 
    4fb9:	20554d43 5953202d 43495453 6c43204b     CMU - SYSTICK Cl
    4fc9:	3a6b636f 332e2520 486b2066 0a0d217a     ock: %.3f kHz!..
    4fd9:	73255b00 202d205d 20554d43 5343202d     .[%s] - CMU - CS
    4fe9:	43204e45 6b636f6c 2e25203a 6b206633     EN Clock: %.3f k
    4ff9:	0d217a48 255b000a 2d205d73 554d4320     Hz!...[%s] - CMU
    5009:	4c202d20 43204346 6b636f6c 2e25203a      - LFC Clock: %.
    5019:	6b206633 0d217a48 255b000a 2d205d73     3f kHz!...[%s] -
    5029:	554d4320 4c202d20 43204546 6b636f6c      CMU - LFE Clock
    5039:	2e25203a 6b206633 0d217a48 255b000a     : %.3f kHz!...[%
    5049:	2d205d73 554d4320 52202d20 20434354     s] - CMU - RTCC 
    5059:	636f6c43 25203a6b 2066332e 217a486b     Clock: %.3f kHz!
    5069:	5b000a0d 205d7325 4d45202d 202d2055     ...[%s] - EMU - 
    5079:	44445641 6c614620 6854206c 68736572     AVDD Fall Thresh
    5089:	3a646c6f 322e2520 566d2066 000a0d21     old: %.2f mV!...
    5099:	5d73255b 45202d20 2d20554d 44564120     [%s] - EMU - AVD
    50a9:	69522044 54206573 73657268 646c6f68     D Rise Threshold
    50b9:	2e25203a 6d206632 0a0d2156 73255b00     : %.2f mV!...[%s
    50c9:	202d205d 20554d45 5641202d 56204444     ] - EMU - AVDD V
    50d9:	61746c6f 203a6567 66322e25 0d566d20     oltage: %.2f mV.
    50e9:	255b000a 2d205d73 554d4520 41202d20     ..[%s] - EMU - A
    50f9:	20444456 74617453 203a7375 0a0d7325     VDD Status: %s..
    5109:	73255b00 202d205d 20554d45 5644202d     .[%s] - EMU - DV
    5119:	46204444 206c6c61 65726854 6c6f6873     DD Fall Threshol
    5129:	25203a64 2066322e 0d21566d 255b000a     d: %.2f mV!...[%
    5139:	2d205d73 554d4520 44202d20 20444456     s] - EMU - DVDD 
    5149:	65736952 72685420 6f687365 203a646c     Rise Threshold: 
    5159:	66322e25 21566d20 5b000a0d 205d7325     %.2f mV!...[%s] 
    5169:	4d45202d 202d2055 44445644 6c6f5620     - EMU - DVDD Vol
    5179:	65676174 2e25203a 6d206632 000a0d56     tage: %.2f mV...
    5189:	5d73255b 45202d20 2d20554d 44564420     [%s] - EMU - DVD
    5199:	74532044 73757461 7325203a 5b000a0d     D Status: %s...[
    51a9:	205d7325 4d45202d 202d2055 44564f49     %s] - EMU - IOVD
    51b9:	61462044 54206c6c 73657268 646c6f68     D Fall Threshold
    51c9:	2e25203a 6d206632 0a0d2156 73255b00     : %.2f mV!...[%s
    51d9:	202d205d 20554d45 4f49202d 20444456     ] - EMU - IOVDD 
    51e9:	65736952 72685420 6f687365 203a646c     Rise Threshold: 
    51f9:	66322e25 21566d20 5b000a0d 205d7325     %.2f mV!...[%s] 
    5209:	4d45202d 202d2055 44564f49 6f562044     - EMU - IOVDD Vo
    5219:	6761746c 25203a65 2066322e 0a0d566d     ltage: %.2f mV..
    5229:	73255b00 202d205d 20554d45 4f49202d     .[%s] - EMU - IO
    5239:	20444456 74617453 203a7375 0a0d7325     VDD Status: %s..
    5249:	73255b00 202d205d 20554d45 6f43202d     .[%s] - EMU - Co
    5259:	56206572 61746c6f 203a6567 66322e25     re Voltage: %.2f
    5269:	0d566d20 255b000a 2d205d73 61635320      mV...[%s] - Sca
    5279:	6e696e6e 32492067 75622043 2e312073     nning I2C bus 1.
    5289:	0a0d2e2e 73255b00 202d205d 64412020     .....[%s] -   Ad
    5299:	73657264 78302073 58323025 4b434120     dress 0x%02X ACK
    52a9:	0d216465 255b000a 2d205d73 454d4220     ed!...[%s] - BME
    52b9:	20444920 58323025 5b000a0d 205d7325      ID %02X...[%s] 
    52c9:	6e49202d 61697469 6163206c 7262696c     - Initial calibr
    52d9:	6f697461 7564206e 0d3a706d 255b000a     ation dump:...[%
    52e9:	2d205d73 30202020 38302578 3e2d2058     s] -   0x%08X ->
    52f9:	25783020 0d583830 255b000a 2d205d73      0x%08X...[%s] -
    5309:	616c4620 50206873 20747261 203a4449      Flash Part ID: 
    5319:	58363025 5b000a0d 205d7325 6c46202d     %06X...[%s] - Fl
    5329:	20687361 203a4449 58323025 58323025     ash ID: %02X%02X
    5339:	58323025 58323025 58323025 58323025     %02X%02X%02X%02X
    5349:	58323025 58323025 5b000a0d 205d7325     %02X%02X...[%s] 
    5359:	5351202d 52204950 25203a44 0d583230     - QSPI RD: %02X.
    5369:	255b000a 2d205d73 6f6f4220 44522074     ..[%s] - Boot RD
    5379:	3025203a 0a0d5832 73255b00 202d205d     : %02X...[%s] - 
    5389:	61746144 3a445220 32302520 000a0d58     Data RD: %02X...
    5399:	5d73255b 41202d20 54204344 3a706d65     [%s] - ADC Temp:
    53a9:	322e2520 000a0d66 5d73255b 45202d20      %.2f...[%s] - E
    53b9:	5420554d 3a706d65 322e2520 000a0d66     MU Temp: %.2f...
    53c9:	5d73255b 48202d20 204f5846 72617453     [%s] - HFXO Star
    53d9:	3a707574 322e2520 46702066 5b000a0d     tup: %.2f pF...[
    53e9:	205d7325 4648202d 53204f58 74726174     %s] - HFXO Start
    53f9:	203a7075 66322e25 0d417520 255b000a     up: %.2f uA...[%
    5409:	2d205d73 58464820 7453204f 79646165     s] - HFXO Steady
    5419:	2e25203a 70206632 000a0d46 5d73255b     : %.2f pF...[%s]
    5429:	48202d20 204f5846 61657453 203a7964      - HFXO Steady: 
    5439:	66322e25 0d417520 255b000a 2d205d73     %.2f uA...[%s] -
    5449:	58464820 4d50204f 255b2041 5d583330      HFXO PMA [%03X]
    5459:	2e25203a 75206632 000a0d41 5d73255b     : %.2f uA...[%s]
    5469:	48202d20 204f5846 20414450 3330255b      - HFXO PDA [%03
    5479:	203a5d58 66322e25 0d417520 255b000a     X]: %.2f uA...[%
    5489:	2d205d73 43545220 69542043 203a656d     s] - RTCC Time: 
    5499:	0d756c25 255b000a 2d205d73 67694220     %lu...[%s] - Big
    54a9:	67616620 656f6420 6f6e2073 656e2074      fag does not ne
    54b9:	64206465 67756265 72617520 6e612074     ed debug uart an
    54c9:	726f6d79 0a0d2e65 00000000               ymore..........

000054d8 <pow10.5152>:
    54d8:	00000000 3ff00000 00000000 40240000     .......?......$@
    54e8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    54f8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    5508:	00000000 412e8480 00000000 416312d0     .......A......cA
    5518:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
